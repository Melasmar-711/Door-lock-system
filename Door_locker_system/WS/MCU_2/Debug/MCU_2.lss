
MCU_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003408  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000de  00800060  00003408  0000349c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080013e  0080013e  0000357a  2**0
                  ALLOC
  3 .stab         0000297c  00000000  00000000  0000357c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ebf  00000000  00000000  00005ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006db7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007067  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a948  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000aaa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ad35  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b503  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 33       	cpi	r26, 0x3E	; 62
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e3       	ldi	r26, 0x3E	; 62
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 33       	cpi	r26, 0x3F	; 63
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 86 19 	jmp	0x330c	; 0x330c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e3       	ldi	r26, 0x35	; 53
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a2 19 	jmp	0x3344	; 0x3344 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 86 19 	jmp	0x330c	; 0x330c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	85 e3       	ldi	r24, 0x35	; 53
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a2 19 	jmp	0x3344	; 0x3344 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 96 19 	jmp	0x332c	; 0x332c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:




int main()
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c3 5b       	subi	r28, 0xB3	; 179
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	uint8 error_times=0;
     b60:	fe 01       	movw	r30, r28
     b62:	eb 56       	subi	r30, 0x6B	; 107
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	10 82       	st	Z, r1
	uint8 i=0;
     b68:	fe 01       	movw	r30, r28
     b6a:	ec 56       	subi	r30, 0x6C	; 108
     b6c:	ff 4f       	sbci	r31, 0xFF	; 255
     b6e:	10 82       	st	Z, r1
	uint8 current_status;
	uint8 next_status=new_password;
     b70:	fe 01       	movw	r30, r28
     b72:	ee 56       	subi	r30, 0x6E	; 110
     b74:	ff 4f       	sbci	r31, 0xFF	; 255
     b76:	10 82       	st	Z, r1
	uint8 option;
	/*check byte */
	uint8 check;
	uint8  password_check[]="NNNN ";
     b78:	ce 01       	movw	r24, r28
     b7a:	8a 56       	subi	r24, 0x6A	; 106
     b7c:	9f 4f       	sbci	r25, 0xFF	; 255
     b7e:	c8 55       	subi	r28, 0x58	; 88
     b80:	df 4f       	sbci	r29, 0xFF	; 255
     b82:	99 83       	std	Y+1, r25	; 0x01
     b84:	88 83       	st	Y, r24
     b86:	c8 5a       	subi	r28, 0xA8	; 168
     b88:	d0 40       	sbci	r29, 0x00	; 0
     b8a:	8f e2       	ldi	r24, 0x2F	; 47
     b8c:	91 e0       	ldi	r25, 0x01	; 1
     b8e:	c6 55       	subi	r28, 0x56	; 86
     b90:	df 4f       	sbci	r29, 0xFF	; 255
     b92:	99 83       	std	Y+1, r25	; 0x01
     b94:	88 83       	st	Y, r24
     b96:	ca 5a       	subi	r28, 0xAA	; 170
     b98:	d0 40       	sbci	r29, 0x00	; 0
     b9a:	96 e0       	ldi	r25, 0x06	; 6
     b9c:	c4 55       	subi	r28, 0x54	; 84
     b9e:	df 4f       	sbci	r29, 0xFF	; 255
     ba0:	98 83       	st	Y, r25
     ba2:	cc 5a       	subi	r28, 0xAC	; 172
     ba4:	d0 40       	sbci	r29, 0x00	; 0
     ba6:	c6 55       	subi	r28, 0x56	; 86
     ba8:	df 4f       	sbci	r29, 0xFF	; 255
     baa:	e8 81       	ld	r30, Y
     bac:	f9 81       	ldd	r31, Y+1	; 0x01
     bae:	ca 5a       	subi	r28, 0xAA	; 170
     bb0:	d0 40       	sbci	r29, 0x00	; 0
     bb2:	00 80       	ld	r0, Z
     bb4:	c6 55       	subi	r28, 0x56	; 86
     bb6:	df 4f       	sbci	r29, 0xFF	; 255
     bb8:	88 81       	ld	r24, Y
     bba:	99 81       	ldd	r25, Y+1	; 0x01
     bbc:	ca 5a       	subi	r28, 0xAA	; 170
     bbe:	d0 40       	sbci	r29, 0x00	; 0
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	c6 55       	subi	r28, 0x56	; 86
     bc4:	df 4f       	sbci	r29, 0xFF	; 255
     bc6:	99 83       	std	Y+1, r25	; 0x01
     bc8:	88 83       	st	Y, r24
     bca:	ca 5a       	subi	r28, 0xAA	; 170
     bcc:	d0 40       	sbci	r29, 0x00	; 0
     bce:	c8 55       	subi	r28, 0x58	; 88
     bd0:	df 4f       	sbci	r29, 0xFF	; 255
     bd2:	e8 81       	ld	r30, Y
     bd4:	f9 81       	ldd	r31, Y+1	; 0x01
     bd6:	c8 5a       	subi	r28, 0xA8	; 168
     bd8:	d0 40       	sbci	r29, 0x00	; 0
     bda:	00 82       	st	Z, r0
     bdc:	c8 55       	subi	r28, 0x58	; 88
     bde:	df 4f       	sbci	r29, 0xFF	; 255
     be0:	88 81       	ld	r24, Y
     be2:	99 81       	ldd	r25, Y+1	; 0x01
     be4:	c8 5a       	subi	r28, 0xA8	; 168
     be6:	d0 40       	sbci	r29, 0x00	; 0
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	c8 55       	subi	r28, 0x58	; 88
     bec:	df 4f       	sbci	r29, 0xFF	; 255
     bee:	99 83       	std	Y+1, r25	; 0x01
     bf0:	88 83       	st	Y, r24
     bf2:	c8 5a       	subi	r28, 0xA8	; 168
     bf4:	d0 40       	sbci	r29, 0x00	; 0
     bf6:	c4 55       	subi	r28, 0x54	; 84
     bf8:	df 4f       	sbci	r29, 0xFF	; 255
     bfa:	98 81       	ld	r25, Y
     bfc:	cc 5a       	subi	r28, 0xAC	; 172
     bfe:	d0 40       	sbci	r29, 0x00	; 0
     c00:	91 50       	subi	r25, 0x01	; 1
     c02:	c4 55       	subi	r28, 0x54	; 84
     c04:	df 4f       	sbci	r29, 0xFF	; 255
     c06:	98 83       	st	Y, r25
     c08:	cc 5a       	subi	r28, 0xAC	; 172
     c0a:	d0 40       	sbci	r29, 0x00	; 0
     c0c:	c4 55       	subi	r28, 0x54	; 84
     c0e:	df 4f       	sbci	r29, 0xFF	; 255
     c10:	e8 81       	ld	r30, Y
     c12:	cc 5a       	subi	r28, 0xAC	; 172
     c14:	d0 40       	sbci	r29, 0x00	; 0
     c16:	ee 23       	and	r30, r30
     c18:	31 f6       	brne	.-116    	; 0xba6 <main+0x60>
	uint8 password[8]="NNNN ";
     c1a:	ce 01       	movw	r24, r28
     c1c:	84 56       	subi	r24, 0x64	; 100
     c1e:	9f 4f       	sbci	r25, 0xFF	; 255
     c20:	c3 55       	subi	r28, 0x53	; 83
     c22:	df 4f       	sbci	r29, 0xFF	; 255
     c24:	99 83       	std	Y+1, r25	; 0x01
     c26:	88 83       	st	Y, r24
     c28:	cd 5a       	subi	r28, 0xAD	; 173
     c2a:	d0 40       	sbci	r29, 0x00	; 0
     c2c:	c3 55       	subi	r28, 0x53	; 83
     c2e:	df 4f       	sbci	r29, 0xFF	; 255
     c30:	e8 81       	ld	r30, Y
     c32:	f9 81       	ldd	r31, Y+1	; 0x01
     c34:	cd 5a       	subi	r28, 0xAD	; 173
     c36:	d0 40       	sbci	r29, 0x00	; 0
     c38:	c1 55       	subi	r28, 0x51	; 81
     c3a:	df 4f       	sbci	r29, 0xFF	; 255
     c3c:	f9 83       	std	Y+1, r31	; 0x01
     c3e:	e8 83       	st	Y, r30
     c40:	cf 5a       	subi	r28, 0xAF	; 175
     c42:	d0 40       	sbci	r29, 0x00	; 0
     c44:	8f e2       	ldi	r24, 0x2F	; 47
     c46:	91 e0       	ldi	r25, 0x01	; 1
     c48:	cf 54       	subi	r28, 0x4F	; 79
     c4a:	df 4f       	sbci	r29, 0xFF	; 255
     c4c:	99 83       	std	Y+1, r25	; 0x01
     c4e:	88 83       	st	Y, r24
     c50:	c1 5b       	subi	r28, 0xB1	; 177
     c52:	d0 40       	sbci	r29, 0x00	; 0
     c54:	96 e0       	ldi	r25, 0x06	; 6
     c56:	cd 54       	subi	r28, 0x4D	; 77
     c58:	df 4f       	sbci	r29, 0xFF	; 255
     c5a:	98 83       	st	Y, r25
     c5c:	c3 5b       	subi	r28, 0xB3	; 179
     c5e:	d0 40       	sbci	r29, 0x00	; 0
     c60:	cf 54       	subi	r28, 0x4F	; 79
     c62:	df 4f       	sbci	r29, 0xFF	; 255
     c64:	e8 81       	ld	r30, Y
     c66:	f9 81       	ldd	r31, Y+1	; 0x01
     c68:	c1 5b       	subi	r28, 0xB1	; 177
     c6a:	d0 40       	sbci	r29, 0x00	; 0
     c6c:	00 80       	ld	r0, Z
     c6e:	cf 54       	subi	r28, 0x4F	; 79
     c70:	df 4f       	sbci	r29, 0xFF	; 255
     c72:	88 81       	ld	r24, Y
     c74:	99 81       	ldd	r25, Y+1	; 0x01
     c76:	c1 5b       	subi	r28, 0xB1	; 177
     c78:	d0 40       	sbci	r29, 0x00	; 0
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	cf 54       	subi	r28, 0x4F	; 79
     c7e:	df 4f       	sbci	r29, 0xFF	; 255
     c80:	99 83       	std	Y+1, r25	; 0x01
     c82:	88 83       	st	Y, r24
     c84:	c1 5b       	subi	r28, 0xB1	; 177
     c86:	d0 40       	sbci	r29, 0x00	; 0
     c88:	c1 55       	subi	r28, 0x51	; 81
     c8a:	df 4f       	sbci	r29, 0xFF	; 255
     c8c:	e8 81       	ld	r30, Y
     c8e:	f9 81       	ldd	r31, Y+1	; 0x01
     c90:	cf 5a       	subi	r28, 0xAF	; 175
     c92:	d0 40       	sbci	r29, 0x00	; 0
     c94:	00 82       	st	Z, r0
     c96:	c1 55       	subi	r28, 0x51	; 81
     c98:	df 4f       	sbci	r29, 0xFF	; 255
     c9a:	88 81       	ld	r24, Y
     c9c:	99 81       	ldd	r25, Y+1	; 0x01
     c9e:	cf 5a       	subi	r28, 0xAF	; 175
     ca0:	d0 40       	sbci	r29, 0x00	; 0
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	c1 55       	subi	r28, 0x51	; 81
     ca6:	df 4f       	sbci	r29, 0xFF	; 255
     ca8:	99 83       	std	Y+1, r25	; 0x01
     caa:	88 83       	st	Y, r24
     cac:	cf 5a       	subi	r28, 0xAF	; 175
     cae:	d0 40       	sbci	r29, 0x00	; 0
     cb0:	cd 54       	subi	r28, 0x4D	; 77
     cb2:	df 4f       	sbci	r29, 0xFF	; 255
     cb4:	98 81       	ld	r25, Y
     cb6:	c3 5b       	subi	r28, 0xB3	; 179
     cb8:	d0 40       	sbci	r29, 0x00	; 0
     cba:	91 50       	subi	r25, 0x01	; 1
     cbc:	cd 54       	subi	r28, 0x4D	; 77
     cbe:	df 4f       	sbci	r29, 0xFF	; 255
     cc0:	98 83       	st	Y, r25
     cc2:	c3 5b       	subi	r28, 0xB3	; 179
     cc4:	d0 40       	sbci	r29, 0x00	; 0
     cc6:	cd 54       	subi	r28, 0x4D	; 77
     cc8:	df 4f       	sbci	r29, 0xFF	; 255
     cca:	e8 81       	ld	r30, Y
     ccc:	c3 5b       	subi	r28, 0xB3	; 179
     cce:	d0 40       	sbci	r29, 0x00	; 0
     cd0:	ee 23       	and	r30, r30
     cd2:	31 f6       	brne	.-116    	; 0xc60 <main+0x11a>
     cd4:	c3 55       	subi	r28, 0x53	; 83
     cd6:	df 4f       	sbci	r29, 0xFF	; 255
     cd8:	e8 81       	ld	r30, Y
     cda:	f9 81       	ldd	r31, Y+1	; 0x01
     cdc:	cd 5a       	subi	r28, 0xAD	; 173
     cde:	d0 40       	sbci	r29, 0x00	; 0
     ce0:	17 82       	std	Z+7, r1	; 0x07
     ce2:	16 82       	std	Z+6, r1	; 0x06

	/**/
	UART_ConfigType configurations;
	configurations.baud_rate=9600;
     ce4:	fe 01       	movw	r30, r28
     ce6:	ec 55       	subi	r30, 0x5C	; 92
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	80 e8       	ldi	r24, 0x80	; 128
     cec:	95 e2       	ldi	r25, 0x25	; 37
     cee:	91 83       	std	Z+1, r25	; 0x01
     cf0:	80 83       	st	Z, r24
	configurations.ch_size=bit_8;
     cf2:	fe 01       	movw	r30, r28
     cf4:	ec 55       	subi	r30, 0x5C	; 92
     cf6:	ff 4f       	sbci	r31, 0xFF	; 255
     cf8:	83 e0       	ldi	r24, 0x03	; 3
     cfa:	83 83       	std	Z+3, r24	; 0x03
	configurations.parity_type=none;
     cfc:	fe 01       	movw	r30, r28
     cfe:	ec 55       	subi	r30, 0x5C	; 92
     d00:	ff 4f       	sbci	r31, 0xFF	; 255
     d02:	12 82       	std	Z+2, r1	; 0x02
	UART_init(&configurations);
     d04:	ce 01       	movw	r24, r28
     d06:	8c 55       	subi	r24, 0x5C	; 92
     d08:	9f 4f       	sbci	r25, 0xFF	; 255
     d0a:	0e 94 6d 18 	call	0x30da	; 0x30da <UART_init>
	/*lcd intilization */
	LCD_init();
     d0e:	0e 94 b1 13 	call	0x2762	; 0x2762 <LCD_init>

	LCD_displayString("enter password");
     d12:	80 e6       	ldi	r24, 0x60	; 96
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>


	while(1)
	{
		/*-------------------------------------------------------------------------------*/
		if(next_status==new_password)
     d1a:	fe 01       	movw	r30, r28
     d1c:	ee 56       	subi	r30, 0x6E	; 110
     d1e:	ff 4f       	sbci	r31, 0xFF	; 255
     d20:	80 81       	ld	r24, Z
     d22:	88 23       	and	r24, r24
     d24:	09 f0       	breq	.+2      	; 0xd28 <main+0x1e2>
     d26:	bb c1       	rjmp	.+886    	; 0x109e <main+0x558>
		{
			current_status=new_password;
     d28:	fe 01       	movw	r30, r28
     d2a:	ed 56       	subi	r30, 0x6D	; 109
     d2c:	ff 4f       	sbci	r31, 0xFF	; 255
     d2e:	10 82       	st	Z, r1
			LCD_moveCursor(1,0);
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
			for(i=0;i<4;i++)
     d38:	fe 01       	movw	r30, r28
     d3a:	ec 56       	subi	r30, 0x6C	; 108
     d3c:	ff 4f       	sbci	r31, 0xFF	; 255
     d3e:	10 82       	st	Z, r1
     d40:	dd c0       	rjmp	.+442    	; 0xefc <main+0x3b6>
			{
				password[i] = KEYPAD_getPressedKey();
     d42:	fe 01       	movw	r30, r28
     d44:	ec 56       	subi	r30, 0x6C	; 108
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	80 81       	ld	r24, Z
     d4a:	08 2f       	mov	r16, r24
     d4c:	10 e0       	ldi	r17, 0x00	; 0
     d4e:	0e 94 b9 12 	call	0x2572	; 0x2572 <KEYPAD_getPressedKey>
     d52:	28 2f       	mov	r18, r24
     d54:	ce 01       	movw	r24, r28
     d56:	84 56       	subi	r24, 0x64	; 100
     d58:	9f 4f       	sbci	r25, 0xFF	; 255
     d5a:	fc 01       	movw	r30, r24
     d5c:	e0 0f       	add	r30, r16
     d5e:	f1 1f       	adc	r31, r17
     d60:	20 83       	st	Z, r18
     d62:	fe 01       	movw	r30, r28
     d64:	e7 57       	subi	r30, 0x77	; 119
     d66:	ff 4f       	sbci	r31, 0xFF	; 255
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	aa ef       	ldi	r26, 0xFA	; 250
     d6e:	b3 e4       	ldi	r27, 0x43	; 67
     d70:	80 83       	st	Z, r24
     d72:	91 83       	std	Z+1, r25	; 0x01
     d74:	a2 83       	std	Z+2, r26	; 0x02
     d76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d78:	8e 01       	movw	r16, r28
     d7a:	0b 57       	subi	r16, 0x7B	; 123
     d7c:	1f 4f       	sbci	r17, 0xFF	; 255
     d7e:	fe 01       	movw	r30, r28
     d80:	e7 57       	subi	r30, 0x77	; 119
     d82:	ff 4f       	sbci	r31, 0xFF	; 255
     d84:	60 81       	ld	r22, Z
     d86:	71 81       	ldd	r23, Z+1	; 0x01
     d88:	82 81       	ldd	r24, Z+2	; 0x02
     d8a:	93 81       	ldd	r25, Z+3	; 0x03
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	4a ef       	ldi	r20, 0xFA	; 250
     d92:	54 e4       	ldi	r21, 0x44	; 68
     d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	f8 01       	movw	r30, r16
     d9e:	80 83       	st	Z, r24
     da0:	91 83       	std	Z+1, r25	; 0x01
     da2:	a2 83       	std	Z+2, r26	; 0x02
     da4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     da6:	fe 01       	movw	r30, r28
     da8:	eb 57       	subi	r30, 0x7B	; 123
     daa:	ff 4f       	sbci	r31, 0xFF	; 255
     dac:	60 81       	ld	r22, Z
     dae:	71 81       	ldd	r23, Z+1	; 0x01
     db0:	82 81       	ldd	r24, Z+2	; 0x02
     db2:	93 81       	ldd	r25, Z+3	; 0x03
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	40 e8       	ldi	r20, 0x80	; 128
     dba:	5f e3       	ldi	r21, 0x3F	; 63
     dbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dc0:	88 23       	and	r24, r24
     dc2:	44 f4       	brge	.+16     	; 0xdd4 <main+0x28e>
		__ticks = 1;
     dc4:	fe 01       	movw	r30, r28
     dc6:	ed 57       	subi	r30, 0x7D	; 125
     dc8:	ff 4f       	sbci	r31, 0xFF	; 255
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	91 83       	std	Z+1, r25	; 0x01
     dd0:	80 83       	st	Z, r24
     dd2:	64 c0       	rjmp	.+200    	; 0xe9c <main+0x356>
	else if (__tmp > 65535)
     dd4:	fe 01       	movw	r30, r28
     dd6:	eb 57       	subi	r30, 0x7B	; 123
     dd8:	ff 4f       	sbci	r31, 0xFF	; 255
     dda:	60 81       	ld	r22, Z
     ddc:	71 81       	ldd	r23, Z+1	; 0x01
     dde:	82 81       	ldd	r24, Z+2	; 0x02
     de0:	93 81       	ldd	r25, Z+3	; 0x03
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	3f ef       	ldi	r19, 0xFF	; 255
     de6:	4f e7       	ldi	r20, 0x7F	; 127
     de8:	57 e4       	ldi	r21, 0x47	; 71
     dea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dee:	18 16       	cp	r1, r24
     df0:	0c f0       	brlt	.+2      	; 0xdf4 <main+0x2ae>
     df2:	43 c0       	rjmp	.+134    	; 0xe7a <main+0x334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     df4:	fe 01       	movw	r30, r28
     df6:	e7 57       	subi	r30, 0x77	; 119
     df8:	ff 4f       	sbci	r31, 0xFF	; 255
     dfa:	60 81       	ld	r22, Z
     dfc:	71 81       	ldd	r23, Z+1	; 0x01
     dfe:	82 81       	ldd	r24, Z+2	; 0x02
     e00:	93 81       	ldd	r25, Z+3	; 0x03
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	40 e2       	ldi	r20, 0x20	; 32
     e08:	51 e4       	ldi	r21, 0x41	; 65
     e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e0e:	dc 01       	movw	r26, r24
     e10:	cb 01       	movw	r24, r22
     e12:	8e 01       	movw	r16, r28
     e14:	0d 57       	subi	r16, 0x7D	; 125
     e16:	1f 4f       	sbci	r17, 0xFF	; 255
     e18:	bc 01       	movw	r22, r24
     e1a:	cd 01       	movw	r24, r26
     e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	f8 01       	movw	r30, r16
     e26:	91 83       	std	Z+1, r25	; 0x01
     e28:	80 83       	st	Z, r24
     e2a:	1f c0       	rjmp	.+62     	; 0xe6a <main+0x324>
     e2c:	fe 01       	movw	r30, r28
     e2e:	ef 57       	subi	r30, 0x7F	; 127
     e30:	ff 4f       	sbci	r31, 0xFF	; 255
     e32:	88 ec       	ldi	r24, 0xC8	; 200
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	91 83       	std	Z+1, r25	; 0x01
     e38:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e3a:	fe 01       	movw	r30, r28
     e3c:	ef 57       	subi	r30, 0x7F	; 127
     e3e:	ff 4f       	sbci	r31, 0xFF	; 255
     e40:	80 81       	ld	r24, Z
     e42:	91 81       	ldd	r25, Z+1	; 0x01
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	f1 f7       	brne	.-4      	; 0xe44 <main+0x2fe>
     e48:	fe 01       	movw	r30, r28
     e4a:	ef 57       	subi	r30, 0x7F	; 127
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	91 83       	std	Z+1, r25	; 0x01
     e50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e52:	de 01       	movw	r26, r28
     e54:	ad 57       	subi	r26, 0x7D	; 125
     e56:	bf 4f       	sbci	r27, 0xFF	; 255
     e58:	fe 01       	movw	r30, r28
     e5a:	ed 57       	subi	r30, 0x7D	; 125
     e5c:	ff 4f       	sbci	r31, 0xFF	; 255
     e5e:	80 81       	ld	r24, Z
     e60:	91 81       	ldd	r25, Z+1	; 0x01
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	11 96       	adiw	r26, 0x01	; 1
     e66:	9c 93       	st	X, r25
     e68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e6a:	fe 01       	movw	r30, r28
     e6c:	ed 57       	subi	r30, 0x7D	; 125
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	80 81       	ld	r24, Z
     e72:	91 81       	ldd	r25, Z+1	; 0x01
     e74:	00 97       	sbiw	r24, 0x00	; 0
     e76:	d1 f6       	brne	.-76     	; 0xe2c <main+0x2e6>
     e78:	27 c0       	rjmp	.+78     	; 0xec8 <main+0x382>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e7a:	8e 01       	movw	r16, r28
     e7c:	0d 57       	subi	r16, 0x7D	; 125
     e7e:	1f 4f       	sbci	r17, 0xFF	; 255
     e80:	fe 01       	movw	r30, r28
     e82:	eb 57       	subi	r30, 0x7B	; 123
     e84:	ff 4f       	sbci	r31, 0xFF	; 255
     e86:	60 81       	ld	r22, Z
     e88:	71 81       	ldd	r23, Z+1	; 0x01
     e8a:	82 81       	ldd	r24, Z+2	; 0x02
     e8c:	93 81       	ldd	r25, Z+3	; 0x03
     e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	f8 01       	movw	r30, r16
     e98:	91 83       	std	Z+1, r25	; 0x01
     e9a:	80 83       	st	Z, r24
     e9c:	de 01       	movw	r26, r28
     e9e:	a1 58       	subi	r26, 0x81	; 129
     ea0:	bf 4f       	sbci	r27, 0xFF	; 255
     ea2:	fe 01       	movw	r30, r28
     ea4:	ed 57       	subi	r30, 0x7D	; 125
     ea6:	ff 4f       	sbci	r31, 0xFF	; 255
     ea8:	80 81       	ld	r24, Z
     eaa:	91 81       	ldd	r25, Z+1	; 0x01
     eac:	8d 93       	st	X+, r24
     eae:	9c 93       	st	X, r25
     eb0:	fe 01       	movw	r30, r28
     eb2:	e1 58       	subi	r30, 0x81	; 129
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	80 81       	ld	r24, Z
     eb8:	91 81       	ldd	r25, Z+1	; 0x01
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	f1 f7       	brne	.-4      	; 0xeba <main+0x374>
     ebe:	fe 01       	movw	r30, r28
     ec0:	e1 58       	subi	r30, 0x81	; 129
     ec2:	ff 4f       	sbci	r31, 0xFF	; 255
     ec4:	91 83       	std	Z+1, r25	; 0x01
     ec6:	80 83       	st	Z, r24
				_delay_ms(500);
				/* get the pressed key number */
				LCD_intgerToString(password[i]);
     ec8:	fe 01       	movw	r30, r28
     eca:	ec 56       	subi	r30, 0x6C	; 108
     ecc:	ff 4f       	sbci	r31, 0xFF	; 255
     ece:	80 81       	ld	r24, Z
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	ce 01       	movw	r24, r28
     ed6:	84 56       	subi	r24, 0x64	; 100
     ed8:	9f 4f       	sbci	r25, 0xFF	; 255
     eda:	fc 01       	movw	r30, r24
     edc:	e2 0f       	add	r30, r18
     ede:	f3 1f       	adc	r31, r19
     ee0:	80 81       	ld	r24, Z
     ee2:	88 2f       	mov	r24, r24
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_intgerToString>
		/*-------------------------------------------------------------------------------*/
		if(next_status==new_password)
		{
			current_status=new_password;
			LCD_moveCursor(1,0);
			for(i=0;i<4;i++)
     eea:	de 01       	movw	r26, r28
     eec:	ac 56       	subi	r26, 0x6C	; 108
     eee:	bf 4f       	sbci	r27, 0xFF	; 255
     ef0:	fe 01       	movw	r30, r28
     ef2:	ec 56       	subi	r30, 0x6C	; 108
     ef4:	ff 4f       	sbci	r31, 0xFF	; 255
     ef6:	80 81       	ld	r24, Z
     ef8:	8f 5f       	subi	r24, 0xFF	; 255
     efa:	8c 93       	st	X, r24
     efc:	fe 01       	movw	r30, r28
     efe:	ec 56       	subi	r30, 0x6C	; 108
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	80 81       	ld	r24, Z
     f04:	84 30       	cpi	r24, 0x04	; 4
     f06:	08 f4       	brcc	.+2      	; 0xf0a <main+0x3c4>
     f08:	1c cf       	rjmp	.-456    	; 0xd42 <main+0x1fc>
				password[i] = KEYPAD_getPressedKey();
				_delay_ms(500);
				/* get the pressed key number */
				LCD_intgerToString(password[i]);
			}
			password[i]=KEYPAD_getPressedKey();
     f0a:	fe 01       	movw	r30, r28
     f0c:	ec 56       	subi	r30, 0x6C	; 108
     f0e:	ff 4f       	sbci	r31, 0xFF	; 255
     f10:	80 81       	ld	r24, Z
     f12:	08 2f       	mov	r16, r24
     f14:	10 e0       	ldi	r17, 0x00	; 0
     f16:	0e 94 b9 12 	call	0x2572	; 0x2572 <KEYPAD_getPressedKey>
     f1a:	28 2f       	mov	r18, r24
     f1c:	ce 01       	movw	r24, r28
     f1e:	84 56       	subi	r24, 0x64	; 100
     f20:	9f 4f       	sbci	r25, 0xFF	; 255
     f22:	fc 01       	movw	r30, r24
     f24:	e0 0f       	add	r30, r16
     f26:	f1 1f       	adc	r31, r17
     f28:	20 83       	st	Z, r18
     f2a:	fe 01       	movw	r30, r28
     f2c:	e5 58       	subi	r30, 0x85	; 133
     f2e:	ff 4f       	sbci	r31, 0xFF	; 255
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	aa ef       	ldi	r26, 0xFA	; 250
     f36:	b3 e4       	ldi	r27, 0x43	; 67
     f38:	80 83       	st	Z, r24
     f3a:	91 83       	std	Z+1, r25	; 0x01
     f3c:	a2 83       	std	Z+2, r26	; 0x02
     f3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f40:	8e 01       	movw	r16, r28
     f42:	09 58       	subi	r16, 0x89	; 137
     f44:	1f 4f       	sbci	r17, 0xFF	; 255
     f46:	fe 01       	movw	r30, r28
     f48:	e5 58       	subi	r30, 0x85	; 133
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	60 81       	ld	r22, Z
     f4e:	71 81       	ldd	r23, Z+1	; 0x01
     f50:	82 81       	ldd	r24, Z+2	; 0x02
     f52:	93 81       	ldd	r25, Z+3	; 0x03
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	4a ef       	ldi	r20, 0xFA	; 250
     f5a:	54 e4       	ldi	r21, 0x44	; 68
     f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f60:	dc 01       	movw	r26, r24
     f62:	cb 01       	movw	r24, r22
     f64:	f8 01       	movw	r30, r16
     f66:	80 83       	st	Z, r24
     f68:	91 83       	std	Z+1, r25	; 0x01
     f6a:	a2 83       	std	Z+2, r26	; 0x02
     f6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f6e:	fe 01       	movw	r30, r28
     f70:	e9 58       	subi	r30, 0x89	; 137
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	60 81       	ld	r22, Z
     f76:	71 81       	ldd	r23, Z+1	; 0x01
     f78:	82 81       	ldd	r24, Z+2	; 0x02
     f7a:	93 81       	ldd	r25, Z+3	; 0x03
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	40 e8       	ldi	r20, 0x80	; 128
     f82:	5f e3       	ldi	r21, 0x3F	; 63
     f84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f88:	88 23       	and	r24, r24
     f8a:	44 f4       	brge	.+16     	; 0xf9c <main+0x456>
		__ticks = 1;
     f8c:	fe 01       	movw	r30, r28
     f8e:	eb 58       	subi	r30, 0x8B	; 139
     f90:	ff 4f       	sbci	r31, 0xFF	; 255
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	91 83       	std	Z+1, r25	; 0x01
     f98:	80 83       	st	Z, r24
     f9a:	64 c0       	rjmp	.+200    	; 0x1064 <main+0x51e>
	else if (__tmp > 65535)
     f9c:	fe 01       	movw	r30, r28
     f9e:	e9 58       	subi	r30, 0x89	; 137
     fa0:	ff 4f       	sbci	r31, 0xFF	; 255
     fa2:	60 81       	ld	r22, Z
     fa4:	71 81       	ldd	r23, Z+1	; 0x01
     fa6:	82 81       	ldd	r24, Z+2	; 0x02
     fa8:	93 81       	ldd	r25, Z+3	; 0x03
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	3f ef       	ldi	r19, 0xFF	; 255
     fae:	4f e7       	ldi	r20, 0x7F	; 127
     fb0:	57 e4       	ldi	r21, 0x47	; 71
     fb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fb6:	18 16       	cp	r1, r24
     fb8:	0c f0       	brlt	.+2      	; 0xfbc <main+0x476>
     fba:	43 c0       	rjmp	.+134    	; 0x1042 <main+0x4fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fbc:	fe 01       	movw	r30, r28
     fbe:	e5 58       	subi	r30, 0x85	; 133
     fc0:	ff 4f       	sbci	r31, 0xFF	; 255
     fc2:	60 81       	ld	r22, Z
     fc4:	71 81       	ldd	r23, Z+1	; 0x01
     fc6:	82 81       	ldd	r24, Z+2	; 0x02
     fc8:	93 81       	ldd	r25, Z+3	; 0x03
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	40 e2       	ldi	r20, 0x20	; 32
     fd0:	51 e4       	ldi	r21, 0x41	; 65
     fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	8e 01       	movw	r16, r28
     fdc:	0b 58       	subi	r16, 0x8B	; 139
     fde:	1f 4f       	sbci	r17, 0xFF	; 255
     fe0:	bc 01       	movw	r22, r24
     fe2:	cd 01       	movw	r24, r26
     fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	f8 01       	movw	r30, r16
     fee:	91 83       	std	Z+1, r25	; 0x01
     ff0:	80 83       	st	Z, r24
     ff2:	1f c0       	rjmp	.+62     	; 0x1032 <main+0x4ec>
     ff4:	fe 01       	movw	r30, r28
     ff6:	ed 58       	subi	r30, 0x8D	; 141
     ff8:	ff 4f       	sbci	r31, 0xFF	; 255
     ffa:	88 ec       	ldi	r24, 0xC8	; 200
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	91 83       	std	Z+1, r25	; 0x01
    1000:	80 83       	st	Z, r24
    1002:	fe 01       	movw	r30, r28
    1004:	ed 58       	subi	r30, 0x8D	; 141
    1006:	ff 4f       	sbci	r31, 0xFF	; 255
    1008:	80 81       	ld	r24, Z
    100a:	91 81       	ldd	r25, Z+1	; 0x01
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <main+0x4c6>
    1010:	fe 01       	movw	r30, r28
    1012:	ed 58       	subi	r30, 0x8D	; 141
    1014:	ff 4f       	sbci	r31, 0xFF	; 255
    1016:	91 83       	std	Z+1, r25	; 0x01
    1018:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    101a:	de 01       	movw	r26, r28
    101c:	ab 58       	subi	r26, 0x8B	; 139
    101e:	bf 4f       	sbci	r27, 0xFF	; 255
    1020:	fe 01       	movw	r30, r28
    1022:	eb 58       	subi	r30, 0x8B	; 139
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	80 81       	ld	r24, Z
    1028:	91 81       	ldd	r25, Z+1	; 0x01
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	11 96       	adiw	r26, 0x01	; 1
    102e:	9c 93       	st	X, r25
    1030:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1032:	fe 01       	movw	r30, r28
    1034:	eb 58       	subi	r30, 0x8B	; 139
    1036:	ff 4f       	sbci	r31, 0xFF	; 255
    1038:	80 81       	ld	r24, Z
    103a:	91 81       	ldd	r25, Z+1	; 0x01
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	d1 f6       	brne	.-76     	; 0xff4 <main+0x4ae>
    1040:	28 c0       	rjmp	.+80     	; 0x1092 <main+0x54c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1042:	8e 01       	movw	r16, r28
    1044:	0b 58       	subi	r16, 0x8B	; 139
    1046:	1f 4f       	sbci	r17, 0xFF	; 255
    1048:	fe 01       	movw	r30, r28
    104a:	e9 58       	subi	r30, 0x89	; 137
    104c:	ff 4f       	sbci	r31, 0xFF	; 255
    104e:	60 81       	ld	r22, Z
    1050:	71 81       	ldd	r23, Z+1	; 0x01
    1052:	82 81       	ldd	r24, Z+2	; 0x02
    1054:	93 81       	ldd	r25, Z+3	; 0x03
    1056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	f8 01       	movw	r30, r16
    1060:	91 83       	std	Z+1, r25	; 0x01
    1062:	80 83       	st	Z, r24
    1064:	de 01       	movw	r26, r28
    1066:	af 58       	subi	r26, 0x8F	; 143
    1068:	bf 4f       	sbci	r27, 0xFF	; 255
    106a:	fe 01       	movw	r30, r28
    106c:	eb 58       	subi	r30, 0x8B	; 139
    106e:	ff 4f       	sbci	r31, 0xFF	; 255
    1070:	80 81       	ld	r24, Z
    1072:	91 81       	ldd	r25, Z+1	; 0x01
    1074:	11 96       	adiw	r26, 0x01	; 1
    1076:	9c 93       	st	X, r25
    1078:	8e 93       	st	-X, r24
    107a:	fe 01       	movw	r30, r28
    107c:	ef 58       	subi	r30, 0x8F	; 143
    107e:	ff 4f       	sbci	r31, 0xFF	; 255
    1080:	80 81       	ld	r24, Z
    1082:	91 81       	ldd	r25, Z+1	; 0x01
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	f1 f7       	brne	.-4      	; 0x1084 <main+0x53e>
    1088:	fe 01       	movw	r30, r28
    108a:	ef 58       	subi	r30, 0x8F	; 143
    108c:	ff 4f       	sbci	r31, 0xFF	; 255
    108e:	91 83       	std	Z+1, r25	; 0x01
    1090:	80 83       	st	Z, r24
			_delay_ms(500);
			next_status=second_entry;
    1092:	fe 01       	movw	r30, r28
    1094:	ee 56       	subi	r30, 0x6E	; 110
    1096:	ff 4f       	sbci	r31, 0xFF	; 255
    1098:	87 e0       	ldi	r24, 0x07	; 7
    109a:	80 83       	st	Z, r24
    109c:	3e ce       	rjmp	.-900    	; 0xd1a <main+0x1d4>
		}
		/*-------------------------------------------------------------------------------*/
		else if(next_status==second_entry)
    109e:	fe 01       	movw	r30, r28
    10a0:	ee 56       	subi	r30, 0x6E	; 110
    10a2:	ff 4f       	sbci	r31, 0xFF	; 255
    10a4:	80 81       	ld	r24, Z
    10a6:	87 30       	cpi	r24, 0x07	; 7
    10a8:	09 f0       	breq	.+2      	; 0x10ac <main+0x566>
    10aa:	06 c2       	rjmp	.+1036   	; 0x14b8 <main+0x972>
		{
			current_status=second_entry;
    10ac:	fe 01       	movw	r30, r28
    10ae:	ed 56       	subi	r30, 0x6D	; 109
    10b0:	ff 4f       	sbci	r31, 0xFF	; 255
    10b2:	87 e0       	ldi	r24, 0x07	; 7
    10b4:	80 83       	st	Z, r24
			LCD_moveCursor(0,0);
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	60 e0       	ldi	r22, 0x00	; 0
    10ba:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
			LCD_displayString("Enter again    ");
    10be:	8f e6       	ldi	r24, 0x6F	; 111
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
			LCD_moveCursor(1,0);
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	60 e0       	ldi	r22, 0x00	; 0
    10ca:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
			LCD_displayString("	       ");
    10ce:	8f e7       	ldi	r24, 0x7F	; 127
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
			//while((check=UART_receiveByte())!=READY){};
			LCD_moveCursor(1,0);
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
			for(int i=0;i<4;i++)
    10de:	fe 01       	movw	r30, r28
    10e0:	e2 57       	subi	r30, 0x72	; 114
    10e2:	ff 4f       	sbci	r31, 0xFF	; 255
    10e4:	11 82       	std	Z+1, r1	; 0x01
    10e6:	10 82       	st	Z, r1
    10e8:	de c0       	rjmp	.+444    	; 0x12a6 <main+0x760>
			{

				password_check[i] = KEYPAD_getPressedKey();
    10ea:	fe 01       	movw	r30, r28
    10ec:	e2 57       	subi	r30, 0x72	; 114
    10ee:	ff 4f       	sbci	r31, 0xFF	; 255
    10f0:	00 81       	ld	r16, Z
    10f2:	11 81       	ldd	r17, Z+1	; 0x01
    10f4:	0e 94 b9 12 	call	0x2572	; 0x2572 <KEYPAD_getPressedKey>
    10f8:	28 2f       	mov	r18, r24
    10fa:	ce 01       	movw	r24, r28
    10fc:	8a 56       	subi	r24, 0x6A	; 106
    10fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1100:	fc 01       	movw	r30, r24
    1102:	e0 0f       	add	r30, r16
    1104:	f1 1f       	adc	r31, r17
    1106:	20 83       	st	Z, r18
    1108:	fe 01       	movw	r30, r28
    110a:	e3 59       	subi	r30, 0x93	; 147
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	aa ef       	ldi	r26, 0xFA	; 250
    1114:	b3 e4       	ldi	r27, 0x43	; 67
    1116:	80 83       	st	Z, r24
    1118:	91 83       	std	Z+1, r25	; 0x01
    111a:	a2 83       	std	Z+2, r26	; 0x02
    111c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    111e:	8e 01       	movw	r16, r28
    1120:	07 59       	subi	r16, 0x97	; 151
    1122:	1f 4f       	sbci	r17, 0xFF	; 255
    1124:	fe 01       	movw	r30, r28
    1126:	e3 59       	subi	r30, 0x93	; 147
    1128:	ff 4f       	sbci	r31, 0xFF	; 255
    112a:	60 81       	ld	r22, Z
    112c:	71 81       	ldd	r23, Z+1	; 0x01
    112e:	82 81       	ldd	r24, Z+2	; 0x02
    1130:	93 81       	ldd	r25, Z+3	; 0x03
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	4a ef       	ldi	r20, 0xFA	; 250
    1138:	54 e4       	ldi	r21, 0x44	; 68
    113a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	f8 01       	movw	r30, r16
    1144:	80 83       	st	Z, r24
    1146:	91 83       	std	Z+1, r25	; 0x01
    1148:	a2 83       	std	Z+2, r26	; 0x02
    114a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    114c:	fe 01       	movw	r30, r28
    114e:	e7 59       	subi	r30, 0x97	; 151
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	60 81       	ld	r22, Z
    1154:	71 81       	ldd	r23, Z+1	; 0x01
    1156:	82 81       	ldd	r24, Z+2	; 0x02
    1158:	93 81       	ldd	r25, Z+3	; 0x03
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	40 e8       	ldi	r20, 0x80	; 128
    1160:	5f e3       	ldi	r21, 0x3F	; 63
    1162:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1166:	88 23       	and	r24, r24
    1168:	44 f4       	brge	.+16     	; 0x117a <main+0x634>
		__ticks = 1;
    116a:	fe 01       	movw	r30, r28
    116c:	e9 59       	subi	r30, 0x99	; 153
    116e:	ff 4f       	sbci	r31, 0xFF	; 255
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	91 83       	std	Z+1, r25	; 0x01
    1176:	80 83       	st	Z, r24
    1178:	64 c0       	rjmp	.+200    	; 0x1242 <main+0x6fc>
	else if (__tmp > 65535)
    117a:	fe 01       	movw	r30, r28
    117c:	e7 59       	subi	r30, 0x97	; 151
    117e:	ff 4f       	sbci	r31, 0xFF	; 255
    1180:	60 81       	ld	r22, Z
    1182:	71 81       	ldd	r23, Z+1	; 0x01
    1184:	82 81       	ldd	r24, Z+2	; 0x02
    1186:	93 81       	ldd	r25, Z+3	; 0x03
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	3f ef       	ldi	r19, 0xFF	; 255
    118c:	4f e7       	ldi	r20, 0x7F	; 127
    118e:	57 e4       	ldi	r21, 0x47	; 71
    1190:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1194:	18 16       	cp	r1, r24
    1196:	0c f0       	brlt	.+2      	; 0x119a <main+0x654>
    1198:	43 c0       	rjmp	.+134    	; 0x1220 <main+0x6da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    119a:	fe 01       	movw	r30, r28
    119c:	e3 59       	subi	r30, 0x93	; 147
    119e:	ff 4f       	sbci	r31, 0xFF	; 255
    11a0:	60 81       	ld	r22, Z
    11a2:	71 81       	ldd	r23, Z+1	; 0x01
    11a4:	82 81       	ldd	r24, Z+2	; 0x02
    11a6:	93 81       	ldd	r25, Z+3	; 0x03
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e2       	ldi	r20, 0x20	; 32
    11ae:	51 e4       	ldi	r21, 0x41	; 65
    11b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	8e 01       	movw	r16, r28
    11ba:	09 59       	subi	r16, 0x99	; 153
    11bc:	1f 4f       	sbci	r17, 0xFF	; 255
    11be:	bc 01       	movw	r22, r24
    11c0:	cd 01       	movw	r24, r26
    11c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	f8 01       	movw	r30, r16
    11cc:	91 83       	std	Z+1, r25	; 0x01
    11ce:	80 83       	st	Z, r24
    11d0:	1f c0       	rjmp	.+62     	; 0x1210 <main+0x6ca>
    11d2:	fe 01       	movw	r30, r28
    11d4:	eb 59       	subi	r30, 0x9B	; 155
    11d6:	ff 4f       	sbci	r31, 0xFF	; 255
    11d8:	88 ec       	ldi	r24, 0xC8	; 200
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	91 83       	std	Z+1, r25	; 0x01
    11de:	80 83       	st	Z, r24
    11e0:	fe 01       	movw	r30, r28
    11e2:	eb 59       	subi	r30, 0x9B	; 155
    11e4:	ff 4f       	sbci	r31, 0xFF	; 255
    11e6:	80 81       	ld	r24, Z
    11e8:	91 81       	ldd	r25, Z+1	; 0x01
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	f1 f7       	brne	.-4      	; 0x11ea <main+0x6a4>
    11ee:	fe 01       	movw	r30, r28
    11f0:	eb 59       	subi	r30, 0x9B	; 155
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	91 83       	std	Z+1, r25	; 0x01
    11f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f8:	de 01       	movw	r26, r28
    11fa:	a9 59       	subi	r26, 0x99	; 153
    11fc:	bf 4f       	sbci	r27, 0xFF	; 255
    11fe:	fe 01       	movw	r30, r28
    1200:	e9 59       	subi	r30, 0x99	; 153
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	80 81       	ld	r24, Z
    1206:	91 81       	ldd	r25, Z+1	; 0x01
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	11 96       	adiw	r26, 0x01	; 1
    120c:	9c 93       	st	X, r25
    120e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1210:	fe 01       	movw	r30, r28
    1212:	e9 59       	subi	r30, 0x99	; 153
    1214:	ff 4f       	sbci	r31, 0xFF	; 255
    1216:	80 81       	ld	r24, Z
    1218:	91 81       	ldd	r25, Z+1	; 0x01
    121a:	00 97       	sbiw	r24, 0x00	; 0
    121c:	d1 f6       	brne	.-76     	; 0x11d2 <main+0x68c>
    121e:	27 c0       	rjmp	.+78     	; 0x126e <main+0x728>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1220:	8e 01       	movw	r16, r28
    1222:	09 59       	subi	r16, 0x99	; 153
    1224:	1f 4f       	sbci	r17, 0xFF	; 255
    1226:	fe 01       	movw	r30, r28
    1228:	e7 59       	subi	r30, 0x97	; 151
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	60 81       	ld	r22, Z
    122e:	71 81       	ldd	r23, Z+1	; 0x01
    1230:	82 81       	ldd	r24, Z+2	; 0x02
    1232:	93 81       	ldd	r25, Z+3	; 0x03
    1234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	f8 01       	movw	r30, r16
    123e:	91 83       	std	Z+1, r25	; 0x01
    1240:	80 83       	st	Z, r24
    1242:	de 01       	movw	r26, r28
    1244:	ad 59       	subi	r26, 0x9D	; 157
    1246:	bf 4f       	sbci	r27, 0xFF	; 255
    1248:	fe 01       	movw	r30, r28
    124a:	e9 59       	subi	r30, 0x99	; 153
    124c:	ff 4f       	sbci	r31, 0xFF	; 255
    124e:	80 81       	ld	r24, Z
    1250:	91 81       	ldd	r25, Z+1	; 0x01
    1252:	8d 93       	st	X+, r24
    1254:	9c 93       	st	X, r25
    1256:	fe 01       	movw	r30, r28
    1258:	ed 59       	subi	r30, 0x9D	; 157
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	80 81       	ld	r24, Z
    125e:	91 81       	ldd	r25, Z+1	; 0x01
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	f1 f7       	brne	.-4      	; 0x1260 <main+0x71a>
    1264:	fe 01       	movw	r30, r28
    1266:	ed 59       	subi	r30, 0x9D	; 157
    1268:	ff 4f       	sbci	r31, 0xFF	; 255
    126a:	91 83       	std	Z+1, r25	; 0x01
    126c:	80 83       	st	Z, r24
				_delay_ms(500);
				/* get the pressed key number */
				LCD_intgerToString(password_check[i]);
    126e:	fe 01       	movw	r30, r28
    1270:	e2 57       	subi	r30, 0x72	; 114
    1272:	ff 4f       	sbci	r31, 0xFF	; 255
    1274:	20 81       	ld	r18, Z
    1276:	31 81       	ldd	r19, Z+1	; 0x01
    1278:	ce 01       	movw	r24, r28
    127a:	8a 56       	subi	r24, 0x6A	; 106
    127c:	9f 4f       	sbci	r25, 0xFF	; 255
    127e:	fc 01       	movw	r30, r24
    1280:	e2 0f       	add	r30, r18
    1282:	f3 1f       	adc	r31, r19
    1284:	80 81       	ld	r24, Z
    1286:	88 2f       	mov	r24, r24
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	0e 94 40 18 	call	0x3080	; 0x3080 <LCD_intgerToString>
			LCD_displayString("Enter again    ");
			LCD_moveCursor(1,0);
			LCD_displayString("	       ");
			//while((check=UART_receiveByte())!=READY){};
			LCD_moveCursor(1,0);
			for(int i=0;i<4;i++)
    128e:	de 01       	movw	r26, r28
    1290:	a2 57       	subi	r26, 0x72	; 114
    1292:	bf 4f       	sbci	r27, 0xFF	; 255
    1294:	fe 01       	movw	r30, r28
    1296:	e2 57       	subi	r30, 0x72	; 114
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	80 81       	ld	r24, Z
    129c:	91 81       	ldd	r25, Z+1	; 0x01
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	11 96       	adiw	r26, 0x01	; 1
    12a2:	9c 93       	st	X, r25
    12a4:	8e 93       	st	-X, r24
    12a6:	fe 01       	movw	r30, r28
    12a8:	e2 57       	subi	r30, 0x72	; 114
    12aa:	ff 4f       	sbci	r31, 0xFF	; 255
    12ac:	80 81       	ld	r24, Z
    12ae:	91 81       	ldd	r25, Z+1	; 0x01
    12b0:	84 30       	cpi	r24, 0x04	; 4
    12b2:	91 05       	cpc	r25, r1
    12b4:	0c f4       	brge	.+2      	; 0x12b8 <main+0x772>
    12b6:	19 cf       	rjmp	.-462    	; 0x10ea <main+0x5a4>
				password_check[i] = KEYPAD_getPressedKey();
				_delay_ms(500);
				/* get the pressed key number */
				LCD_intgerToString(password_check[i]);
			}
			password_check[i]=KEYPAD_getPressedKey();
    12b8:	fe 01       	movw	r30, r28
    12ba:	ec 56       	subi	r30, 0x6C	; 108
    12bc:	ff 4f       	sbci	r31, 0xFF	; 255
    12be:	80 81       	ld	r24, Z
    12c0:	08 2f       	mov	r16, r24
    12c2:	10 e0       	ldi	r17, 0x00	; 0
    12c4:	0e 94 b9 12 	call	0x2572	; 0x2572 <KEYPAD_getPressedKey>
    12c8:	28 2f       	mov	r18, r24
    12ca:	ce 01       	movw	r24, r28
    12cc:	8a 56       	subi	r24, 0x6A	; 106
    12ce:	9f 4f       	sbci	r25, 0xFF	; 255
    12d0:	fc 01       	movw	r30, r24
    12d2:	e0 0f       	add	r30, r16
    12d4:	f1 1f       	adc	r31, r17
    12d6:	20 83       	st	Z, r18
    12d8:	fe 01       	movw	r30, r28
    12da:	e1 5a       	subi	r30, 0xA1	; 161
    12dc:	ff 4f       	sbci	r31, 0xFF	; 255
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	aa ef       	ldi	r26, 0xFA	; 250
    12e4:	b3 e4       	ldi	r27, 0x43	; 67
    12e6:	80 83       	st	Z, r24
    12e8:	91 83       	std	Z+1, r25	; 0x01
    12ea:	a2 83       	std	Z+2, r26	; 0x02
    12ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ee:	8e 01       	movw	r16, r28
    12f0:	05 5a       	subi	r16, 0xA5	; 165
    12f2:	1f 4f       	sbci	r17, 0xFF	; 255
    12f4:	fe 01       	movw	r30, r28
    12f6:	e1 5a       	subi	r30, 0xA1	; 161
    12f8:	ff 4f       	sbci	r31, 0xFF	; 255
    12fa:	60 81       	ld	r22, Z
    12fc:	71 81       	ldd	r23, Z+1	; 0x01
    12fe:	82 81       	ldd	r24, Z+2	; 0x02
    1300:	93 81       	ldd	r25, Z+3	; 0x03
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	4a ef       	ldi	r20, 0xFA	; 250
    1308:	54 e4       	ldi	r21, 0x44	; 68
    130a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	f8 01       	movw	r30, r16
    1314:	80 83       	st	Z, r24
    1316:	91 83       	std	Z+1, r25	; 0x01
    1318:	a2 83       	std	Z+2, r26	; 0x02
    131a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    131c:	fe 01       	movw	r30, r28
    131e:	e5 5a       	subi	r30, 0xA5	; 165
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	60 81       	ld	r22, Z
    1324:	71 81       	ldd	r23, Z+1	; 0x01
    1326:	82 81       	ldd	r24, Z+2	; 0x02
    1328:	93 81       	ldd	r25, Z+3	; 0x03
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	40 e8       	ldi	r20, 0x80	; 128
    1330:	5f e3       	ldi	r21, 0x3F	; 63
    1332:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1336:	88 23       	and	r24, r24
    1338:	44 f4       	brge	.+16     	; 0x134a <main+0x804>
		__ticks = 1;
    133a:	fe 01       	movw	r30, r28
    133c:	e7 5a       	subi	r30, 0xA7	; 167
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	91 83       	std	Z+1, r25	; 0x01
    1346:	80 83       	st	Z, r24
    1348:	64 c0       	rjmp	.+200    	; 0x1412 <main+0x8cc>
	else if (__tmp > 65535)
    134a:	fe 01       	movw	r30, r28
    134c:	e5 5a       	subi	r30, 0xA5	; 165
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	60 81       	ld	r22, Z
    1352:	71 81       	ldd	r23, Z+1	; 0x01
    1354:	82 81       	ldd	r24, Z+2	; 0x02
    1356:	93 81       	ldd	r25, Z+3	; 0x03
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	3f ef       	ldi	r19, 0xFF	; 255
    135c:	4f e7       	ldi	r20, 0x7F	; 127
    135e:	57 e4       	ldi	r21, 0x47	; 71
    1360:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1364:	18 16       	cp	r1, r24
    1366:	0c f0       	brlt	.+2      	; 0x136a <main+0x824>
    1368:	43 c0       	rjmp	.+134    	; 0x13f0 <main+0x8aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    136a:	fe 01       	movw	r30, r28
    136c:	e1 5a       	subi	r30, 0xA1	; 161
    136e:	ff 4f       	sbci	r31, 0xFF	; 255
    1370:	60 81       	ld	r22, Z
    1372:	71 81       	ldd	r23, Z+1	; 0x01
    1374:	82 81       	ldd	r24, Z+2	; 0x02
    1376:	93 81       	ldd	r25, Z+3	; 0x03
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	40 e2       	ldi	r20, 0x20	; 32
    137e:	51 e4       	ldi	r21, 0x41	; 65
    1380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	8e 01       	movw	r16, r28
    138a:	07 5a       	subi	r16, 0xA7	; 167
    138c:	1f 4f       	sbci	r17, 0xFF	; 255
    138e:	bc 01       	movw	r22, r24
    1390:	cd 01       	movw	r24, r26
    1392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	f8 01       	movw	r30, r16
    139c:	91 83       	std	Z+1, r25	; 0x01
    139e:	80 83       	st	Z, r24
    13a0:	1f c0       	rjmp	.+62     	; 0x13e0 <main+0x89a>
    13a2:	fe 01       	movw	r30, r28
    13a4:	e9 5a       	subi	r30, 0xA9	; 169
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	88 ec       	ldi	r24, 0xC8	; 200
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	91 83       	std	Z+1, r25	; 0x01
    13ae:	80 83       	st	Z, r24
    13b0:	fe 01       	movw	r30, r28
    13b2:	e9 5a       	subi	r30, 0xA9	; 169
    13b4:	ff 4f       	sbci	r31, 0xFF	; 255
    13b6:	80 81       	ld	r24, Z
    13b8:	91 81       	ldd	r25, Z+1	; 0x01
    13ba:	01 97       	sbiw	r24, 0x01	; 1
    13bc:	f1 f7       	brne	.-4      	; 0x13ba <main+0x874>
    13be:	fe 01       	movw	r30, r28
    13c0:	e9 5a       	subi	r30, 0xA9	; 169
    13c2:	ff 4f       	sbci	r31, 0xFF	; 255
    13c4:	91 83       	std	Z+1, r25	; 0x01
    13c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c8:	de 01       	movw	r26, r28
    13ca:	a7 5a       	subi	r26, 0xA7	; 167
    13cc:	bf 4f       	sbci	r27, 0xFF	; 255
    13ce:	fe 01       	movw	r30, r28
    13d0:	e7 5a       	subi	r30, 0xA7	; 167
    13d2:	ff 4f       	sbci	r31, 0xFF	; 255
    13d4:	80 81       	ld	r24, Z
    13d6:	91 81       	ldd	r25, Z+1	; 0x01
    13d8:	01 97       	sbiw	r24, 0x01	; 1
    13da:	11 96       	adiw	r26, 0x01	; 1
    13dc:	9c 93       	st	X, r25
    13de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e0:	fe 01       	movw	r30, r28
    13e2:	e7 5a       	subi	r30, 0xA7	; 167
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	80 81       	ld	r24, Z
    13e8:	91 81       	ldd	r25, Z+1	; 0x01
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	d1 f6       	brne	.-76     	; 0x13a2 <main+0x85c>
    13ee:	28 c0       	rjmp	.+80     	; 0x1440 <main+0x8fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f0:	8e 01       	movw	r16, r28
    13f2:	07 5a       	subi	r16, 0xA7	; 167
    13f4:	1f 4f       	sbci	r17, 0xFF	; 255
    13f6:	fe 01       	movw	r30, r28
    13f8:	e5 5a       	subi	r30, 0xA5	; 165
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	60 81       	ld	r22, Z
    13fe:	71 81       	ldd	r23, Z+1	; 0x01
    1400:	82 81       	ldd	r24, Z+2	; 0x02
    1402:	93 81       	ldd	r25, Z+3	; 0x03
    1404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	f8 01       	movw	r30, r16
    140e:	91 83       	std	Z+1, r25	; 0x01
    1410:	80 83       	st	Z, r24
    1412:	de 01       	movw	r26, r28
    1414:	ab 5a       	subi	r26, 0xAB	; 171
    1416:	bf 4f       	sbci	r27, 0xFF	; 255
    1418:	fe 01       	movw	r30, r28
    141a:	e7 5a       	subi	r30, 0xA7	; 167
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	80 81       	ld	r24, Z
    1420:	91 81       	ldd	r25, Z+1	; 0x01
    1422:	11 96       	adiw	r26, 0x01	; 1
    1424:	9c 93       	st	X, r25
    1426:	8e 93       	st	-X, r24
    1428:	fe 01       	movw	r30, r28
    142a:	eb 5a       	subi	r30, 0xAB	; 171
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	80 81       	ld	r24, Z
    1430:	91 81       	ldd	r25, Z+1	; 0x01
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	f1 f7       	brne	.-4      	; 0x1432 <main+0x8ec>
    1436:	fe 01       	movw	r30, r28
    1438:	eb 5a       	subi	r30, 0xAB	; 171
    143a:	ff 4f       	sbci	r31, 0xFF	; 255
    143c:	91 83       	std	Z+1, r25	; 0x01
    143e:	80 83       	st	Z, r24
			_delay_ms(500);

			for(i=0;i<5;i++)
    1440:	fe 01       	movw	r30, r28
    1442:	ec 56       	subi	r30, 0x6C	; 108
    1444:	ff 4f       	sbci	r31, 0xFF	; 255
    1446:	10 82       	st	Z, r1
    1448:	30 c0       	rjmp	.+96     	; 0x14aa <main+0x964>
			{
				if(password[i]!=password_check[i])
    144a:	fe 01       	movw	r30, r28
    144c:	ec 56       	subi	r30, 0x6C	; 108
    144e:	ff 4f       	sbci	r31, 0xFF	; 255
    1450:	80 81       	ld	r24, Z
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	ce 01       	movw	r24, r28
    1458:	84 56       	subi	r24, 0x64	; 100
    145a:	9f 4f       	sbci	r25, 0xFF	; 255
    145c:	fc 01       	movw	r30, r24
    145e:	e2 0f       	add	r30, r18
    1460:	f3 1f       	adc	r31, r19
    1462:	40 81       	ld	r20, Z
    1464:	fe 01       	movw	r30, r28
    1466:	ec 56       	subi	r30, 0x6C	; 108
    1468:	ff 4f       	sbci	r31, 0xFF	; 255
    146a:	80 81       	ld	r24, Z
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	ce 01       	movw	r24, r28
    1472:	8a 56       	subi	r24, 0x6A	; 106
    1474:	9f 4f       	sbci	r25, 0xFF	; 255
    1476:	fc 01       	movw	r30, r24
    1478:	e2 0f       	add	r30, r18
    147a:	f3 1f       	adc	r31, r19
    147c:	80 81       	ld	r24, Z
    147e:	48 17       	cp	r20, r24
    1480:	31 f0       	breq	.+12     	; 0x148e <main+0x948>
				{
					next_status=re_entry_wrong;
    1482:	fe 01       	movw	r30, r28
    1484:	ee 56       	subi	r30, 0x6E	; 110
    1486:	ff 4f       	sbci	r31, 0xFF	; 255
    1488:	82 e0       	ldi	r24, 0x02	; 2
    148a:	80 83       	st	Z, r24
    148c:	46 cc       	rjmp	.-1908   	; 0xd1a <main+0x1d4>
					break;
				}
				else
				{
					next_status=re_entry_right;
    148e:	fe 01       	movw	r30, r28
    1490:	ee 56       	subi	r30, 0x6E	; 110
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	80 83       	st	Z, r24
				LCD_intgerToString(password_check[i]);
			}
			password_check[i]=KEYPAD_getPressedKey();
			_delay_ms(500);

			for(i=0;i<5;i++)
    1498:	de 01       	movw	r26, r28
    149a:	ac 56       	subi	r26, 0x6C	; 108
    149c:	bf 4f       	sbci	r27, 0xFF	; 255
    149e:	fe 01       	movw	r30, r28
    14a0:	ec 56       	subi	r30, 0x6C	; 108
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	80 81       	ld	r24, Z
    14a6:	8f 5f       	subi	r24, 0xFF	; 255
    14a8:	8c 93       	st	X, r24
    14aa:	fe 01       	movw	r30, r28
    14ac:	ec 56       	subi	r30, 0x6C	; 108
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	80 81       	ld	r24, Z
    14b2:	85 30       	cpi	r24, 0x05	; 5
    14b4:	50 f2       	brcs	.-108    	; 0x144a <main+0x904>
    14b6:	31 cc       	rjmp	.-1950   	; 0xd1a <main+0x1d4>
				}
			}
		}
		/*------------------------------------------------------------------------------*/

		else if(next_status==re_entry_wrong)
    14b8:	fe 01       	movw	r30, r28
    14ba:	ee 56       	subi	r30, 0x6E	; 110
    14bc:	ff 4f       	sbci	r31, 0xFF	; 255
    14be:	80 81       	ld	r24, Z
    14c0:	82 30       	cpi	r24, 0x02	; 2
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <main+0x980>
    14c4:	d0 c0       	rjmp	.+416    	; 0x1666 <main+0xb20>
		{
			LCD_moveCursor(0,0);
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	60 e0       	ldi	r22, 0x00	; 0
    14ca:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
			LCD_displayString("wrong password  ");
    14ce:	88 e8       	ldi	r24, 0x88	; 136
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
			LCD_moveCursor(1,0);
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	60 e0       	ldi	r22, 0x00	; 0
    14da:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
			LCD_displayString("          ");
    14de:	89 e9       	ldi	r24, 0x99	; 153
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
    14e6:	fe 01       	movw	r30, r28
    14e8:	ef 5a       	subi	r30, 0xAF	; 175
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	90 e8       	ldi	r25, 0x80	; 128
    14f0:	ab eb       	ldi	r26, 0xBB	; 187
    14f2:	b4 e4       	ldi	r27, 0x44	; 68
    14f4:	80 83       	st	Z, r24
    14f6:	91 83       	std	Z+1, r25	; 0x01
    14f8:	a2 83       	std	Z+2, r26	; 0x02
    14fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14fc:	8e 01       	movw	r16, r28
    14fe:	03 5b       	subi	r16, 0xB3	; 179
    1500:	1f 4f       	sbci	r17, 0xFF	; 255
    1502:	fe 01       	movw	r30, r28
    1504:	ef 5a       	subi	r30, 0xAF	; 175
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	60 81       	ld	r22, Z
    150a:	71 81       	ldd	r23, Z+1	; 0x01
    150c:	82 81       	ldd	r24, Z+2	; 0x02
    150e:	93 81       	ldd	r25, Z+3	; 0x03
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	4a ef       	ldi	r20, 0xFA	; 250
    1516:	54 e4       	ldi	r21, 0x44	; 68
    1518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	f8 01       	movw	r30, r16
    1522:	80 83       	st	Z, r24
    1524:	91 83       	std	Z+1, r25	; 0x01
    1526:	a2 83       	std	Z+2, r26	; 0x02
    1528:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    152a:	fe 01       	movw	r30, r28
    152c:	e3 5b       	subi	r30, 0xB3	; 179
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	60 81       	ld	r22, Z
    1532:	71 81       	ldd	r23, Z+1	; 0x01
    1534:	82 81       	ldd	r24, Z+2	; 0x02
    1536:	93 81       	ldd	r25, Z+3	; 0x03
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	40 e8       	ldi	r20, 0x80	; 128
    153e:	5f e3       	ldi	r21, 0x3F	; 63
    1540:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1544:	88 23       	and	r24, r24
    1546:	44 f4       	brge	.+16     	; 0x1558 <main+0xa12>
		__ticks = 1;
    1548:	fe 01       	movw	r30, r28
    154a:	e5 5b       	subi	r30, 0xB5	; 181
    154c:	ff 4f       	sbci	r31, 0xFF	; 255
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	91 83       	std	Z+1, r25	; 0x01
    1554:	80 83       	st	Z, r24
    1556:	64 c0       	rjmp	.+200    	; 0x1620 <main+0xada>
	else if (__tmp > 65535)
    1558:	fe 01       	movw	r30, r28
    155a:	e3 5b       	subi	r30, 0xB3	; 179
    155c:	ff 4f       	sbci	r31, 0xFF	; 255
    155e:	60 81       	ld	r22, Z
    1560:	71 81       	ldd	r23, Z+1	; 0x01
    1562:	82 81       	ldd	r24, Z+2	; 0x02
    1564:	93 81       	ldd	r25, Z+3	; 0x03
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	3f ef       	ldi	r19, 0xFF	; 255
    156a:	4f e7       	ldi	r20, 0x7F	; 127
    156c:	57 e4       	ldi	r21, 0x47	; 71
    156e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1572:	18 16       	cp	r1, r24
    1574:	0c f0       	brlt	.+2      	; 0x1578 <main+0xa32>
    1576:	43 c0       	rjmp	.+134    	; 0x15fe <main+0xab8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1578:	fe 01       	movw	r30, r28
    157a:	ef 5a       	subi	r30, 0xAF	; 175
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	60 81       	ld	r22, Z
    1580:	71 81       	ldd	r23, Z+1	; 0x01
    1582:	82 81       	ldd	r24, Z+2	; 0x02
    1584:	93 81       	ldd	r25, Z+3	; 0x03
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	40 e2       	ldi	r20, 0x20	; 32
    158c:	51 e4       	ldi	r21, 0x41	; 65
    158e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	8e 01       	movw	r16, r28
    1598:	05 5b       	subi	r16, 0xB5	; 181
    159a:	1f 4f       	sbci	r17, 0xFF	; 255
    159c:	bc 01       	movw	r22, r24
    159e:	cd 01       	movw	r24, r26
    15a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	f8 01       	movw	r30, r16
    15aa:	91 83       	std	Z+1, r25	; 0x01
    15ac:	80 83       	st	Z, r24
    15ae:	1f c0       	rjmp	.+62     	; 0x15ee <main+0xaa8>
    15b0:	fe 01       	movw	r30, r28
    15b2:	e7 5b       	subi	r30, 0xB7	; 183
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	88 ec       	ldi	r24, 0xC8	; 200
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	91 83       	std	Z+1, r25	; 0x01
    15bc:	80 83       	st	Z, r24
    15be:	fe 01       	movw	r30, r28
    15c0:	e7 5b       	subi	r30, 0xB7	; 183
    15c2:	ff 4f       	sbci	r31, 0xFF	; 255
    15c4:	80 81       	ld	r24, Z
    15c6:	91 81       	ldd	r25, Z+1	; 0x01
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	f1 f7       	brne	.-4      	; 0x15c8 <main+0xa82>
    15cc:	fe 01       	movw	r30, r28
    15ce:	e7 5b       	subi	r30, 0xB7	; 183
    15d0:	ff 4f       	sbci	r31, 0xFF	; 255
    15d2:	91 83       	std	Z+1, r25	; 0x01
    15d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d6:	de 01       	movw	r26, r28
    15d8:	a5 5b       	subi	r26, 0xB5	; 181
    15da:	bf 4f       	sbci	r27, 0xFF	; 255
    15dc:	fe 01       	movw	r30, r28
    15de:	e5 5b       	subi	r30, 0xB5	; 181
    15e0:	ff 4f       	sbci	r31, 0xFF	; 255
    15e2:	80 81       	ld	r24, Z
    15e4:	91 81       	ldd	r25, Z+1	; 0x01
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	11 96       	adiw	r26, 0x01	; 1
    15ea:	9c 93       	st	X, r25
    15ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ee:	fe 01       	movw	r30, r28
    15f0:	e5 5b       	subi	r30, 0xB5	; 181
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	80 81       	ld	r24, Z
    15f6:	91 81       	ldd	r25, Z+1	; 0x01
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	d1 f6       	brne	.-76     	; 0x15b0 <main+0xa6a>
    15fc:	27 c0       	rjmp	.+78     	; 0x164c <main+0xb06>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15fe:	8e 01       	movw	r16, r28
    1600:	05 5b       	subi	r16, 0xB5	; 181
    1602:	1f 4f       	sbci	r17, 0xFF	; 255
    1604:	fe 01       	movw	r30, r28
    1606:	e3 5b       	subi	r30, 0xB3	; 179
    1608:	ff 4f       	sbci	r31, 0xFF	; 255
    160a:	60 81       	ld	r22, Z
    160c:	71 81       	ldd	r23, Z+1	; 0x01
    160e:	82 81       	ldd	r24, Z+2	; 0x02
    1610:	93 81       	ldd	r25, Z+3	; 0x03
    1612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	f8 01       	movw	r30, r16
    161c:	91 83       	std	Z+1, r25	; 0x01
    161e:	80 83       	st	Z, r24
    1620:	de 01       	movw	r26, r28
    1622:	a9 5b       	subi	r26, 0xB9	; 185
    1624:	bf 4f       	sbci	r27, 0xFF	; 255
    1626:	fe 01       	movw	r30, r28
    1628:	e5 5b       	subi	r30, 0xB5	; 181
    162a:	ff 4f       	sbci	r31, 0xFF	; 255
    162c:	80 81       	ld	r24, Z
    162e:	91 81       	ldd	r25, Z+1	; 0x01
    1630:	8d 93       	st	X+, r24
    1632:	9c 93       	st	X, r25
    1634:	fe 01       	movw	r30, r28
    1636:	e9 5b       	subi	r30, 0xB9	; 185
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	80 81       	ld	r24, Z
    163c:	91 81       	ldd	r25, Z+1	; 0x01
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	f1 f7       	brne	.-4      	; 0x163e <main+0xaf8>
    1642:	fe 01       	movw	r30, r28
    1644:	e9 5b       	subi	r30, 0xB9	; 185
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	91 83       	std	Z+1, r25	; 0x01
    164a:	80 83       	st	Z, r24
			_delay_ms(1500);
			LCD_moveCursor(0,0);
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	60 e0       	ldi	r22, 0x00	; 0
    1650:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
			LCD_displayString("enter password  ");
    1654:	84 ea       	ldi	r24, 0xA4	; 164
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
			next_status=new_password;
    165c:	fe 01       	movw	r30, r28
    165e:	ee 56       	subi	r30, 0x6E	; 110
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	10 82       	st	Z, r1
    1664:	5a cb       	rjmp	.-2380   	; 0xd1a <main+0x1d4>
		}
		/*----------------------------------------------------------------*/
		else if(next_status==re_entry_right)
    1666:	fe 01       	movw	r30, r28
    1668:	ee 56       	subi	r30, 0x6E	; 110
    166a:	ff 4f       	sbci	r31, 0xFF	; 255
    166c:	80 81       	ld	r24, Z
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	c9 f5       	brne	.+114    	; 0x16e4 <main+0xb9e>
		{
			UART_sendByte(are_you_ready_for_password);
    1672:	8e e1       	ldi	r24, 0x1E	; 30
    1674:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <UART_sendByte>
			while(UART_receiveByte()!=ready_for_password){}
    1678:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <UART_receiveByte>
    167c:	8f 31       	cpi	r24, 0x1F	; 31
    167e:	e1 f7       	brne	.-8      	; 0x1678 <main+0xb32>
			for(uint8 x=0;password[x]!='\0';x++)
    1680:	fe 01       	movw	r30, r28
    1682:	e3 57       	subi	r30, 0x73	; 115
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	10 82       	st	Z, r1
    1688:	18 c0       	rjmp	.+48     	; 0x16ba <main+0xb74>
			{
				UART_sendByte(password[x]);
    168a:	fe 01       	movw	r30, r28
    168c:	e3 57       	subi	r30, 0x73	; 115
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	80 81       	ld	r24, Z
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	ce 01       	movw	r24, r28
    1698:	84 56       	subi	r24, 0x64	; 100
    169a:	9f 4f       	sbci	r25, 0xFF	; 255
    169c:	fc 01       	movw	r30, r24
    169e:	e2 0f       	add	r30, r18
    16a0:	f3 1f       	adc	r31, r19
    16a2:	80 81       	ld	r24, Z
    16a4:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <UART_sendByte>
		/*----------------------------------------------------------------*/
		else if(next_status==re_entry_right)
		{
			UART_sendByte(are_you_ready_for_password);
			while(UART_receiveByte()!=ready_for_password){}
			for(uint8 x=0;password[x]!='\0';x++)
    16a8:	de 01       	movw	r26, r28
    16aa:	a3 57       	subi	r26, 0x73	; 115
    16ac:	bf 4f       	sbci	r27, 0xFF	; 255
    16ae:	fe 01       	movw	r30, r28
    16b0:	e3 57       	subi	r30, 0x73	; 115
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	80 81       	ld	r24, Z
    16b6:	8f 5f       	subi	r24, 0xFF	; 255
    16b8:	8c 93       	st	X, r24
    16ba:	fe 01       	movw	r30, r28
    16bc:	e3 57       	subi	r30, 0x73	; 115
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	80 81       	ld	r24, Z
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	ce 01       	movw	r24, r28
    16c8:	84 56       	subi	r24, 0x64	; 100
    16ca:	9f 4f       	sbci	r25, 0xFF	; 255
    16cc:	fc 01       	movw	r30, r24
    16ce:	e2 0f       	add	r30, r18
    16d0:	f3 1f       	adc	r31, r19
    16d2:	80 81       	ld	r24, Z
    16d4:	88 23       	and	r24, r24
    16d6:	c9 f6       	brne	.-78     	; 0x168a <main+0xb44>
			{
				UART_sendByte(password[x]);
			}
			// status=main options
			next_status=main_options;
    16d8:	fe 01       	movw	r30, r28
    16da:	ee 56       	subi	r30, 0x6E	; 110
    16dc:	ff 4f       	sbci	r31, 0xFF	; 255
    16de:	83 e0       	ldi	r24, 0x03	; 3
    16e0:	80 83       	st	Z, r24
    16e2:	1b cb       	rjmp	.-2506   	; 0xd1a <main+0x1d4>
		}
		/*-------------------------------------------------------------------------*/
		else if (next_status==main_options)
    16e4:	fe 01       	movw	r30, r28
    16e6:	ee 56       	subi	r30, 0x6E	; 110
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	80 81       	ld	r24, Z
    16ec:	83 30       	cpi	r24, 0x03	; 3
    16ee:	09 f0       	breq	.+2      	; 0x16f2 <main+0xbac>
    16f0:	b4 c0       	rjmp	.+360    	; 0x185a <main+0xd14>
		{
			LCD_moveCursor(0,0);
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
			LCD_displayString("+ open door   ");
    16fa:	85 eb       	ldi	r24, 0xB5	; 181
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
			LCD_moveCursor(1,0);
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
			LCD_displayString("-change password");
    170a:	84 ec       	ldi	r24, 0xC4	; 196
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
			option=KEYPAD_getPressedKey();
    1712:	0e 94 b9 12 	call	0x2572	; 0x2572 <KEYPAD_getPressedKey>
    1716:	fe 01       	movw	r30, r28
    1718:	ef 56       	subi	r30, 0x6F	; 111
    171a:	ff 4f       	sbci	r31, 0xFF	; 255
    171c:	80 83       	st	Z, r24
    171e:	fe 01       	movw	r30, r28
    1720:	ed 5b       	subi	r30, 0xBD	; 189
    1722:	ff 4f       	sbci	r31, 0xFF	; 255
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	aa ef       	ldi	r26, 0xFA	; 250
    172a:	b3 e4       	ldi	r27, 0x43	; 67
    172c:	80 83       	st	Z, r24
    172e:	91 83       	std	Z+1, r25	; 0x01
    1730:	a2 83       	std	Z+2, r26	; 0x02
    1732:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1734:	8e 01       	movw	r16, r28
    1736:	01 5c       	subi	r16, 0xC1	; 193
    1738:	1f 4f       	sbci	r17, 0xFF	; 255
    173a:	fe 01       	movw	r30, r28
    173c:	ed 5b       	subi	r30, 0xBD	; 189
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	60 81       	ld	r22, Z
    1742:	71 81       	ldd	r23, Z+1	; 0x01
    1744:	82 81       	ldd	r24, Z+2	; 0x02
    1746:	93 81       	ldd	r25, Z+3	; 0x03
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	4a ef       	ldi	r20, 0xFA	; 250
    174e:	54 e4       	ldi	r21, 0x44	; 68
    1750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	f8 01       	movw	r30, r16
    175a:	80 83       	st	Z, r24
    175c:	91 83       	std	Z+1, r25	; 0x01
    175e:	a2 83       	std	Z+2, r26	; 0x02
    1760:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1762:	fe 01       	movw	r30, r28
    1764:	ff 96       	adiw	r30, 0x3f	; 63
    1766:	60 81       	ld	r22, Z
    1768:	71 81       	ldd	r23, Z+1	; 0x01
    176a:	82 81       	ldd	r24, Z+2	; 0x02
    176c:	93 81       	ldd	r25, Z+3	; 0x03
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e8       	ldi	r20, 0x80	; 128
    1774:	5f e3       	ldi	r21, 0x3F	; 63
    1776:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    177a:	88 23       	and	r24, r24
    177c:	2c f4       	brge	.+10     	; 0x1788 <main+0xc42>
		__ticks = 1;
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	9e af       	std	Y+62, r25	; 0x3e
    1784:	8d af       	std	Y+61, r24	; 0x3d
    1786:	46 c0       	rjmp	.+140    	; 0x1814 <main+0xcce>
	else if (__tmp > 65535)
    1788:	fe 01       	movw	r30, r28
    178a:	ff 96       	adiw	r30, 0x3f	; 63
    178c:	60 81       	ld	r22, Z
    178e:	71 81       	ldd	r23, Z+1	; 0x01
    1790:	82 81       	ldd	r24, Z+2	; 0x02
    1792:	93 81       	ldd	r25, Z+3	; 0x03
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	3f ef       	ldi	r19, 0xFF	; 255
    1798:	4f e7       	ldi	r20, 0x7F	; 127
    179a:	57 e4       	ldi	r21, 0x47	; 71
    179c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17a0:	18 16       	cp	r1, r24
    17a2:	64 f5       	brge	.+88     	; 0x17fc <main+0xcb6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a4:	fe 01       	movw	r30, r28
    17a6:	ed 5b       	subi	r30, 0xBD	; 189
    17a8:	ff 4f       	sbci	r31, 0xFF	; 255
    17aa:	60 81       	ld	r22, Z
    17ac:	71 81       	ldd	r23, Z+1	; 0x01
    17ae:	82 81       	ldd	r24, Z+2	; 0x02
    17b0:	93 81       	ldd	r25, Z+3	; 0x03
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	40 e2       	ldi	r20, 0x20	; 32
    17b8:	51 e4       	ldi	r21, 0x41	; 65
    17ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	bc 01       	movw	r22, r24
    17c4:	cd 01       	movw	r24, r26
    17c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	9e af       	std	Y+62, r25	; 0x3e
    17d0:	8d af       	std	Y+61, r24	; 0x3d
    17d2:	0f c0       	rjmp	.+30     	; 0x17f2 <main+0xcac>
    17d4:	88 ec       	ldi	r24, 0xC8	; 200
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	9c af       	std	Y+60, r25	; 0x3c
    17da:	8b af       	std	Y+59, r24	; 0x3b
    17dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    17de:	9c ad       	ldd	r25, Y+60	; 0x3c
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	f1 f7       	brne	.-4      	; 0x17e0 <main+0xc9a>
    17e4:	9c af       	std	Y+60, r25	; 0x3c
    17e6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    17ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    17ec:	01 97       	sbiw	r24, 0x01	; 1
    17ee:	9e af       	std	Y+62, r25	; 0x3e
    17f0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    17f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	69 f7       	brne	.-38     	; 0x17d4 <main+0xc8e>
    17fa:	16 c0       	rjmp	.+44     	; 0x1828 <main+0xce2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17fc:	fe 01       	movw	r30, r28
    17fe:	ff 96       	adiw	r30, 0x3f	; 63
    1800:	60 81       	ld	r22, Z
    1802:	71 81       	ldd	r23, Z+1	; 0x01
    1804:	82 81       	ldd	r24, Z+2	; 0x02
    1806:	93 81       	ldd	r25, Z+3	; 0x03
    1808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	9e af       	std	Y+62, r25	; 0x3e
    1812:	8d af       	std	Y+61, r24	; 0x3d
    1814:	8d ad       	ldd	r24, Y+61	; 0x3d
    1816:	9e ad       	ldd	r25, Y+62	; 0x3e
    1818:	9a af       	std	Y+58, r25	; 0x3a
    181a:	89 af       	std	Y+57, r24	; 0x39
    181c:	89 ad       	ldd	r24, Y+57	; 0x39
    181e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	f1 f7       	brne	.-4      	; 0x1820 <main+0xcda>
    1824:	9a af       	std	Y+58, r25	; 0x3a
    1826:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(500);
			if(option==open_door)
    1828:	fe 01       	movw	r30, r28
    182a:	ef 56       	subi	r30, 0x6F	; 111
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	80 81       	ld	r24, Z
    1830:	8b 32       	cpi	r24, 0x2B	; 43
    1832:	31 f4       	brne	.+12     	; 0x1840 <main+0xcfa>
			{

				//change status to enter password
				next_status=enter_password;
    1834:	fe 01       	movw	r30, r28
    1836:	ee 56       	subi	r30, 0x6E	; 110
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	85 e0       	ldi	r24, 0x05	; 5
    183c:	80 83       	st	Z, r24
    183e:	6d ca       	rjmp	.-2854   	; 0xd1a <main+0x1d4>
			}
			else if(option==change_pass)
    1840:	fe 01       	movw	r30, r28
    1842:	ef 56       	subi	r30, 0x6F	; 111
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	80 81       	ld	r24, Z
    1848:	8d 32       	cpi	r24, 0x2D	; 45
    184a:	09 f0       	breq	.+2      	; 0x184e <main+0xd08>
    184c:	66 ca       	rjmp	.-2868   	; 0xd1a <main+0x1d4>
			{
				//change status to new_password
				next_status=enter_password_for_change;
    184e:	fe 01       	movw	r30, r28
    1850:	ee 56       	subi	r30, 0x6E	; 110
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	89 e1       	ldi	r24, 0x19	; 25
    1856:	80 83       	st	Z, r24
    1858:	60 ca       	rjmp	.-2880   	; 0xd1a <main+0x1d4>
			}
		}
		/*-------------------------------------------------------------------------*/
		else if (next_status==enter_password)
    185a:	fe 01       	movw	r30, r28
    185c:	ee 56       	subi	r30, 0x6E	; 110
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	80 81       	ld	r24, Z
    1862:	85 30       	cpi	r24, 0x05	; 5
    1864:	09 f0       	breq	.+2      	; 0x1868 <main+0xd22>
    1866:	ae c1       	rjmp	.+860    	; 0x1bc4 <main+0x107e>
		{	LCD_moveCursor(0,0);
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	60 e0       	ldi	r22, 0x00	; 0
    186c:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
		LCD_displayString("enter password");
    1870:	80 e6       	ldi	r24, 0x60	; 96
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
		LCD_moveCursor(1,0);
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
		LCD_displayString("                ");
    1880:	85 ed       	ldi	r24, 0xD5	; 213
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
		/*take password and send it
		 *
		 *but wait here till the control unit says it's right*/
		LCD_moveCursor(1,0);
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	60 e0       	ldi	r22, 0x00	; 0
    188c:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
		for(i=0;i<4;i++)
    1890:	fe 01       	movw	r30, r28
    1892:	ec 56       	subi	r30, 0x6C	; 108
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	10 82       	st	Z, r1
    1898:	8e c0       	rjmp	.+284    	; 0x19b6 <main+0xe70>
		{
			password[i] = KEYPAD_getPressedKey();
    189a:	fe 01       	movw	r30, r28
    189c:	ec 56       	subi	r30, 0x6C	; 108
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	80 81       	ld	r24, Z
    18a2:	08 2f       	mov	r16, r24
    18a4:	10 e0       	ldi	r17, 0x00	; 0
    18a6:	0e 94 b9 12 	call	0x2572	; 0x2572 <KEYPAD_getPressedKey>
    18aa:	28 2f       	mov	r18, r24
    18ac:	ce 01       	movw	r24, r28
    18ae:	84 56       	subi	r24, 0x64	; 100
    18b0:	9f 4f       	sbci	r25, 0xFF	; 255
    18b2:	fc 01       	movw	r30, r24
    18b4:	e0 0f       	add	r30, r16
    18b6:	f1 1f       	adc	r31, r17
    18b8:	20 83       	st	Z, r18
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	aa ef       	ldi	r26, 0xFA	; 250
    18c0:	b3 e4       	ldi	r27, 0x43	; 67
    18c2:	8d ab       	std	Y+53, r24	; 0x35
    18c4:	9e ab       	std	Y+54, r25	; 0x36
    18c6:	af ab       	std	Y+55, r26	; 0x37
    18c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ca:	6d a9       	ldd	r22, Y+53	; 0x35
    18cc:	7e a9       	ldd	r23, Y+54	; 0x36
    18ce:	8f a9       	ldd	r24, Y+55	; 0x37
    18d0:	98 ad       	ldd	r25, Y+56	; 0x38
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	4a ef       	ldi	r20, 0xFA	; 250
    18d8:	54 e4       	ldi	r21, 0x44	; 68
    18da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	89 ab       	std	Y+49, r24	; 0x31
    18e4:	9a ab       	std	Y+50, r25	; 0x32
    18e6:	ab ab       	std	Y+51, r26	; 0x33
    18e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18ea:	69 a9       	ldd	r22, Y+49	; 0x31
    18ec:	7a a9       	ldd	r23, Y+50	; 0x32
    18ee:	8b a9       	ldd	r24, Y+51	; 0x33
    18f0:	9c a9       	ldd	r25, Y+52	; 0x34
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e8       	ldi	r20, 0x80	; 128
    18f8:	5f e3       	ldi	r21, 0x3F	; 63
    18fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18fe:	88 23       	and	r24, r24
    1900:	2c f4       	brge	.+10     	; 0x190c <main+0xdc6>
		__ticks = 1;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	98 ab       	std	Y+48, r25	; 0x30
    1908:	8f a7       	std	Y+47, r24	; 0x2f
    190a:	3f c0       	rjmp	.+126    	; 0x198a <main+0xe44>
	else if (__tmp > 65535)
    190c:	69 a9       	ldd	r22, Y+49	; 0x31
    190e:	7a a9       	ldd	r23, Y+50	; 0x32
    1910:	8b a9       	ldd	r24, Y+51	; 0x33
    1912:	9c a9       	ldd	r25, Y+52	; 0x34
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	3f ef       	ldi	r19, 0xFF	; 255
    1918:	4f e7       	ldi	r20, 0x7F	; 127
    191a:	57 e4       	ldi	r21, 0x47	; 71
    191c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1920:	18 16       	cp	r1, r24
    1922:	4c f5       	brge	.+82     	; 0x1976 <main+0xe30>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1924:	6d a9       	ldd	r22, Y+53	; 0x35
    1926:	7e a9       	ldd	r23, Y+54	; 0x36
    1928:	8f a9       	ldd	r24, Y+55	; 0x37
    192a:	98 ad       	ldd	r25, Y+56	; 0x38
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	40 e2       	ldi	r20, 0x20	; 32
    1932:	51 e4       	ldi	r21, 0x41	; 65
    1934:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	bc 01       	movw	r22, r24
    193e:	cd 01       	movw	r24, r26
    1940:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	98 ab       	std	Y+48, r25	; 0x30
    194a:	8f a7       	std	Y+47, r24	; 0x2f
    194c:	0f c0       	rjmp	.+30     	; 0x196c <main+0xe26>
    194e:	88 ec       	ldi	r24, 0xC8	; 200
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	9e a7       	std	Y+46, r25	; 0x2e
    1954:	8d a7       	std	Y+45, r24	; 0x2d
    1956:	8d a5       	ldd	r24, Y+45	; 0x2d
    1958:	9e a5       	ldd	r25, Y+46	; 0x2e
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	f1 f7       	brne	.-4      	; 0x195a <main+0xe14>
    195e:	9e a7       	std	Y+46, r25	; 0x2e
    1960:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1962:	8f a5       	ldd	r24, Y+47	; 0x2f
    1964:	98 a9       	ldd	r25, Y+48	; 0x30
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	98 ab       	std	Y+48, r25	; 0x30
    196a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196c:	8f a5       	ldd	r24, Y+47	; 0x2f
    196e:	98 a9       	ldd	r25, Y+48	; 0x30
    1970:	00 97       	sbiw	r24, 0x00	; 0
    1972:	69 f7       	brne	.-38     	; 0x194e <main+0xe08>
    1974:	14 c0       	rjmp	.+40     	; 0x199e <main+0xe58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1976:	69 a9       	ldd	r22, Y+49	; 0x31
    1978:	7a a9       	ldd	r23, Y+50	; 0x32
    197a:	8b a9       	ldd	r24, Y+51	; 0x33
    197c:	9c a9       	ldd	r25, Y+52	; 0x34
    197e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	98 ab       	std	Y+48, r25	; 0x30
    1988:	8f a7       	std	Y+47, r24	; 0x2f
    198a:	8f a5       	ldd	r24, Y+47	; 0x2f
    198c:	98 a9       	ldd	r25, Y+48	; 0x30
    198e:	9c a7       	std	Y+44, r25	; 0x2c
    1990:	8b a7       	std	Y+43, r24	; 0x2b
    1992:	8b a5       	ldd	r24, Y+43	; 0x2b
    1994:	9c a5       	ldd	r25, Y+44	; 0x2c
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	f1 f7       	brne	.-4      	; 0x1996 <main+0xe50>
    199a:	9c a7       	std	Y+44, r25	; 0x2c
    199c:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(500);
			/* get the pressed key number */
			LCD_displayCharacter('*');
    199e:	8a e2       	ldi	r24, 0x2A	; 42
    19a0:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <LCD_displayCharacter>
		LCD_displayString("                ");
		/*take password and send it
		 *
		 *but wait here till the control unit says it's right*/
		LCD_moveCursor(1,0);
		for(i=0;i<4;i++)
    19a4:	de 01       	movw	r26, r28
    19a6:	ac 56       	subi	r26, 0x6C	; 108
    19a8:	bf 4f       	sbci	r27, 0xFF	; 255
    19aa:	fe 01       	movw	r30, r28
    19ac:	ec 56       	subi	r30, 0x6C	; 108
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	80 81       	ld	r24, Z
    19b2:	8f 5f       	subi	r24, 0xFF	; 255
    19b4:	8c 93       	st	X, r24
    19b6:	fe 01       	movw	r30, r28
    19b8:	ec 56       	subi	r30, 0x6C	; 108
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	80 81       	ld	r24, Z
    19be:	84 30       	cpi	r24, 0x04	; 4
    19c0:	08 f4       	brcc	.+2      	; 0x19c4 <main+0xe7e>
    19c2:	6b cf       	rjmp	.-298    	; 0x189a <main+0xd54>
			password[i] = KEYPAD_getPressedKey();
			_delay_ms(500);
			/* get the pressed key number */
			LCD_displayCharacter('*');
		}
		password[i]=KEYPAD_getPressedKey();
    19c4:	fe 01       	movw	r30, r28
    19c6:	ec 56       	subi	r30, 0x6C	; 108
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	80 81       	ld	r24, Z
    19cc:	08 2f       	mov	r16, r24
    19ce:	10 e0       	ldi	r17, 0x00	; 0
    19d0:	0e 94 b9 12 	call	0x2572	; 0x2572 <KEYPAD_getPressedKey>
    19d4:	28 2f       	mov	r18, r24
    19d6:	ce 01       	movw	r24, r28
    19d8:	84 56       	subi	r24, 0x64	; 100
    19da:	9f 4f       	sbci	r25, 0xFF	; 255
    19dc:	fc 01       	movw	r30, r24
    19de:	e0 0f       	add	r30, r16
    19e0:	f1 1f       	adc	r31, r17
    19e2:	20 83       	st	Z, r18
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	aa ef       	ldi	r26, 0xFA	; 250
    19ea:	b3 e4       	ldi	r27, 0x43	; 67
    19ec:	8f a3       	std	Y+39, r24	; 0x27
    19ee:	98 a7       	std	Y+40, r25	; 0x28
    19f0:	a9 a7       	std	Y+41, r26	; 0x29
    19f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f4:	6f a1       	ldd	r22, Y+39	; 0x27
    19f6:	78 a5       	ldd	r23, Y+40	; 0x28
    19f8:	89 a5       	ldd	r24, Y+41	; 0x29
    19fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	4a ef       	ldi	r20, 0xFA	; 250
    1a02:	54 e4       	ldi	r21, 0x44	; 68
    1a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	8b a3       	std	Y+35, r24	; 0x23
    1a0e:	9c a3       	std	Y+36, r25	; 0x24
    1a10:	ad a3       	std	Y+37, r26	; 0x25
    1a12:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a14:	6b a1       	ldd	r22, Y+35	; 0x23
    1a16:	7c a1       	ldd	r23, Y+36	; 0x24
    1a18:	8d a1       	ldd	r24, Y+37	; 0x25
    1a1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e8       	ldi	r20, 0x80	; 128
    1a22:	5f e3       	ldi	r21, 0x3F	; 63
    1a24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a28:	88 23       	and	r24, r24
    1a2a:	2c f4       	brge	.+10     	; 0x1a36 <main+0xef0>
		__ticks = 1;
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	9a a3       	std	Y+34, r25	; 0x22
    1a32:	89 a3       	std	Y+33, r24	; 0x21
    1a34:	3f c0       	rjmp	.+126    	; 0x1ab4 <main+0xf6e>
	else if (__tmp > 65535)
    1a36:	6b a1       	ldd	r22, Y+35	; 0x23
    1a38:	7c a1       	ldd	r23, Y+36	; 0x24
    1a3a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a3c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	3f ef       	ldi	r19, 0xFF	; 255
    1a42:	4f e7       	ldi	r20, 0x7F	; 127
    1a44:	57 e4       	ldi	r21, 0x47	; 71
    1a46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a4a:	18 16       	cp	r1, r24
    1a4c:	4c f5       	brge	.+82     	; 0x1aa0 <main+0xf5a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a4e:	6f a1       	ldd	r22, Y+39	; 0x27
    1a50:	78 a5       	ldd	r23, Y+40	; 0x28
    1a52:	89 a5       	ldd	r24, Y+41	; 0x29
    1a54:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e2       	ldi	r20, 0x20	; 32
    1a5c:	51 e4       	ldi	r21, 0x41	; 65
    1a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	bc 01       	movw	r22, r24
    1a68:	cd 01       	movw	r24, r26
    1a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	9a a3       	std	Y+34, r25	; 0x22
    1a74:	89 a3       	std	Y+33, r24	; 0x21
    1a76:	0f c0       	rjmp	.+30     	; 0x1a96 <main+0xf50>
    1a78:	88 ec       	ldi	r24, 0xC8	; 200
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	98 a3       	std	Y+32, r25	; 0x20
    1a7e:	8f 8f       	std	Y+31, r24	; 0x1f
    1a80:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a82:	98 a1       	ldd	r25, Y+32	; 0x20
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	f1 f7       	brne	.-4      	; 0x1a84 <main+0xf3e>
    1a88:	98 a3       	std	Y+32, r25	; 0x20
    1a8a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a8e:	9a a1       	ldd	r25, Y+34	; 0x22
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	9a a3       	std	Y+34, r25	; 0x22
    1a94:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a96:	89 a1       	ldd	r24, Y+33	; 0x21
    1a98:	9a a1       	ldd	r25, Y+34	; 0x22
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	69 f7       	brne	.-38     	; 0x1a78 <main+0xf32>
    1a9e:	14 c0       	rjmp	.+40     	; 0x1ac8 <main+0xf82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa0:	6b a1       	ldd	r22, Y+35	; 0x23
    1aa2:	7c a1       	ldd	r23, Y+36	; 0x24
    1aa4:	8d a1       	ldd	r24, Y+37	; 0x25
    1aa6:	9e a1       	ldd	r25, Y+38	; 0x26
    1aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	9a a3       	std	Y+34, r25	; 0x22
    1ab2:	89 a3       	std	Y+33, r24	; 0x21
    1ab4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ab6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ab8:	9e 8f       	std	Y+30, r25	; 0x1e
    1aba:	8d 8f       	std	Y+29, r24	; 0x1d
    1abc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1abe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <main+0xf7a>
    1ac4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ac6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		UART_sendByte(are_you_ready_to_confirm_to_open_doors);
    1ac8:	80 e2       	ldi	r24, 0x20	; 32
    1aca:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <UART_sendByte>
		while((check=UART_receiveByte())!=ready_to_confirm_to_open_doors){}
    1ace:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <UART_receiveByte>
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	e0 57       	subi	r30, 0x70	; 112
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	80 83       	st	Z, r24
    1ada:	fe 01       	movw	r30, r28
    1adc:	e0 57       	subi	r30, 0x70	; 112
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	80 81       	ld	r24, Z
    1ae2:	81 32       	cpi	r24, 0x21	; 33
    1ae4:	a1 f7       	brne	.-24     	; 0x1ace <main+0xf88>
		UART_sendString(password);
    1ae6:	ce 01       	movw	r24, r28
    1ae8:	84 56       	subi	r24, 0x64	; 100
    1aea:	9f 4f       	sbci	r25, 0xFF	; 255
    1aec:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <UART_sendString>
		check=UART_receiveByte();
    1af0:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <UART_receiveByte>
    1af4:	fe 01       	movw	r30, r28
    1af6:	e0 57       	subi	r30, 0x70	; 112
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	80 83       	st	Z, r24
		if(check==confirmed)
    1afc:	fe 01       	movw	r30, r28
    1afe:	e0 57       	subi	r30, 0x70	; 112
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	80 81       	ld	r24, Z
    1b04:	82 32       	cpi	r24, 0x22	; 34
    1b06:	e1 f5       	brne	.+120    	; 0x1b80 <main+0x103a>
		{
			LCD_moveCursor(0,0);
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	60 e0       	ldi	r22, 0x00	; 0
    1b0c:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
			LCD_displayString("pass  correct");
    1b10:	86 ee       	ldi	r24, 0xE6	; 230
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
			UART_sendByte(are_you_ready_to_open);
    1b18:	84 e2       	ldi	r24, 0x24	; 36
    1b1a:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <UART_sendByte>
			while((check=UART_receiveByte())!=ready_to_open_doors){}
    1b1e:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <UART_receiveByte>
    1b22:	fe 01       	movw	r30, r28
    1b24:	e0 57       	subi	r30, 0x70	; 112
    1b26:	ff 4f       	sbci	r31, 0xFF	; 255
    1b28:	80 83       	st	Z, r24
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	e0 57       	subi	r30, 0x70	; 112
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	80 81       	ld	r24, Z
    1b32:	85 32       	cpi	r24, 0x25	; 37
    1b34:	a1 f7       	brne	.-24     	; 0x1b1e <main+0xfd8>
			UART_sendByte(open_the_door);
    1b36:	86 e2       	ldi	r24, 0x26	; 38
    1b38:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <UART_sendByte>
			LCD_moveCursor(1,0);
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	60 e0       	ldi	r22, 0x00	; 0
    1b40:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
			LCD_displayString("                ");
    1b44:	85 ed       	ldi	r24, 0xD5	; 213
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
			LCD_moveCursor(0,0);
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	60 e0       	ldi	r22, 0x00	; 0
    1b50:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
			LCD_displayString("doors_opening ");
    1b54:	84 ef       	ldi	r24, 0xF4	; 244
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
			while((check=UART_receiveByte())!=doors_opened_and_closed){}
    1b5c:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <UART_receiveByte>
    1b60:	fe 01       	movw	r30, r28
    1b62:	e0 57       	subi	r30, 0x70	; 112
    1b64:	ff 4f       	sbci	r31, 0xFF	; 255
    1b66:	80 83       	st	Z, r24
    1b68:	fe 01       	movw	r30, r28
    1b6a:	e0 57       	subi	r30, 0x70	; 112
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	80 81       	ld	r24, Z
    1b70:	87 32       	cpi	r24, 0x27	; 39
    1b72:	a1 f7       	brne	.-24     	; 0x1b5c <main+0x1016>
			next_status=main_options;
    1b74:	fe 01       	movw	r30, r28
    1b76:	ee 56       	subi	r30, 0x6E	; 110
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	83 e0       	ldi	r24, 0x03	; 3
    1b7c:	80 83       	st	Z, r24
    1b7e:	cd c8       	rjmp	.-3686   	; 0xd1a <main+0x1d4>
		}
		else
		{
			error_times++;
    1b80:	de 01       	movw	r26, r28
    1b82:	ab 56       	subi	r26, 0x6B	; 107
    1b84:	bf 4f       	sbci	r27, 0xFF	; 255
    1b86:	fe 01       	movw	r30, r28
    1b88:	eb 56       	subi	r30, 0x6B	; 107
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	80 81       	ld	r24, Z
    1b8e:	8f 5f       	subi	r24, 0xFF	; 255
    1b90:	8c 93       	st	X, r24
			LCD_moveCursor(0,0);
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	60 e0       	ldi	r22, 0x00	; 0
    1b96:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
			LCD_displayString("wroooong pass");
    1b9a:	83 e0       	ldi	r24, 0x03	; 3
    1b9c:	91 e0       	ldi	r25, 0x01	; 1
    1b9e:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
			if(error_times==3)
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	eb 56       	subi	r30, 0x6B	; 107
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	80 81       	ld	r24, Z
    1baa:	83 30       	cpi	r24, 0x03	; 3
    1bac:	09 f0       	breq	.+2      	; 0x1bb0 <main+0x106a>
    1bae:	b5 c8       	rjmp	.-3734   	; 0xd1a <main+0x1d4>
			{
				error_times=0;
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	eb 56       	subi	r30, 0x6B	; 107
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	10 82       	st	Z, r1
				next_status=show_warning;
    1bb8:	fe 01       	movw	r30, r28
    1bba:	ee 56       	subi	r30, 0x6E	; 110
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	84 e6       	ldi	r24, 0x64	; 100
    1bc0:	80 83       	st	Z, r24
    1bc2:	ab c8       	rjmp	.-3754   	; 0xd1a <main+0x1d4>
			}
		}
		}

		/*-------------------------------------------------------------------------------*/
		else if(next_status==show_warning)
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	ee 56       	subi	r30, 0x6E	; 110
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	80 81       	ld	r24, Z
    1bcc:	84 36       	cpi	r24, 0x64	; 100
    1bce:	21 f5       	brne	.+72     	; 0x1c18 <main+0x10d2>
		{
			UART_sendByte(are_you_ready_to_sound_alarm);
    1bd0:	85 e6       	ldi	r24, 0x65	; 101
    1bd2:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <UART_sendByte>
			while((check=UART_receiveByte())!=ready_to_sound_alarm){}
    1bd6:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <UART_receiveByte>
    1bda:	fe 01       	movw	r30, r28
    1bdc:	e0 57       	subi	r30, 0x70	; 112
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	80 83       	st	Z, r24
    1be2:	fe 01       	movw	r30, r28
    1be4:	e0 57       	subi	r30, 0x70	; 112
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	80 81       	ld	r24, Z
    1bea:	86 36       	cpi	r24, 0x66	; 102
    1bec:	a1 f7       	brne	.-24     	; 0x1bd6 <main+0x1090>
			UART_sendByte(sound_the_alarm);
    1bee:	87 e6       	ldi	r24, 0x67	; 103
    1bf0:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <UART_sendByte>

			while((check=UART_receiveByte())!=buzzer_ended){}
    1bf4:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <UART_receiveByte>
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	e0 57       	subi	r30, 0x70	; 112
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	80 83       	st	Z, r24
    1c00:	fe 01       	movw	r30, r28
    1c02:	e0 57       	subi	r30, 0x70	; 112
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	80 81       	ld	r24, Z
    1c08:	88 36       	cpi	r24, 0x68	; 104
    1c0a:	a1 f7       	brne	.-24     	; 0x1bf4 <main+0x10ae>
			next_status=main_options;
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	ee 56       	subi	r30, 0x6E	; 110
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	83 e0       	ldi	r24, 0x03	; 3
    1c14:	80 83       	st	Z, r24
    1c16:	81 c8       	rjmp	.-3838   	; 0xd1a <main+0x1d4>
		}
		/*-------------------------------------------------------------------------------*/
		else if(next_status==enter_password_for_change)
    1c18:	fe 01       	movw	r30, r28
    1c1a:	ee 56       	subi	r30, 0x6E	; 110
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	80 81       	ld	r24, Z
    1c20:	89 31       	cpi	r24, 0x19	; 25
    1c22:	09 f0       	breq	.+2      	; 0x1c26 <main+0x10e0>
    1c24:	7a c8       	rjmp	.-3852   	; 0xd1a <main+0x1d4>
		{
			LCD_moveCursor(0,0);
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	60 e0       	ldi	r22, 0x00	; 0
    1c2a:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
			LCD_displayString("enter old pass");
    1c2e:	81 e1       	ldi	r24, 0x11	; 17
    1c30:	91 e0       	ldi	r25, 0x01	; 1
    1c32:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
			LCD_moveCursor(1,0);
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	60 e0       	ldi	r22, 0x00	; 0
    1c3a:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
			LCD_displayString("                ");
    1c3e:	85 ed       	ldi	r24, 0xD5	; 213
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
			/*take password and send it
			 *
			 *but wait here till the control unit says it's right*/
			LCD_moveCursor(1,0);
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	60 e0       	ldi	r22, 0x00	; 0
    1c4a:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
			for(i=0;i<4;i++)
    1c4e:	fe 01       	movw	r30, r28
    1c50:	ec 56       	subi	r30, 0x6C	; 108
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	10 82       	st	Z, r1
    1c56:	8e c0       	rjmp	.+284    	; 0x1d74 <main+0x122e>
			{
				password[i] = KEYPAD_getPressedKey();
    1c58:	fe 01       	movw	r30, r28
    1c5a:	ec 56       	subi	r30, 0x6C	; 108
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	80 81       	ld	r24, Z
    1c60:	08 2f       	mov	r16, r24
    1c62:	10 e0       	ldi	r17, 0x00	; 0
    1c64:	0e 94 b9 12 	call	0x2572	; 0x2572 <KEYPAD_getPressedKey>
    1c68:	28 2f       	mov	r18, r24
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	84 56       	subi	r24, 0x64	; 100
    1c6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c70:	fc 01       	movw	r30, r24
    1c72:	e0 0f       	add	r30, r16
    1c74:	f1 1f       	adc	r31, r17
    1c76:	20 83       	st	Z, r18
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	aa ef       	ldi	r26, 0xFA	; 250
    1c7e:	b3 e4       	ldi	r27, 0x43	; 67
    1c80:	89 8f       	std	Y+25, r24	; 0x19
    1c82:	9a 8f       	std	Y+26, r25	; 0x1a
    1c84:	ab 8f       	std	Y+27, r26	; 0x1b
    1c86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c88:	69 8d       	ldd	r22, Y+25	; 0x19
    1c8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	4a ef       	ldi	r20, 0xFA	; 250
    1c96:	54 e4       	ldi	r21, 0x44	; 68
    1c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	8d 8b       	std	Y+21, r24	; 0x15
    1ca2:	9e 8b       	std	Y+22, r25	; 0x16
    1ca4:	af 8b       	std	Y+23, r26	; 0x17
    1ca6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ca8:	6d 89       	ldd	r22, Y+21	; 0x15
    1caa:	7e 89       	ldd	r23, Y+22	; 0x16
    1cac:	8f 89       	ldd	r24, Y+23	; 0x17
    1cae:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	40 e8       	ldi	r20, 0x80	; 128
    1cb6:	5f e3       	ldi	r21, 0x3F	; 63
    1cb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cbc:	88 23       	and	r24, r24
    1cbe:	2c f4       	brge	.+10     	; 0x1cca <main+0x1184>
		__ticks = 1;
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	9c 8b       	std	Y+20, r25	; 0x14
    1cc6:	8b 8b       	std	Y+19, r24	; 0x13
    1cc8:	3f c0       	rjmp	.+126    	; 0x1d48 <main+0x1202>
	else if (__tmp > 65535)
    1cca:	6d 89       	ldd	r22, Y+21	; 0x15
    1ccc:	7e 89       	ldd	r23, Y+22	; 0x16
    1cce:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	3f ef       	ldi	r19, 0xFF	; 255
    1cd6:	4f e7       	ldi	r20, 0x7F	; 127
    1cd8:	57 e4       	ldi	r21, 0x47	; 71
    1cda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cde:	18 16       	cp	r1, r24
    1ce0:	4c f5       	brge	.+82     	; 0x1d34 <main+0x11ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ce4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ce6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ce8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e2       	ldi	r20, 0x20	; 32
    1cf0:	51 e4       	ldi	r21, 0x41	; 65
    1cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	bc 01       	movw	r22, r24
    1cfc:	cd 01       	movw	r24, r26
    1cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9c 8b       	std	Y+20, r25	; 0x14
    1d08:	8b 8b       	std	Y+19, r24	; 0x13
    1d0a:	0f c0       	rjmp	.+30     	; 0x1d2a <main+0x11e4>
    1d0c:	88 ec       	ldi	r24, 0xC8	; 200
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	9a 8b       	std	Y+18, r25	; 0x12
    1d12:	89 8b       	std	Y+17, r24	; 0x11
    1d14:	89 89       	ldd	r24, Y+17	; 0x11
    1d16:	9a 89       	ldd	r25, Y+18	; 0x12
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	f1 f7       	brne	.-4      	; 0x1d18 <main+0x11d2>
    1d1c:	9a 8b       	std	Y+18, r25	; 0x12
    1d1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d20:	8b 89       	ldd	r24, Y+19	; 0x13
    1d22:	9c 89       	ldd	r25, Y+20	; 0x14
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	9c 8b       	std	Y+20, r25	; 0x14
    1d28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	69 f7       	brne	.-38     	; 0x1d0c <main+0x11c6>
    1d32:	14 c0       	rjmp	.+40     	; 0x1d5c <main+0x1216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d34:	6d 89       	ldd	r22, Y+21	; 0x15
    1d36:	7e 89       	ldd	r23, Y+22	; 0x16
    1d38:	8f 89       	ldd	r24, Y+23	; 0x17
    1d3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	9c 8b       	std	Y+20, r25	; 0x14
    1d46:	8b 8b       	std	Y+19, r24	; 0x13
    1d48:	8b 89       	ldd	r24, Y+19	; 0x13
    1d4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d4c:	98 8b       	std	Y+16, r25	; 0x10
    1d4e:	8f 87       	std	Y+15, r24	; 0x0f
    1d50:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d52:	98 89       	ldd	r25, Y+16	; 0x10
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <main+0x120e>
    1d58:	98 8b       	std	Y+16, r25	; 0x10
    1d5a:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				/* get the pressed key number */
				LCD_displayCharacter('*');
    1d5c:	8a e2       	ldi	r24, 0x2A	; 42
    1d5e:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <LCD_displayCharacter>
			LCD_displayString("                ");
			/*take password and send it
			 *
			 *but wait here till the control unit says it's right*/
			LCD_moveCursor(1,0);
			for(i=0;i<4;i++)
    1d62:	de 01       	movw	r26, r28
    1d64:	ac 56       	subi	r26, 0x6C	; 108
    1d66:	bf 4f       	sbci	r27, 0xFF	; 255
    1d68:	fe 01       	movw	r30, r28
    1d6a:	ec 56       	subi	r30, 0x6C	; 108
    1d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6e:	80 81       	ld	r24, Z
    1d70:	8f 5f       	subi	r24, 0xFF	; 255
    1d72:	8c 93       	st	X, r24
    1d74:	fe 01       	movw	r30, r28
    1d76:	ec 56       	subi	r30, 0x6C	; 108
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	80 81       	ld	r24, Z
    1d7c:	84 30       	cpi	r24, 0x04	; 4
    1d7e:	08 f4       	brcc	.+2      	; 0x1d82 <main+0x123c>
    1d80:	6b cf       	rjmp	.-298    	; 0x1c58 <main+0x1112>
				password[i] = KEYPAD_getPressedKey();
				_delay_ms(500);
				/* get the pressed key number */
				LCD_displayCharacter('*');
			}
			password[i]=KEYPAD_getPressedKey();
    1d82:	fe 01       	movw	r30, r28
    1d84:	ec 56       	subi	r30, 0x6C	; 108
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	80 81       	ld	r24, Z
    1d8a:	08 2f       	mov	r16, r24
    1d8c:	10 e0       	ldi	r17, 0x00	; 0
    1d8e:	0e 94 b9 12 	call	0x2572	; 0x2572 <KEYPAD_getPressedKey>
    1d92:	28 2f       	mov	r18, r24
    1d94:	ce 01       	movw	r24, r28
    1d96:	84 56       	subi	r24, 0x64	; 100
    1d98:	9f 4f       	sbci	r25, 0xFF	; 255
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	e0 0f       	add	r30, r16
    1d9e:	f1 1f       	adc	r31, r17
    1da0:	20 83       	st	Z, r18
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	aa ef       	ldi	r26, 0xFA	; 250
    1da8:	b3 e4       	ldi	r27, 0x43	; 67
    1daa:	8b 87       	std	Y+11, r24	; 0x0b
    1dac:	9c 87       	std	Y+12, r25	; 0x0c
    1dae:	ad 87       	std	Y+13, r26	; 0x0d
    1db0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	4a ef       	ldi	r20, 0xFA	; 250
    1dc0:	54 e4       	ldi	r21, 0x44	; 68
    1dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	8f 83       	std	Y+7, r24	; 0x07
    1dcc:	98 87       	std	Y+8, r25	; 0x08
    1dce:	a9 87       	std	Y+9, r26	; 0x09
    1dd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd4:	78 85       	ldd	r23, Y+8	; 0x08
    1dd6:	89 85       	ldd	r24, Y+9	; 0x09
    1dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e8       	ldi	r20, 0x80	; 128
    1de0:	5f e3       	ldi	r21, 0x3F	; 63
    1de2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1de6:	88 23       	and	r24, r24
    1de8:	2c f4       	brge	.+10     	; 0x1df4 <main+0x12ae>
		__ticks = 1;
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	9e 83       	std	Y+6, r25	; 0x06
    1df0:	8d 83       	std	Y+5, r24	; 0x05
    1df2:	3f c0       	rjmp	.+126    	; 0x1e72 <main+0x132c>
	else if (__tmp > 65535)
    1df4:	6f 81       	ldd	r22, Y+7	; 0x07
    1df6:	78 85       	ldd	r23, Y+8	; 0x08
    1df8:	89 85       	ldd	r24, Y+9	; 0x09
    1dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	3f ef       	ldi	r19, 0xFF	; 255
    1e00:	4f e7       	ldi	r20, 0x7F	; 127
    1e02:	57 e4       	ldi	r21, 0x47	; 71
    1e04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e08:	18 16       	cp	r1, r24
    1e0a:	4c f5       	brge	.+82     	; 0x1e5e <main+0x1318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	40 e2       	ldi	r20, 0x20	; 32
    1e1a:	51 e4       	ldi	r21, 0x41	; 65
    1e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	bc 01       	movw	r22, r24
    1e26:	cd 01       	movw	r24, r26
    1e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	9e 83       	std	Y+6, r25	; 0x06
    1e32:	8d 83       	std	Y+5, r24	; 0x05
    1e34:	0f c0       	rjmp	.+30     	; 0x1e54 <main+0x130e>
    1e36:	88 ec       	ldi	r24, 0xC8	; 200
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	9c 83       	std	Y+4, r25	; 0x04
    1e3c:	8b 83       	std	Y+3, r24	; 0x03
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	9c 81       	ldd	r25, Y+4	; 0x04
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <main+0x12fc>
    1e46:	9c 83       	std	Y+4, r25	; 0x04
    1e48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	9e 83       	std	Y+6, r25	; 0x06
    1e52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e54:	8d 81       	ldd	r24, Y+5	; 0x05
    1e56:	9e 81       	ldd	r25, Y+6	; 0x06
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	69 f7       	brne	.-38     	; 0x1e36 <main+0x12f0>
    1e5c:	14 c0       	rjmp	.+40     	; 0x1e86 <main+0x1340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e60:	78 85       	ldd	r23, Y+8	; 0x08
    1e62:	89 85       	ldd	r24, Y+9	; 0x09
    1e64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	9e 83       	std	Y+6, r25	; 0x06
    1e70:	8d 83       	std	Y+5, r24	; 0x05
    1e72:	8d 81       	ldd	r24, Y+5	; 0x05
    1e74:	9e 81       	ldd	r25, Y+6	; 0x06
    1e76:	9a 83       	std	Y+2, r25	; 0x02
    1e78:	89 83       	std	Y+1, r24	; 0x01
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	f1 f7       	brne	.-4      	; 0x1e7e <main+0x1338>
    1e82:	9a 83       	std	Y+2, r25	; 0x02
    1e84:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			UART_sendByte(are_you_ready_to_change_password);
    1e86:	89 e6       	ldi	r24, 0x69	; 105
    1e88:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <UART_sendByte>
			while((check=UART_receiveByte())!=ready_to_change_password){}
    1e8c:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <UART_receiveByte>
    1e90:	fe 01       	movw	r30, r28
    1e92:	e0 57       	subi	r30, 0x70	; 112
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	80 83       	st	Z, r24
    1e98:	fe 01       	movw	r30, r28
    1e9a:	e0 57       	subi	r30, 0x70	; 112
    1e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9e:	80 81       	ld	r24, Z
    1ea0:	8a 36       	cpi	r24, 0x6A	; 106
    1ea2:	a1 f7       	brne	.-24     	; 0x1e8c <main+0x1346>
			UART_sendString(password);
    1ea4:	ce 01       	movw	r24, r28
    1ea6:	84 56       	subi	r24, 0x64	; 100
    1ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eaa:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <UART_sendString>
			check=UART_receiveByte();
    1eae:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <UART_receiveByte>
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	e0 57       	subi	r30, 0x70	; 112
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	80 83       	st	Z, r24
			if(check==confirmed)
    1eba:	fe 01       	movw	r30, r28
    1ebc:	e0 57       	subi	r30, 0x70	; 112
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	80 81       	ld	r24, Z
    1ec2:	82 32       	cpi	r24, 0x22	; 34
    1ec4:	11 f0       	breq	.+4      	; 0x1eca <main+0x1384>
    1ec6:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <main+0x1d4>
			{
				next_status=new_password;
    1eca:	fe 01       	movw	r30, r28
    1ecc:	ee 56       	subi	r30, 0x6E	; 110
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	10 82       	st	Z, r1
				LCD_moveCursor(0,0);
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	60 e0       	ldi	r22, 0x00	; 0
    1ed6:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
				LCD_displayString("enter new pass");
    1eda:	80 e2       	ldi	r24, 0x20	; 32
    1edc:	91 e0       	ldi	r25, 0x01	; 1
    1ede:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
				LCD_moveCursor(1,0);
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	60 e0       	ldi	r22, 0x00	; 0
    1ee6:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
				LCD_displayString("                ");
    1eea:	85 ed       	ldi	r24, 0xD5	; 213
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
    1ef2:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <main+0x1d4>

00001ef6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <GPIO_setupPinDirection+0x6>
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <GPIO_setupPinDirection+0x8>
    1efe:	0f 92       	push	r0
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	6a 83       	std	Y+2, r22	; 0x02
    1f08:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0c:	88 30       	cpi	r24, 0x08	; 8
    1f0e:	08 f0       	brcs	.+2      	; 0x1f12 <GPIO_setupPinDirection+0x1c>
    1f10:	d5 c0       	rjmp	.+426    	; 0x20bc <GPIO_setupPinDirection+0x1c6>
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	84 30       	cpi	r24, 0x04	; 4
    1f16:	08 f0       	brcs	.+2      	; 0x1f1a <GPIO_setupPinDirection+0x24>
    1f18:	d1 c0       	rjmp	.+418    	; 0x20bc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	3d 83       	std	Y+5, r19	; 0x05
    1f22:	2c 83       	std	Y+4, r18	; 0x04
    1f24:	8c 81       	ldd	r24, Y+4	; 0x04
    1f26:	9d 81       	ldd	r25, Y+5	; 0x05
    1f28:	81 30       	cpi	r24, 0x01	; 1
    1f2a:	91 05       	cpc	r25, r1
    1f2c:	09 f4       	brne	.+2      	; 0x1f30 <GPIO_setupPinDirection+0x3a>
    1f2e:	43 c0       	rjmp	.+134    	; 0x1fb6 <GPIO_setupPinDirection+0xc0>
    1f30:	2c 81       	ldd	r18, Y+4	; 0x04
    1f32:	3d 81       	ldd	r19, Y+5	; 0x05
    1f34:	22 30       	cpi	r18, 0x02	; 2
    1f36:	31 05       	cpc	r19, r1
    1f38:	2c f4       	brge	.+10     	; 0x1f44 <GPIO_setupPinDirection+0x4e>
    1f3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f3e:	00 97       	sbiw	r24, 0x00	; 0
    1f40:	71 f0       	breq	.+28     	; 0x1f5e <GPIO_setupPinDirection+0x68>
    1f42:	bc c0       	rjmp	.+376    	; 0x20bc <GPIO_setupPinDirection+0x1c6>
    1f44:	2c 81       	ldd	r18, Y+4	; 0x04
    1f46:	3d 81       	ldd	r19, Y+5	; 0x05
    1f48:	22 30       	cpi	r18, 0x02	; 2
    1f4a:	31 05       	cpc	r19, r1
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <GPIO_setupPinDirection+0x5a>
    1f4e:	5f c0       	rjmp	.+190    	; 0x200e <GPIO_setupPinDirection+0x118>
    1f50:	8c 81       	ldd	r24, Y+4	; 0x04
    1f52:	9d 81       	ldd	r25, Y+5	; 0x05
    1f54:	83 30       	cpi	r24, 0x03	; 3
    1f56:	91 05       	cpc	r25, r1
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <GPIO_setupPinDirection+0x66>
    1f5a:	85 c0       	rjmp	.+266    	; 0x2066 <GPIO_setupPinDirection+0x170>
    1f5c:	af c0       	rjmp	.+350    	; 0x20bc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	81 30       	cpi	r24, 0x01	; 1
    1f62:	a1 f4       	brne	.+40     	; 0x1f8c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1f64:	aa e3       	ldi	r26, 0x3A	; 58
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	ea e3       	ldi	r30, 0x3A	; 58
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	48 2f       	mov	r20, r24
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	02 2e       	mov	r0, r18
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <GPIO_setupPinDirection+0x8c>
    1f7e:	88 0f       	add	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	0a 94       	dec	r0
    1f84:	e2 f7       	brpl	.-8      	; 0x1f7e <GPIO_setupPinDirection+0x88>
    1f86:	84 2b       	or	r24, r20
    1f88:	8c 93       	st	X, r24
    1f8a:	98 c0       	rjmp	.+304    	; 0x20bc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1f8c:	aa e3       	ldi	r26, 0x3A	; 58
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	ea e3       	ldi	r30, 0x3A	; 58
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	48 2f       	mov	r20, r24
    1f98:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	02 2e       	mov	r0, r18
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <GPIO_setupPinDirection+0xb4>
    1fa6:	88 0f       	add	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	0a 94       	dec	r0
    1fac:	e2 f7       	brpl	.-8      	; 0x1fa6 <GPIO_setupPinDirection+0xb0>
    1fae:	80 95       	com	r24
    1fb0:	84 23       	and	r24, r20
    1fb2:	8c 93       	st	X, r24
    1fb4:	83 c0       	rjmp	.+262    	; 0x20bc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	81 30       	cpi	r24, 0x01	; 1
    1fba:	a1 f4       	brne	.+40     	; 0x1fe4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1fbc:	a7 e3       	ldi	r26, 0x37	; 55
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	e7 e3       	ldi	r30, 0x37	; 55
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	48 2f       	mov	r20, r24
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	28 2f       	mov	r18, r24
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	02 2e       	mov	r0, r18
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <GPIO_setupPinDirection+0xe4>
    1fd6:	88 0f       	add	r24, r24
    1fd8:	99 1f       	adc	r25, r25
    1fda:	0a 94       	dec	r0
    1fdc:	e2 f7       	brpl	.-8      	; 0x1fd6 <GPIO_setupPinDirection+0xe0>
    1fde:	84 2b       	or	r24, r20
    1fe0:	8c 93       	st	X, r24
    1fe2:	6c c0       	rjmp	.+216    	; 0x20bc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1fe4:	a7 e3       	ldi	r26, 0x37	; 55
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e7 e3       	ldi	r30, 0x37	; 55
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	48 2f       	mov	r20, r24
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	28 2f       	mov	r18, r24
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	02 2e       	mov	r0, r18
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <GPIO_setupPinDirection+0x10c>
    1ffe:	88 0f       	add	r24, r24
    2000:	99 1f       	adc	r25, r25
    2002:	0a 94       	dec	r0
    2004:	e2 f7       	brpl	.-8      	; 0x1ffe <GPIO_setupPinDirection+0x108>
    2006:	80 95       	com	r24
    2008:	84 23       	and	r24, r20
    200a:	8c 93       	st	X, r24
    200c:	57 c0       	rjmp	.+174    	; 0x20bc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	81 30       	cpi	r24, 0x01	; 1
    2012:	a1 f4       	brne	.+40     	; 0x203c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2014:	a4 e3       	ldi	r26, 0x34	; 52
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	e4 e3       	ldi	r30, 0x34	; 52
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	48 2f       	mov	r20, r24
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	28 2f       	mov	r18, r24
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	02 2e       	mov	r0, r18
    202c:	02 c0       	rjmp	.+4      	; 0x2032 <GPIO_setupPinDirection+0x13c>
    202e:	88 0f       	add	r24, r24
    2030:	99 1f       	adc	r25, r25
    2032:	0a 94       	dec	r0
    2034:	e2 f7       	brpl	.-8      	; 0x202e <GPIO_setupPinDirection+0x138>
    2036:	84 2b       	or	r24, r20
    2038:	8c 93       	st	X, r24
    203a:	40 c0       	rjmp	.+128    	; 0x20bc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    203c:	a4 e3       	ldi	r26, 0x34	; 52
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e4 e3       	ldi	r30, 0x34	; 52
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	48 2f       	mov	r20, r24
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	02 2e       	mov	r0, r18
    2054:	02 c0       	rjmp	.+4      	; 0x205a <GPIO_setupPinDirection+0x164>
    2056:	88 0f       	add	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	0a 94       	dec	r0
    205c:	e2 f7       	brpl	.-8      	; 0x2056 <GPIO_setupPinDirection+0x160>
    205e:	80 95       	com	r24
    2060:	84 23       	and	r24, r20
    2062:	8c 93       	st	X, r24
    2064:	2b c0       	rjmp	.+86     	; 0x20bc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	81 30       	cpi	r24, 0x01	; 1
    206a:	a1 f4       	brne	.+40     	; 0x2094 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    206c:	a1 e3       	ldi	r26, 0x31	; 49
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	e1 e3       	ldi	r30, 0x31	; 49
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	48 2f       	mov	r20, r24
    2078:	8a 81       	ldd	r24, Y+2	; 0x02
    207a:	28 2f       	mov	r18, r24
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	02 2e       	mov	r0, r18
    2084:	02 c0       	rjmp	.+4      	; 0x208a <GPIO_setupPinDirection+0x194>
    2086:	88 0f       	add	r24, r24
    2088:	99 1f       	adc	r25, r25
    208a:	0a 94       	dec	r0
    208c:	e2 f7       	brpl	.-8      	; 0x2086 <GPIO_setupPinDirection+0x190>
    208e:	84 2b       	or	r24, r20
    2090:	8c 93       	st	X, r24
    2092:	14 c0       	rjmp	.+40     	; 0x20bc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2094:	a1 e3       	ldi	r26, 0x31	; 49
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	e1 e3       	ldi	r30, 0x31	; 49
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	48 2f       	mov	r20, r24
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	02 2e       	mov	r0, r18
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <GPIO_setupPinDirection+0x1bc>
    20ae:	88 0f       	add	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	0a 94       	dec	r0
    20b4:	e2 f7       	brpl	.-8      	; 0x20ae <GPIO_setupPinDirection+0x1b8>
    20b6:	80 95       	com	r24
    20b8:	84 23       	and	r24, r20
    20ba:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	cf 91       	pop	r28
    20c8:	df 91       	pop	r29
    20ca:	08 95       	ret

000020cc <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    20cc:	df 93       	push	r29
    20ce:	cf 93       	push	r28
    20d0:	00 d0       	rcall	.+0      	; 0x20d2 <GPIO_writePin+0x6>
    20d2:	00 d0       	rcall	.+0      	; 0x20d4 <GPIO_writePin+0x8>
    20d4:	0f 92       	push	r0
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	89 83       	std	Y+1, r24	; 0x01
    20dc:	6a 83       	std	Y+2, r22	; 0x02
    20de:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    20e0:	8a 81       	ldd	r24, Y+2	; 0x02
    20e2:	88 30       	cpi	r24, 0x08	; 8
    20e4:	08 f0       	brcs	.+2      	; 0x20e8 <GPIO_writePin+0x1c>
    20e6:	d5 c0       	rjmp	.+426    	; 0x2292 <GPIO_writePin+0x1c6>
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	84 30       	cpi	r24, 0x04	; 4
    20ec:	08 f0       	brcs	.+2      	; 0x20f0 <GPIO_writePin+0x24>
    20ee:	d1 c0       	rjmp	.+418    	; 0x2292 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	3d 83       	std	Y+5, r19	; 0x05
    20f8:	2c 83       	std	Y+4, r18	; 0x04
    20fa:	8c 81       	ldd	r24, Y+4	; 0x04
    20fc:	9d 81       	ldd	r25, Y+5	; 0x05
    20fe:	81 30       	cpi	r24, 0x01	; 1
    2100:	91 05       	cpc	r25, r1
    2102:	09 f4       	brne	.+2      	; 0x2106 <GPIO_writePin+0x3a>
    2104:	43 c0       	rjmp	.+134    	; 0x218c <GPIO_writePin+0xc0>
    2106:	2c 81       	ldd	r18, Y+4	; 0x04
    2108:	3d 81       	ldd	r19, Y+5	; 0x05
    210a:	22 30       	cpi	r18, 0x02	; 2
    210c:	31 05       	cpc	r19, r1
    210e:	2c f4       	brge	.+10     	; 0x211a <GPIO_writePin+0x4e>
    2110:	8c 81       	ldd	r24, Y+4	; 0x04
    2112:	9d 81       	ldd	r25, Y+5	; 0x05
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	71 f0       	breq	.+28     	; 0x2134 <GPIO_writePin+0x68>
    2118:	bc c0       	rjmp	.+376    	; 0x2292 <GPIO_writePin+0x1c6>
    211a:	2c 81       	ldd	r18, Y+4	; 0x04
    211c:	3d 81       	ldd	r19, Y+5	; 0x05
    211e:	22 30       	cpi	r18, 0x02	; 2
    2120:	31 05       	cpc	r19, r1
    2122:	09 f4       	brne	.+2      	; 0x2126 <GPIO_writePin+0x5a>
    2124:	5f c0       	rjmp	.+190    	; 0x21e4 <GPIO_writePin+0x118>
    2126:	8c 81       	ldd	r24, Y+4	; 0x04
    2128:	9d 81       	ldd	r25, Y+5	; 0x05
    212a:	83 30       	cpi	r24, 0x03	; 3
    212c:	91 05       	cpc	r25, r1
    212e:	09 f4       	brne	.+2      	; 0x2132 <GPIO_writePin+0x66>
    2130:	85 c0       	rjmp	.+266    	; 0x223c <GPIO_writePin+0x170>
    2132:	af c0       	rjmp	.+350    	; 0x2292 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2134:	8b 81       	ldd	r24, Y+3	; 0x03
    2136:	81 30       	cpi	r24, 0x01	; 1
    2138:	a1 f4       	brne	.+40     	; 0x2162 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    213a:	ab e3       	ldi	r26, 0x3B	; 59
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	eb e3       	ldi	r30, 0x3B	; 59
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	48 2f       	mov	r20, r24
    2146:	8a 81       	ldd	r24, Y+2	; 0x02
    2148:	28 2f       	mov	r18, r24
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	02 2e       	mov	r0, r18
    2152:	02 c0       	rjmp	.+4      	; 0x2158 <GPIO_writePin+0x8c>
    2154:	88 0f       	add	r24, r24
    2156:	99 1f       	adc	r25, r25
    2158:	0a 94       	dec	r0
    215a:	e2 f7       	brpl	.-8      	; 0x2154 <GPIO_writePin+0x88>
    215c:	84 2b       	or	r24, r20
    215e:	8c 93       	st	X, r24
    2160:	98 c0       	rjmp	.+304    	; 0x2292 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2162:	ab e3       	ldi	r26, 0x3B	; 59
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	eb e3       	ldi	r30, 0x3B	; 59
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	48 2f       	mov	r20, r24
    216e:	8a 81       	ldd	r24, Y+2	; 0x02
    2170:	28 2f       	mov	r18, r24
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	02 2e       	mov	r0, r18
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <GPIO_writePin+0xb4>
    217c:	88 0f       	add	r24, r24
    217e:	99 1f       	adc	r25, r25
    2180:	0a 94       	dec	r0
    2182:	e2 f7       	brpl	.-8      	; 0x217c <GPIO_writePin+0xb0>
    2184:	80 95       	com	r24
    2186:	84 23       	and	r24, r20
    2188:	8c 93       	st	X, r24
    218a:	83 c0       	rjmp	.+262    	; 0x2292 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	81 30       	cpi	r24, 0x01	; 1
    2190:	a1 f4       	brne	.+40     	; 0x21ba <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2192:	a8 e3       	ldi	r26, 0x38	; 56
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	e8 e3       	ldi	r30, 0x38	; 56
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	48 2f       	mov	r20, r24
    219e:	8a 81       	ldd	r24, Y+2	; 0x02
    21a0:	28 2f       	mov	r18, r24
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	02 2e       	mov	r0, r18
    21aa:	02 c0       	rjmp	.+4      	; 0x21b0 <GPIO_writePin+0xe4>
    21ac:	88 0f       	add	r24, r24
    21ae:	99 1f       	adc	r25, r25
    21b0:	0a 94       	dec	r0
    21b2:	e2 f7       	brpl	.-8      	; 0x21ac <GPIO_writePin+0xe0>
    21b4:	84 2b       	or	r24, r20
    21b6:	8c 93       	st	X, r24
    21b8:	6c c0       	rjmp	.+216    	; 0x2292 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    21ba:	a8 e3       	ldi	r26, 0x38	; 56
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e8 e3       	ldi	r30, 0x38	; 56
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	48 2f       	mov	r20, r24
    21c6:	8a 81       	ldd	r24, Y+2	; 0x02
    21c8:	28 2f       	mov	r18, r24
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	02 2e       	mov	r0, r18
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <GPIO_writePin+0x10c>
    21d4:	88 0f       	add	r24, r24
    21d6:	99 1f       	adc	r25, r25
    21d8:	0a 94       	dec	r0
    21da:	e2 f7       	brpl	.-8      	; 0x21d4 <GPIO_writePin+0x108>
    21dc:	80 95       	com	r24
    21de:	84 23       	and	r24, r20
    21e0:	8c 93       	st	X, r24
    21e2:	57 c0       	rjmp	.+174    	; 0x2292 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	81 30       	cpi	r24, 0x01	; 1
    21e8:	a1 f4       	brne	.+40     	; 0x2212 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    21ea:	a5 e3       	ldi	r26, 0x35	; 53
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e5 e3       	ldi	r30, 0x35	; 53
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	48 2f       	mov	r20, r24
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	02 2e       	mov	r0, r18
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <GPIO_writePin+0x13c>
    2204:	88 0f       	add	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	0a 94       	dec	r0
    220a:	e2 f7       	brpl	.-8      	; 0x2204 <GPIO_writePin+0x138>
    220c:	84 2b       	or	r24, r20
    220e:	8c 93       	st	X, r24
    2210:	40 c0       	rjmp	.+128    	; 0x2292 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2212:	a5 e3       	ldi	r26, 0x35	; 53
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e5 e3       	ldi	r30, 0x35	; 53
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	48 2f       	mov	r20, r24
    221e:	8a 81       	ldd	r24, Y+2	; 0x02
    2220:	28 2f       	mov	r18, r24
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	02 2e       	mov	r0, r18
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <GPIO_writePin+0x164>
    222c:	88 0f       	add	r24, r24
    222e:	99 1f       	adc	r25, r25
    2230:	0a 94       	dec	r0
    2232:	e2 f7       	brpl	.-8      	; 0x222c <GPIO_writePin+0x160>
    2234:	80 95       	com	r24
    2236:	84 23       	and	r24, r20
    2238:	8c 93       	st	X, r24
    223a:	2b c0       	rjmp	.+86     	; 0x2292 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    223c:	8b 81       	ldd	r24, Y+3	; 0x03
    223e:	81 30       	cpi	r24, 0x01	; 1
    2240:	a1 f4       	brne	.+40     	; 0x226a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2242:	a2 e3       	ldi	r26, 0x32	; 50
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	e2 e3       	ldi	r30, 0x32	; 50
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	48 2f       	mov	r20, r24
    224e:	8a 81       	ldd	r24, Y+2	; 0x02
    2250:	28 2f       	mov	r18, r24
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	02 2e       	mov	r0, r18
    225a:	02 c0       	rjmp	.+4      	; 0x2260 <GPIO_writePin+0x194>
    225c:	88 0f       	add	r24, r24
    225e:	99 1f       	adc	r25, r25
    2260:	0a 94       	dec	r0
    2262:	e2 f7       	brpl	.-8      	; 0x225c <GPIO_writePin+0x190>
    2264:	84 2b       	or	r24, r20
    2266:	8c 93       	st	X, r24
    2268:	14 c0       	rjmp	.+40     	; 0x2292 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    226a:	a2 e3       	ldi	r26, 0x32	; 50
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	e2 e3       	ldi	r30, 0x32	; 50
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	48 2f       	mov	r20, r24
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	28 2f       	mov	r18, r24
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	02 2e       	mov	r0, r18
    2282:	02 c0       	rjmp	.+4      	; 0x2288 <GPIO_writePin+0x1bc>
    2284:	88 0f       	add	r24, r24
    2286:	99 1f       	adc	r25, r25
    2288:	0a 94       	dec	r0
    228a:	e2 f7       	brpl	.-8      	; 0x2284 <GPIO_writePin+0x1b8>
    228c:	80 95       	com	r24
    228e:	84 23       	and	r24, r20
    2290:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	08 95       	ret

000022a2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	00 d0       	rcall	.+0      	; 0x22a8 <GPIO_readPin+0x6>
    22a8:	00 d0       	rcall	.+0      	; 0x22aa <GPIO_readPin+0x8>
    22aa:	0f 92       	push	r0
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	8a 83       	std	Y+2, r24	; 0x02
    22b2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    22b4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    22b6:	8b 81       	ldd	r24, Y+3	; 0x03
    22b8:	88 30       	cpi	r24, 0x08	; 8
    22ba:	08 f0       	brcs	.+2      	; 0x22be <GPIO_readPin+0x1c>
    22bc:	84 c0       	rjmp	.+264    	; 0x23c6 <GPIO_readPin+0x124>
    22be:	8a 81       	ldd	r24, Y+2	; 0x02
    22c0:	84 30       	cpi	r24, 0x04	; 4
    22c2:	08 f0       	brcs	.+2      	; 0x22c6 <GPIO_readPin+0x24>
    22c4:	80 c0       	rjmp	.+256    	; 0x23c6 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	28 2f       	mov	r18, r24
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	3d 83       	std	Y+5, r19	; 0x05
    22ce:	2c 83       	std	Y+4, r18	; 0x04
    22d0:	4c 81       	ldd	r20, Y+4	; 0x04
    22d2:	5d 81       	ldd	r21, Y+5	; 0x05
    22d4:	41 30       	cpi	r20, 0x01	; 1
    22d6:	51 05       	cpc	r21, r1
    22d8:	79 f1       	breq	.+94     	; 0x2338 <GPIO_readPin+0x96>
    22da:	8c 81       	ldd	r24, Y+4	; 0x04
    22dc:	9d 81       	ldd	r25, Y+5	; 0x05
    22de:	82 30       	cpi	r24, 0x02	; 2
    22e0:	91 05       	cpc	r25, r1
    22e2:	34 f4       	brge	.+12     	; 0x22f0 <GPIO_readPin+0x4e>
    22e4:	2c 81       	ldd	r18, Y+4	; 0x04
    22e6:	3d 81       	ldd	r19, Y+5	; 0x05
    22e8:	21 15       	cp	r18, r1
    22ea:	31 05       	cpc	r19, r1
    22ec:	69 f0       	breq	.+26     	; 0x2308 <GPIO_readPin+0x66>
    22ee:	6b c0       	rjmp	.+214    	; 0x23c6 <GPIO_readPin+0x124>
    22f0:	4c 81       	ldd	r20, Y+4	; 0x04
    22f2:	5d 81       	ldd	r21, Y+5	; 0x05
    22f4:	42 30       	cpi	r20, 0x02	; 2
    22f6:	51 05       	cpc	r21, r1
    22f8:	b9 f1       	breq	.+110    	; 0x2368 <GPIO_readPin+0xc6>
    22fa:	8c 81       	ldd	r24, Y+4	; 0x04
    22fc:	9d 81       	ldd	r25, Y+5	; 0x05
    22fe:	83 30       	cpi	r24, 0x03	; 3
    2300:	91 05       	cpc	r25, r1
    2302:	09 f4       	brne	.+2      	; 0x2306 <GPIO_readPin+0x64>
    2304:	49 c0       	rjmp	.+146    	; 0x2398 <GPIO_readPin+0xf6>
    2306:	5f c0       	rjmp	.+190    	; 0x23c6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2308:	e9 e3       	ldi	r30, 0x39	; 57
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	28 2f       	mov	r18, r24
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	8b 81       	ldd	r24, Y+3	; 0x03
    2314:	88 2f       	mov	r24, r24
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	a9 01       	movw	r20, r18
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <GPIO_readPin+0x7e>
    231c:	55 95       	asr	r21
    231e:	47 95       	ror	r20
    2320:	8a 95       	dec	r24
    2322:	e2 f7       	brpl	.-8      	; 0x231c <GPIO_readPin+0x7a>
    2324:	ca 01       	movw	r24, r20
    2326:	81 70       	andi	r24, 0x01	; 1
    2328:	90 70       	andi	r25, 0x00	; 0
    232a:	88 23       	and	r24, r24
    232c:	19 f0       	breq	.+6      	; 0x2334 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	89 83       	std	Y+1, r24	; 0x01
    2332:	49 c0       	rjmp	.+146    	; 0x23c6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2334:	19 82       	std	Y+1, r1	; 0x01
    2336:	47 c0       	rjmp	.+142    	; 0x23c6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2338:	e6 e3       	ldi	r30, 0x36	; 54
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	28 2f       	mov	r18, r24
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	88 2f       	mov	r24, r24
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	a9 01       	movw	r20, r18
    234a:	02 c0       	rjmp	.+4      	; 0x2350 <GPIO_readPin+0xae>
    234c:	55 95       	asr	r21
    234e:	47 95       	ror	r20
    2350:	8a 95       	dec	r24
    2352:	e2 f7       	brpl	.-8      	; 0x234c <GPIO_readPin+0xaa>
    2354:	ca 01       	movw	r24, r20
    2356:	81 70       	andi	r24, 0x01	; 1
    2358:	90 70       	andi	r25, 0x00	; 0
    235a:	88 23       	and	r24, r24
    235c:	19 f0       	breq	.+6      	; 0x2364 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	89 83       	std	Y+1, r24	; 0x01
    2362:	31 c0       	rjmp	.+98     	; 0x23c6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2364:	19 82       	std	Y+1, r1	; 0x01
    2366:	2f c0       	rjmp	.+94     	; 0x23c6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2368:	e3 e3       	ldi	r30, 0x33	; 51
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	28 2f       	mov	r18, r24
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	8b 81       	ldd	r24, Y+3	; 0x03
    2374:	88 2f       	mov	r24, r24
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	a9 01       	movw	r20, r18
    237a:	02 c0       	rjmp	.+4      	; 0x2380 <GPIO_readPin+0xde>
    237c:	55 95       	asr	r21
    237e:	47 95       	ror	r20
    2380:	8a 95       	dec	r24
    2382:	e2 f7       	brpl	.-8      	; 0x237c <GPIO_readPin+0xda>
    2384:	ca 01       	movw	r24, r20
    2386:	81 70       	andi	r24, 0x01	; 1
    2388:	90 70       	andi	r25, 0x00	; 0
    238a:	88 23       	and	r24, r24
    238c:	19 f0       	breq	.+6      	; 0x2394 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	89 83       	std	Y+1, r24	; 0x01
    2392:	19 c0       	rjmp	.+50     	; 0x23c6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2394:	19 82       	std	Y+1, r1	; 0x01
    2396:	17 c0       	rjmp	.+46     	; 0x23c6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2398:	e0 e3       	ldi	r30, 0x30	; 48
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	28 2f       	mov	r18, r24
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	8b 81       	ldd	r24, Y+3	; 0x03
    23a4:	88 2f       	mov	r24, r24
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	a9 01       	movw	r20, r18
    23aa:	02 c0       	rjmp	.+4      	; 0x23b0 <GPIO_readPin+0x10e>
    23ac:	55 95       	asr	r21
    23ae:	47 95       	ror	r20
    23b0:	8a 95       	dec	r24
    23b2:	e2 f7       	brpl	.-8      	; 0x23ac <GPIO_readPin+0x10a>
    23b4:	ca 01       	movw	r24, r20
    23b6:	81 70       	andi	r24, 0x01	; 1
    23b8:	90 70       	andi	r25, 0x00	; 0
    23ba:	88 23       	and	r24, r24
    23bc:	19 f0       	breq	.+6      	; 0x23c4 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	89 83       	std	Y+1, r24	; 0x01
    23c2:	01 c0       	rjmp	.+2      	; 0x23c6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    23c4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	08 95       	ret

000023d8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    23d8:	df 93       	push	r29
    23da:	cf 93       	push	r28
    23dc:	00 d0       	rcall	.+0      	; 0x23de <GPIO_setupPortDirection+0x6>
    23de:	00 d0       	rcall	.+0      	; 0x23e0 <GPIO_setupPortDirection+0x8>
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	89 83       	std	Y+1, r24	; 0x01
    23e6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	84 30       	cpi	r24, 0x04	; 4
    23ec:	90 f5       	brcc	.+100    	; 0x2452 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	28 2f       	mov	r18, r24
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	3c 83       	std	Y+4, r19	; 0x04
    23f6:	2b 83       	std	Y+3, r18	; 0x03
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	9c 81       	ldd	r25, Y+4	; 0x04
    23fc:	81 30       	cpi	r24, 0x01	; 1
    23fe:	91 05       	cpc	r25, r1
    2400:	d1 f0       	breq	.+52     	; 0x2436 <GPIO_setupPortDirection+0x5e>
    2402:	2b 81       	ldd	r18, Y+3	; 0x03
    2404:	3c 81       	ldd	r19, Y+4	; 0x04
    2406:	22 30       	cpi	r18, 0x02	; 2
    2408:	31 05       	cpc	r19, r1
    240a:	2c f4       	brge	.+10     	; 0x2416 <GPIO_setupPortDirection+0x3e>
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	9c 81       	ldd	r25, Y+4	; 0x04
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	61 f0       	breq	.+24     	; 0x242c <GPIO_setupPortDirection+0x54>
    2414:	1e c0       	rjmp	.+60     	; 0x2452 <GPIO_setupPortDirection+0x7a>
    2416:	2b 81       	ldd	r18, Y+3	; 0x03
    2418:	3c 81       	ldd	r19, Y+4	; 0x04
    241a:	22 30       	cpi	r18, 0x02	; 2
    241c:	31 05       	cpc	r19, r1
    241e:	81 f0       	breq	.+32     	; 0x2440 <GPIO_setupPortDirection+0x68>
    2420:	8b 81       	ldd	r24, Y+3	; 0x03
    2422:	9c 81       	ldd	r25, Y+4	; 0x04
    2424:	83 30       	cpi	r24, 0x03	; 3
    2426:	91 05       	cpc	r25, r1
    2428:	81 f0       	breq	.+32     	; 0x244a <GPIO_setupPortDirection+0x72>
    242a:	13 c0       	rjmp	.+38     	; 0x2452 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    242c:	ea e3       	ldi	r30, 0x3A	; 58
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	8a 81       	ldd	r24, Y+2	; 0x02
    2432:	80 83       	st	Z, r24
    2434:	0e c0       	rjmp	.+28     	; 0x2452 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2436:	e7 e3       	ldi	r30, 0x37	; 55
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	8a 81       	ldd	r24, Y+2	; 0x02
    243c:	80 83       	st	Z, r24
    243e:	09 c0       	rjmp	.+18     	; 0x2452 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2440:	e4 e3       	ldi	r30, 0x34	; 52
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	8a 81       	ldd	r24, Y+2	; 0x02
    2446:	80 83       	st	Z, r24
    2448:	04 c0       	rjmp	.+8      	; 0x2452 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    244a:	e1 e3       	ldi	r30, 0x31	; 49
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	80 83       	st	Z, r24
			break;
		}
	}
}
    2452:	0f 90       	pop	r0
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	08 95       	ret

00002460 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2460:	df 93       	push	r29
    2462:	cf 93       	push	r28
    2464:	00 d0       	rcall	.+0      	; 0x2466 <GPIO_writePort+0x6>
    2466:	00 d0       	rcall	.+0      	; 0x2468 <GPIO_writePort+0x8>
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	89 83       	std	Y+1, r24	; 0x01
    246e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	84 30       	cpi	r24, 0x04	; 4
    2474:	90 f5       	brcc	.+100    	; 0x24da <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	28 2f       	mov	r18, r24
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	3c 83       	std	Y+4, r19	; 0x04
    247e:	2b 83       	std	Y+3, r18	; 0x03
    2480:	8b 81       	ldd	r24, Y+3	; 0x03
    2482:	9c 81       	ldd	r25, Y+4	; 0x04
    2484:	81 30       	cpi	r24, 0x01	; 1
    2486:	91 05       	cpc	r25, r1
    2488:	d1 f0       	breq	.+52     	; 0x24be <GPIO_writePort+0x5e>
    248a:	2b 81       	ldd	r18, Y+3	; 0x03
    248c:	3c 81       	ldd	r19, Y+4	; 0x04
    248e:	22 30       	cpi	r18, 0x02	; 2
    2490:	31 05       	cpc	r19, r1
    2492:	2c f4       	brge	.+10     	; 0x249e <GPIO_writePort+0x3e>
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	9c 81       	ldd	r25, Y+4	; 0x04
    2498:	00 97       	sbiw	r24, 0x00	; 0
    249a:	61 f0       	breq	.+24     	; 0x24b4 <GPIO_writePort+0x54>
    249c:	1e c0       	rjmp	.+60     	; 0x24da <GPIO_writePort+0x7a>
    249e:	2b 81       	ldd	r18, Y+3	; 0x03
    24a0:	3c 81       	ldd	r19, Y+4	; 0x04
    24a2:	22 30       	cpi	r18, 0x02	; 2
    24a4:	31 05       	cpc	r19, r1
    24a6:	81 f0       	breq	.+32     	; 0x24c8 <GPIO_writePort+0x68>
    24a8:	8b 81       	ldd	r24, Y+3	; 0x03
    24aa:	9c 81       	ldd	r25, Y+4	; 0x04
    24ac:	83 30       	cpi	r24, 0x03	; 3
    24ae:	91 05       	cpc	r25, r1
    24b0:	81 f0       	breq	.+32     	; 0x24d2 <GPIO_writePort+0x72>
    24b2:	13 c0       	rjmp	.+38     	; 0x24da <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    24b4:	eb e3       	ldi	r30, 0x3B	; 59
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ba:	80 83       	st	Z, r24
    24bc:	0e c0       	rjmp	.+28     	; 0x24da <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    24be:	e8 e3       	ldi	r30, 0x38	; 56
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	80 83       	st	Z, r24
    24c6:	09 c0       	rjmp	.+18     	; 0x24da <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    24c8:	e5 e3       	ldi	r30, 0x35	; 53
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	8a 81       	ldd	r24, Y+2	; 0x02
    24ce:	80 83       	st	Z, r24
    24d0:	04 c0       	rjmp	.+8      	; 0x24da <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    24d2:	e2 e3       	ldi	r30, 0x32	; 50
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	80 83       	st	Z, r24
			break;
		}
	}
}
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	08 95       	ret

000024e8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	00 d0       	rcall	.+0      	; 0x24ee <GPIO_readPort+0x6>
    24ee:	00 d0       	rcall	.+0      	; 0x24f0 <GPIO_readPort+0x8>
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    24f4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    24f6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    24f8:	8a 81       	ldd	r24, Y+2	; 0x02
    24fa:	84 30       	cpi	r24, 0x04	; 4
    24fc:	90 f5       	brcc	.+100    	; 0x2562 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    24fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	3c 83       	std	Y+4, r19	; 0x04
    2506:	2b 83       	std	Y+3, r18	; 0x03
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	9c 81       	ldd	r25, Y+4	; 0x04
    250c:	81 30       	cpi	r24, 0x01	; 1
    250e:	91 05       	cpc	r25, r1
    2510:	d1 f0       	breq	.+52     	; 0x2546 <GPIO_readPort+0x5e>
    2512:	2b 81       	ldd	r18, Y+3	; 0x03
    2514:	3c 81       	ldd	r19, Y+4	; 0x04
    2516:	22 30       	cpi	r18, 0x02	; 2
    2518:	31 05       	cpc	r19, r1
    251a:	2c f4       	brge	.+10     	; 0x2526 <GPIO_readPort+0x3e>
    251c:	8b 81       	ldd	r24, Y+3	; 0x03
    251e:	9c 81       	ldd	r25, Y+4	; 0x04
    2520:	00 97       	sbiw	r24, 0x00	; 0
    2522:	61 f0       	breq	.+24     	; 0x253c <GPIO_readPort+0x54>
    2524:	1e c0       	rjmp	.+60     	; 0x2562 <GPIO_readPort+0x7a>
    2526:	2b 81       	ldd	r18, Y+3	; 0x03
    2528:	3c 81       	ldd	r19, Y+4	; 0x04
    252a:	22 30       	cpi	r18, 0x02	; 2
    252c:	31 05       	cpc	r19, r1
    252e:	81 f0       	breq	.+32     	; 0x2550 <GPIO_readPort+0x68>
    2530:	8b 81       	ldd	r24, Y+3	; 0x03
    2532:	9c 81       	ldd	r25, Y+4	; 0x04
    2534:	83 30       	cpi	r24, 0x03	; 3
    2536:	91 05       	cpc	r25, r1
    2538:	81 f0       	breq	.+32     	; 0x255a <GPIO_readPort+0x72>
    253a:	13 c0       	rjmp	.+38     	; 0x2562 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    253c:	e9 e3       	ldi	r30, 0x39	; 57
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	89 83       	std	Y+1, r24	; 0x01
    2544:	0e c0       	rjmp	.+28     	; 0x2562 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2546:	e6 e3       	ldi	r30, 0x36	; 54
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	80 81       	ld	r24, Z
    254c:	89 83       	std	Y+1, r24	; 0x01
    254e:	09 c0       	rjmp	.+18     	; 0x2562 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2550:	e3 e3       	ldi	r30, 0x33	; 51
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	89 83       	std	Y+1, r24	; 0x01
    2558:	04 c0       	rjmp	.+8      	; 0x2562 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    255a:	e0 e3       	ldi	r30, 0x30	; 48
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	80 81       	ld	r24, Z
    2560:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2562:	89 81       	ldd	r24, Y+1	; 0x01
}
    2564:	0f 90       	pop	r0
    2566:	0f 90       	pop	r0
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	cf 91       	pop	r28
    256e:	df 91       	pop	r29
    2570:	08 95       	ret

00002572 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	00 d0       	rcall	.+0      	; 0x2578 <KEYPAD_getPressedKey+0x6>
    2578:	0f 92       	push	r0
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    257e:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2580:	1b 82       	std	Y+3, r1	; 0x03
    2582:	43 c0       	rjmp	.+134    	; 0x260a <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	60 e0       	ldi	r22, 0x00	; 0
    2588:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    258c:	8b 81       	ldd	r24, Y+3	; 0x03
    258e:	98 2f       	mov	r25, r24
    2590:	9c 5f       	subi	r25, 0xFC	; 252
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	69 2f       	mov	r22, r25
    2596:	41 e0       	ldi	r20, 0x01	; 1
    2598:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    259c:	8b 81       	ldd	r24, Y+3	; 0x03
    259e:	88 2f       	mov	r24, r24
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	9c 01       	movw	r18, r24
    25a4:	2c 5f       	subi	r18, 0xFC	; 252
    25a6:	3f 4f       	sbci	r19, 0xFF	; 255
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	02 c0       	rjmp	.+4      	; 0x25b2 <KEYPAD_getPressedKey+0x40>
    25ae:	88 0f       	add	r24, r24
    25b0:	99 1f       	adc	r25, r25
    25b2:	2a 95       	dec	r18
    25b4:	e2 f7       	brpl	.-8      	; 0x25ae <KEYPAD_getPressedKey+0x3c>
    25b6:	80 95       	com	r24
    25b8:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	69 81       	ldd	r22, Y+1	; 0x01
    25be:	0e 94 30 12 	call	0x2460	; 0x2460 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    25c2:	1a 82       	std	Y+2, r1	; 0x02
    25c4:	1c c0       	rjmp	.+56     	; 0x25fe <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	6a 81       	ldd	r22, Y+2	; 0x02
    25ca:	0e 94 51 11 	call	0x22a2	; 0x22a2 <GPIO_readPin>
    25ce:	88 23       	and	r24, r24
    25d0:	99 f4       	brne	.+38     	; 0x25f8 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    25d2:	8a 81       	ldd	r24, Y+2	; 0x02
    25d4:	88 2f       	mov	r24, r24
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	88 0f       	add	r24, r24
    25da:	99 1f       	adc	r25, r25
    25dc:	88 0f       	add	r24, r24
    25de:	99 1f       	adc	r25, r25
    25e0:	98 2f       	mov	r25, r24
    25e2:	8b 81       	ldd	r24, Y+3	; 0x03
    25e4:	89 0f       	add	r24, r25
    25e6:	8f 5f       	subi	r24, 0xFF	; 255
    25e8:	0e 94 0a 13 	call	0x2614	; 0x2614 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	cf 91       	pop	r28
    25f4:	df 91       	pop	r29
    25f6:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    25f8:	8a 81       	ldd	r24, Y+2	; 0x02
    25fa:	8f 5f       	subi	r24, 0xFF	; 255
    25fc:	8a 83       	std	Y+2, r24	; 0x02
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	84 30       	cpi	r24, 0x04	; 4
    2602:	08 f3       	brcs	.-62     	; 0x25c6 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2604:	8b 81       	ldd	r24, Y+3	; 0x03
    2606:	8f 5f       	subi	r24, 0xFF	; 255
    2608:	8b 83       	std	Y+3, r24	; 0x03
    260a:	8b 81       	ldd	r24, Y+3	; 0x03
    260c:	84 30       	cpi	r24, 0x04	; 4
    260e:	08 f4       	brcc	.+2      	; 0x2612 <KEYPAD_getPressedKey+0xa0>
    2610:	b9 cf       	rjmp	.-142    	; 0x2584 <KEYPAD_getPressedKey+0x12>
    2612:	b6 cf       	rjmp	.-148    	; 0x2580 <KEYPAD_getPressedKey+0xe>

00002614 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2614:	df 93       	push	r29
    2616:	cf 93       	push	r28
    2618:	00 d0       	rcall	.+0      	; 0x261a <KEYPAD_4x4_adjustKeyNumber+0x6>
    261a:	00 d0       	rcall	.+0      	; 0x261c <KEYPAD_4x4_adjustKeyNumber+0x8>
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
    2620:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2622:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2624:	8a 81       	ldd	r24, Y+2	; 0x02
    2626:	28 2f       	mov	r18, r24
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	3c 83       	std	Y+4, r19	; 0x04
    262c:	2b 83       	std	Y+3, r18	; 0x03
    262e:	8b 81       	ldd	r24, Y+3	; 0x03
    2630:	9c 81       	ldd	r25, Y+4	; 0x04
    2632:	88 30       	cpi	r24, 0x08	; 8
    2634:	91 05       	cpc	r25, r1
    2636:	09 f4       	brne	.+2      	; 0x263a <KEYPAD_4x4_adjustKeyNumber+0x26>
    2638:	70 c0       	rjmp	.+224    	; 0x271a <KEYPAD_4x4_adjustKeyNumber+0x106>
    263a:	2b 81       	ldd	r18, Y+3	; 0x03
    263c:	3c 81       	ldd	r19, Y+4	; 0x04
    263e:	29 30       	cpi	r18, 0x09	; 9
    2640:	31 05       	cpc	r19, r1
    2642:	5c f5       	brge	.+86     	; 0x269a <KEYPAD_4x4_adjustKeyNumber+0x86>
    2644:	8b 81       	ldd	r24, Y+3	; 0x03
    2646:	9c 81       	ldd	r25, Y+4	; 0x04
    2648:	84 30       	cpi	r24, 0x04	; 4
    264a:	91 05       	cpc	r25, r1
    264c:	09 f4       	brne	.+2      	; 0x2650 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    264e:	59 c0       	rjmp	.+178    	; 0x2702 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2650:	2b 81       	ldd	r18, Y+3	; 0x03
    2652:	3c 81       	ldd	r19, Y+4	; 0x04
    2654:	25 30       	cpi	r18, 0x05	; 5
    2656:	31 05       	cpc	r19, r1
    2658:	9c f4       	brge	.+38     	; 0x2680 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    265a:	8b 81       	ldd	r24, Y+3	; 0x03
    265c:	9c 81       	ldd	r25, Y+4	; 0x04
    265e:	82 30       	cpi	r24, 0x02	; 2
    2660:	91 05       	cpc	r25, r1
    2662:	09 f4       	brne	.+2      	; 0x2666 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2664:	48 c0       	rjmp	.+144    	; 0x26f6 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2666:	2b 81       	ldd	r18, Y+3	; 0x03
    2668:	3c 81       	ldd	r19, Y+4	; 0x04
    266a:	23 30       	cpi	r18, 0x03	; 3
    266c:	31 05       	cpc	r19, r1
    266e:	0c f0       	brlt	.+2      	; 0x2672 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2670:	45 c0       	rjmp	.+138    	; 0x26fc <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2672:	8b 81       	ldd	r24, Y+3	; 0x03
    2674:	9c 81       	ldd	r25, Y+4	; 0x04
    2676:	81 30       	cpi	r24, 0x01	; 1
    2678:	91 05       	cpc	r25, r1
    267a:	09 f4       	brne	.+2      	; 0x267e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    267c:	39 c0       	rjmp	.+114    	; 0x26f0 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    267e:	67 c0       	rjmp	.+206    	; 0x274e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2680:	2b 81       	ldd	r18, Y+3	; 0x03
    2682:	3c 81       	ldd	r19, Y+4	; 0x04
    2684:	26 30       	cpi	r18, 0x06	; 6
    2686:	31 05       	cpc	r19, r1
    2688:	09 f4       	brne	.+2      	; 0x268c <KEYPAD_4x4_adjustKeyNumber+0x78>
    268a:	41 c0       	rjmp	.+130    	; 0x270e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    268c:	8b 81       	ldd	r24, Y+3	; 0x03
    268e:	9c 81       	ldd	r25, Y+4	; 0x04
    2690:	87 30       	cpi	r24, 0x07	; 7
    2692:	91 05       	cpc	r25, r1
    2694:	0c f0       	brlt	.+2      	; 0x2698 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2696:	3e c0       	rjmp	.+124    	; 0x2714 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2698:	37 c0       	rjmp	.+110    	; 0x2708 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    269a:	2b 81       	ldd	r18, Y+3	; 0x03
    269c:	3c 81       	ldd	r19, Y+4	; 0x04
    269e:	2c 30       	cpi	r18, 0x0C	; 12
    26a0:	31 05       	cpc	r19, r1
    26a2:	09 f4       	brne	.+2      	; 0x26a6 <KEYPAD_4x4_adjustKeyNumber+0x92>
    26a4:	46 c0       	rjmp	.+140    	; 0x2732 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	9c 81       	ldd	r25, Y+4	; 0x04
    26aa:	8d 30       	cpi	r24, 0x0D	; 13
    26ac:	91 05       	cpc	r25, r1
    26ae:	5c f4       	brge	.+22     	; 0x26c6 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    26b0:	2b 81       	ldd	r18, Y+3	; 0x03
    26b2:	3c 81       	ldd	r19, Y+4	; 0x04
    26b4:	2a 30       	cpi	r18, 0x0A	; 10
    26b6:	31 05       	cpc	r19, r1
    26b8:	b1 f1       	breq	.+108    	; 0x2726 <KEYPAD_4x4_adjustKeyNumber+0x112>
    26ba:	8b 81       	ldd	r24, Y+3	; 0x03
    26bc:	9c 81       	ldd	r25, Y+4	; 0x04
    26be:	8b 30       	cpi	r24, 0x0B	; 11
    26c0:	91 05       	cpc	r25, r1
    26c2:	a4 f5       	brge	.+104    	; 0x272c <KEYPAD_4x4_adjustKeyNumber+0x118>
    26c4:	2d c0       	rjmp	.+90     	; 0x2720 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    26c6:	2b 81       	ldd	r18, Y+3	; 0x03
    26c8:	3c 81       	ldd	r19, Y+4	; 0x04
    26ca:	2e 30       	cpi	r18, 0x0E	; 14
    26cc:	31 05       	cpc	r19, r1
    26ce:	b9 f1       	breq	.+110    	; 0x273e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    26d0:	8b 81       	ldd	r24, Y+3	; 0x03
    26d2:	9c 81       	ldd	r25, Y+4	; 0x04
    26d4:	8e 30       	cpi	r24, 0x0E	; 14
    26d6:	91 05       	cpc	r25, r1
    26d8:	7c f1       	brlt	.+94     	; 0x2738 <KEYPAD_4x4_adjustKeyNumber+0x124>
    26da:	2b 81       	ldd	r18, Y+3	; 0x03
    26dc:	3c 81       	ldd	r19, Y+4	; 0x04
    26de:	2f 30       	cpi	r18, 0x0F	; 15
    26e0:	31 05       	cpc	r19, r1
    26e2:	79 f1       	breq	.+94     	; 0x2742 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    26e4:	8b 81       	ldd	r24, Y+3	; 0x03
    26e6:	9c 81       	ldd	r25, Y+4	; 0x04
    26e8:	80 31       	cpi	r24, 0x10	; 16
    26ea:	91 05       	cpc	r25, r1
    26ec:	69 f1       	breq	.+90     	; 0x2748 <KEYPAD_4x4_adjustKeyNumber+0x134>
    26ee:	2f c0       	rjmp	.+94     	; 0x274e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    26f0:	87 e0       	ldi	r24, 0x07	; 7
    26f2:	89 83       	std	Y+1, r24	; 0x01
    26f4:	2e c0       	rjmp	.+92     	; 0x2752 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    26f6:	88 e0       	ldi	r24, 0x08	; 8
    26f8:	89 83       	std	Y+1, r24	; 0x01
    26fa:	2b c0       	rjmp	.+86     	; 0x2752 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    26fc:	89 e0       	ldi	r24, 0x09	; 9
    26fe:	89 83       	std	Y+1, r24	; 0x01
    2700:	28 c0       	rjmp	.+80     	; 0x2752 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2702:	85 e2       	ldi	r24, 0x25	; 37
    2704:	89 83       	std	Y+1, r24	; 0x01
    2706:	25 c0       	rjmp	.+74     	; 0x2752 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2708:	84 e0       	ldi	r24, 0x04	; 4
    270a:	89 83       	std	Y+1, r24	; 0x01
    270c:	22 c0       	rjmp	.+68     	; 0x2752 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    270e:	85 e0       	ldi	r24, 0x05	; 5
    2710:	89 83       	std	Y+1, r24	; 0x01
    2712:	1f c0       	rjmp	.+62     	; 0x2752 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2714:	86 e0       	ldi	r24, 0x06	; 6
    2716:	89 83       	std	Y+1, r24	; 0x01
    2718:	1c c0       	rjmp	.+56     	; 0x2752 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    271a:	8a e2       	ldi	r24, 0x2A	; 42
    271c:	89 83       	std	Y+1, r24	; 0x01
    271e:	19 c0       	rjmp	.+50     	; 0x2752 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	89 83       	std	Y+1, r24	; 0x01
    2724:	16 c0       	rjmp	.+44     	; 0x2752 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2726:	82 e0       	ldi	r24, 0x02	; 2
    2728:	89 83       	std	Y+1, r24	; 0x01
    272a:	13 c0       	rjmp	.+38     	; 0x2752 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    272c:	83 e0       	ldi	r24, 0x03	; 3
    272e:	89 83       	std	Y+1, r24	; 0x01
    2730:	10 c0       	rjmp	.+32     	; 0x2752 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2732:	8d e2       	ldi	r24, 0x2D	; 45
    2734:	89 83       	std	Y+1, r24	; 0x01
    2736:	0d c0       	rjmp	.+26     	; 0x2752 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = '#';  /* ASCII of Enter */
    2738:	83 e2       	ldi	r24, 0x23	; 35
    273a:	89 83       	std	Y+1, r24	; 0x01
    273c:	0a c0       	rjmp	.+20     	; 0x2752 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    273e:	19 82       	std	Y+1, r1	; 0x01
    2740:	08 c0       	rjmp	.+16     	; 0x2752 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2742:	8d e3       	ldi	r24, 0x3D	; 61
    2744:	89 83       	std	Y+1, r24	; 0x01
    2746:	05 c0       	rjmp	.+10     	; 0x2752 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2748:	8b e2       	ldi	r24, 0x2B	; 43
    274a:	89 83       	std	Y+1, r24	; 0x01
    274c:	02 c0       	rjmp	.+4      	; 0x2752 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    274e:	8a 81       	ldd	r24, Y+2	; 0x02
    2750:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2752:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2754:	0f 90       	pop	r0
    2756:	0f 90       	pop	r0
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	08 95       	ret

00002762 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	cd b7       	in	r28, 0x3d	; 61
    2768:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	61 e0       	ldi	r22, 0x01	; 1
    276e:	41 e0       	ldi	r20, 0x01	; 1
    2770:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	62 e0       	ldi	r22, 0x02	; 2
    2778:	41 e0       	ldi	r20, 0x01	; 1
    277a:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	63 e0       	ldi	r22, 0x03	; 3
    2782:	41 e0       	ldi	r20, 0x01	; 1
    2784:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2788:	82 e0       	ldi	r24, 0x02	; 2
    278a:	6f ef       	ldi	r22, 0xFF	; 255
    278c:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2790:	88 e3       	ldi	r24, 0x38	; 56
    2792:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2796:	8c e0       	ldi	r24, 0x0C	; 12
    2798:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_sendCommand>
}
    27a2:	cf 91       	pop	r28
    27a4:	df 91       	pop	r29
    27a6:	08 95       	ret

000027a8 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    27a8:	df 93       	push	r29
    27aa:	cf 93       	push	r28
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
    27b0:	e9 97       	sbiw	r28, 0x39	; 57
    27b2:	0f b6       	in	r0, 0x3f	; 63
    27b4:	f8 94       	cli
    27b6:	de bf       	out	0x3e, r29	; 62
    27b8:	0f be       	out	0x3f, r0	; 63
    27ba:	cd bf       	out	0x3d, r28	; 61
    27bc:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	61 e0       	ldi	r22, 0x01	; 1
    27c2:	40 e0       	ldi	r20, 0x00	; 0
    27c4:	0e 94 66 10 	call	0x20cc	; 0x20cc <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	62 e0       	ldi	r22, 0x02	; 2
    27cc:	40 e0       	ldi	r20, 0x00	; 0
    27ce:	0e 94 66 10 	call	0x20cc	; 0x20cc <GPIO_writePin>
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	a0 e8       	ldi	r26, 0x80	; 128
    27d8:	bf e3       	ldi	r27, 0x3F	; 63
    27da:	8d ab       	std	Y+53, r24	; 0x35
    27dc:	9e ab       	std	Y+54, r25	; 0x36
    27de:	af ab       	std	Y+55, r26	; 0x37
    27e0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e2:	6d a9       	ldd	r22, Y+53	; 0x35
    27e4:	7e a9       	ldd	r23, Y+54	; 0x36
    27e6:	8f a9       	ldd	r24, Y+55	; 0x37
    27e8:	98 ad       	ldd	r25, Y+56	; 0x38
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	4a ef       	ldi	r20, 0xFA	; 250
    27f0:	54 e4       	ldi	r21, 0x44	; 68
    27f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	89 ab       	std	Y+49, r24	; 0x31
    27fc:	9a ab       	std	Y+50, r25	; 0x32
    27fe:	ab ab       	std	Y+51, r26	; 0x33
    2800:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2802:	69 a9       	ldd	r22, Y+49	; 0x31
    2804:	7a a9       	ldd	r23, Y+50	; 0x32
    2806:	8b a9       	ldd	r24, Y+51	; 0x33
    2808:	9c a9       	ldd	r25, Y+52	; 0x34
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	40 e8       	ldi	r20, 0x80	; 128
    2810:	5f e3       	ldi	r21, 0x3F	; 63
    2812:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2816:	88 23       	and	r24, r24
    2818:	2c f4       	brge	.+10     	; 0x2824 <LCD_sendCommand+0x7c>
		__ticks = 1;
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	98 ab       	std	Y+48, r25	; 0x30
    2820:	8f a7       	std	Y+47, r24	; 0x2f
    2822:	3f c0       	rjmp	.+126    	; 0x28a2 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    2824:	69 a9       	ldd	r22, Y+49	; 0x31
    2826:	7a a9       	ldd	r23, Y+50	; 0x32
    2828:	8b a9       	ldd	r24, Y+51	; 0x33
    282a:	9c a9       	ldd	r25, Y+52	; 0x34
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	3f ef       	ldi	r19, 0xFF	; 255
    2830:	4f e7       	ldi	r20, 0x7F	; 127
    2832:	57 e4       	ldi	r21, 0x47	; 71
    2834:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2838:	18 16       	cp	r1, r24
    283a:	4c f5       	brge	.+82     	; 0x288e <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    283c:	6d a9       	ldd	r22, Y+53	; 0x35
    283e:	7e a9       	ldd	r23, Y+54	; 0x36
    2840:	8f a9       	ldd	r24, Y+55	; 0x37
    2842:	98 ad       	ldd	r25, Y+56	; 0x38
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e2       	ldi	r20, 0x20	; 32
    284a:	51 e4       	ldi	r21, 0x41	; 65
    284c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	bc 01       	movw	r22, r24
    2856:	cd 01       	movw	r24, r26
    2858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	98 ab       	std	Y+48, r25	; 0x30
    2862:	8f a7       	std	Y+47, r24	; 0x2f
    2864:	0f c0       	rjmp	.+30     	; 0x2884 <LCD_sendCommand+0xdc>
    2866:	88 ec       	ldi	r24, 0xC8	; 200
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	9e a7       	std	Y+46, r25	; 0x2e
    286c:	8d a7       	std	Y+45, r24	; 0x2d
    286e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2870:	9e a5       	ldd	r25, Y+46	; 0x2e
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	f1 f7       	brne	.-4      	; 0x2872 <LCD_sendCommand+0xca>
    2876:	9e a7       	std	Y+46, r25	; 0x2e
    2878:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    287a:	8f a5       	ldd	r24, Y+47	; 0x2f
    287c:	98 a9       	ldd	r25, Y+48	; 0x30
    287e:	01 97       	sbiw	r24, 0x01	; 1
    2880:	98 ab       	std	Y+48, r25	; 0x30
    2882:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2884:	8f a5       	ldd	r24, Y+47	; 0x2f
    2886:	98 a9       	ldd	r25, Y+48	; 0x30
    2888:	00 97       	sbiw	r24, 0x00	; 0
    288a:	69 f7       	brne	.-38     	; 0x2866 <LCD_sendCommand+0xbe>
    288c:	14 c0       	rjmp	.+40     	; 0x28b6 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    288e:	69 a9       	ldd	r22, Y+49	; 0x31
    2890:	7a a9       	ldd	r23, Y+50	; 0x32
    2892:	8b a9       	ldd	r24, Y+51	; 0x33
    2894:	9c a9       	ldd	r25, Y+52	; 0x34
    2896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	98 ab       	std	Y+48, r25	; 0x30
    28a0:	8f a7       	std	Y+47, r24	; 0x2f
    28a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    28a4:	98 a9       	ldd	r25, Y+48	; 0x30
    28a6:	9c a7       	std	Y+44, r25	; 0x2c
    28a8:	8b a7       	std	Y+43, r24	; 0x2b
    28aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    28ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	f1 f7       	brne	.-4      	; 0x28ae <LCD_sendCommand+0x106>
    28b2:	9c a7       	std	Y+44, r25	; 0x2c
    28b4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	63 e0       	ldi	r22, 0x03	; 3
    28ba:	41 e0       	ldi	r20, 0x01	; 1
    28bc:	0e 94 66 10 	call	0x20cc	; 0x20cc <GPIO_writePin>
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	a0 e8       	ldi	r26, 0x80	; 128
    28c6:	bf e3       	ldi	r27, 0x3F	; 63
    28c8:	8f a3       	std	Y+39, r24	; 0x27
    28ca:	98 a7       	std	Y+40, r25	; 0x28
    28cc:	a9 a7       	std	Y+41, r26	; 0x29
    28ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d0:	6f a1       	ldd	r22, Y+39	; 0x27
    28d2:	78 a5       	ldd	r23, Y+40	; 0x28
    28d4:	89 a5       	ldd	r24, Y+41	; 0x29
    28d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	4a ef       	ldi	r20, 0xFA	; 250
    28de:	54 e4       	ldi	r21, 0x44	; 68
    28e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	8b a3       	std	Y+35, r24	; 0x23
    28ea:	9c a3       	std	Y+36, r25	; 0x24
    28ec:	ad a3       	std	Y+37, r26	; 0x25
    28ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28f0:	6b a1       	ldd	r22, Y+35	; 0x23
    28f2:	7c a1       	ldd	r23, Y+36	; 0x24
    28f4:	8d a1       	ldd	r24, Y+37	; 0x25
    28f6:	9e a1       	ldd	r25, Y+38	; 0x26
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 e8       	ldi	r20, 0x80	; 128
    28fe:	5f e3       	ldi	r21, 0x3F	; 63
    2900:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2904:	88 23       	and	r24, r24
    2906:	2c f4       	brge	.+10     	; 0x2912 <LCD_sendCommand+0x16a>
		__ticks = 1;
    2908:	81 e0       	ldi	r24, 0x01	; 1
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	9a a3       	std	Y+34, r25	; 0x22
    290e:	89 a3       	std	Y+33, r24	; 0x21
    2910:	3f c0       	rjmp	.+126    	; 0x2990 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    2912:	6b a1       	ldd	r22, Y+35	; 0x23
    2914:	7c a1       	ldd	r23, Y+36	; 0x24
    2916:	8d a1       	ldd	r24, Y+37	; 0x25
    2918:	9e a1       	ldd	r25, Y+38	; 0x26
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	3f ef       	ldi	r19, 0xFF	; 255
    291e:	4f e7       	ldi	r20, 0x7F	; 127
    2920:	57 e4       	ldi	r21, 0x47	; 71
    2922:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2926:	18 16       	cp	r1, r24
    2928:	4c f5       	brge	.+82     	; 0x297c <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    292a:	6f a1       	ldd	r22, Y+39	; 0x27
    292c:	78 a5       	ldd	r23, Y+40	; 0x28
    292e:	89 a5       	ldd	r24, Y+41	; 0x29
    2930:	9a a5       	ldd	r25, Y+42	; 0x2a
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	40 e2       	ldi	r20, 0x20	; 32
    2938:	51 e4       	ldi	r21, 0x41	; 65
    293a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	bc 01       	movw	r22, r24
    2944:	cd 01       	movw	r24, r26
    2946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294a:	dc 01       	movw	r26, r24
    294c:	cb 01       	movw	r24, r22
    294e:	9a a3       	std	Y+34, r25	; 0x22
    2950:	89 a3       	std	Y+33, r24	; 0x21
    2952:	0f c0       	rjmp	.+30     	; 0x2972 <LCD_sendCommand+0x1ca>
    2954:	88 ec       	ldi	r24, 0xC8	; 200
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	98 a3       	std	Y+32, r25	; 0x20
    295a:	8f 8f       	std	Y+31, r24	; 0x1f
    295c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    295e:	98 a1       	ldd	r25, Y+32	; 0x20
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	f1 f7       	brne	.-4      	; 0x2960 <LCD_sendCommand+0x1b8>
    2964:	98 a3       	std	Y+32, r25	; 0x20
    2966:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2968:	89 a1       	ldd	r24, Y+33	; 0x21
    296a:	9a a1       	ldd	r25, Y+34	; 0x22
    296c:	01 97       	sbiw	r24, 0x01	; 1
    296e:	9a a3       	std	Y+34, r25	; 0x22
    2970:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2972:	89 a1       	ldd	r24, Y+33	; 0x21
    2974:	9a a1       	ldd	r25, Y+34	; 0x22
    2976:	00 97       	sbiw	r24, 0x00	; 0
    2978:	69 f7       	brne	.-38     	; 0x2954 <LCD_sendCommand+0x1ac>
    297a:	14 c0       	rjmp	.+40     	; 0x29a4 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    297c:	6b a1       	ldd	r22, Y+35	; 0x23
    297e:	7c a1       	ldd	r23, Y+36	; 0x24
    2980:	8d a1       	ldd	r24, Y+37	; 0x25
    2982:	9e a1       	ldd	r25, Y+38	; 0x26
    2984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	9a a3       	std	Y+34, r25	; 0x22
    298e:	89 a3       	std	Y+33, r24	; 0x21
    2990:	89 a1       	ldd	r24, Y+33	; 0x21
    2992:	9a a1       	ldd	r25, Y+34	; 0x22
    2994:	9e 8f       	std	Y+30, r25	; 0x1e
    2996:	8d 8f       	std	Y+29, r24	; 0x1d
    2998:	8d 8d       	ldd	r24, Y+29	; 0x1d
    299a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	f1 f7       	brne	.-4      	; 0x299c <LCD_sendCommand+0x1f4>
    29a0:	9e 8f       	std	Y+30, r25	; 0x1e
    29a2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    29a4:	82 e0       	ldi	r24, 0x02	; 2
    29a6:	69 ad       	ldd	r22, Y+57	; 0x39
    29a8:	0e 94 30 12 	call	0x2460	; 0x2460 <GPIO_writePort>
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	a0 e8       	ldi	r26, 0x80	; 128
    29b2:	bf e3       	ldi	r27, 0x3F	; 63
    29b4:	89 8f       	std	Y+25, r24	; 0x19
    29b6:	9a 8f       	std	Y+26, r25	; 0x1a
    29b8:	ab 8f       	std	Y+27, r26	; 0x1b
    29ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29bc:	69 8d       	ldd	r22, Y+25	; 0x19
    29be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	4a ef       	ldi	r20, 0xFA	; 250
    29ca:	54 e4       	ldi	r21, 0x44	; 68
    29cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	8d 8b       	std	Y+21, r24	; 0x15
    29d6:	9e 8b       	std	Y+22, r25	; 0x16
    29d8:	af 8b       	std	Y+23, r26	; 0x17
    29da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29dc:	6d 89       	ldd	r22, Y+21	; 0x15
    29de:	7e 89       	ldd	r23, Y+22	; 0x16
    29e0:	8f 89       	ldd	r24, Y+23	; 0x17
    29e2:	98 8d       	ldd	r25, Y+24	; 0x18
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	40 e8       	ldi	r20, 0x80	; 128
    29ea:	5f e3       	ldi	r21, 0x3F	; 63
    29ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f0:	88 23       	and	r24, r24
    29f2:	2c f4       	brge	.+10     	; 0x29fe <LCD_sendCommand+0x256>
		__ticks = 1;
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	9c 8b       	std	Y+20, r25	; 0x14
    29fa:	8b 8b       	std	Y+19, r24	; 0x13
    29fc:	3f c0       	rjmp	.+126    	; 0x2a7c <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    29fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2a00:	7e 89       	ldd	r23, Y+22	; 0x16
    2a02:	8f 89       	ldd	r24, Y+23	; 0x17
    2a04:	98 8d       	ldd	r25, Y+24	; 0x18
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	3f ef       	ldi	r19, 0xFF	; 255
    2a0a:	4f e7       	ldi	r20, 0x7F	; 127
    2a0c:	57 e4       	ldi	r21, 0x47	; 71
    2a0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a12:	18 16       	cp	r1, r24
    2a14:	4c f5       	brge	.+82     	; 0x2a68 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a16:	69 8d       	ldd	r22, Y+25	; 0x19
    2a18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	40 e2       	ldi	r20, 0x20	; 32
    2a24:	51 e4       	ldi	r21, 0x41	; 65
    2a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	bc 01       	movw	r22, r24
    2a30:	cd 01       	movw	r24, r26
    2a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	9c 8b       	std	Y+20, r25	; 0x14
    2a3c:	8b 8b       	std	Y+19, r24	; 0x13
    2a3e:	0f c0       	rjmp	.+30     	; 0x2a5e <LCD_sendCommand+0x2b6>
    2a40:	88 ec       	ldi	r24, 0xC8	; 200
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	9a 8b       	std	Y+18, r25	; 0x12
    2a46:	89 8b       	std	Y+17, r24	; 0x11
    2a48:	89 89       	ldd	r24, Y+17	; 0x11
    2a4a:	9a 89       	ldd	r25, Y+18	; 0x12
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	f1 f7       	brne	.-4      	; 0x2a4c <LCD_sendCommand+0x2a4>
    2a50:	9a 8b       	std	Y+18, r25	; 0x12
    2a52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a54:	8b 89       	ldd	r24, Y+19	; 0x13
    2a56:	9c 89       	ldd	r25, Y+20	; 0x14
    2a58:	01 97       	sbiw	r24, 0x01	; 1
    2a5a:	9c 8b       	std	Y+20, r25	; 0x14
    2a5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a60:	9c 89       	ldd	r25, Y+20	; 0x14
    2a62:	00 97       	sbiw	r24, 0x00	; 0
    2a64:	69 f7       	brne	.-38     	; 0x2a40 <LCD_sendCommand+0x298>
    2a66:	14 c0       	rjmp	.+40     	; 0x2a90 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a68:	6d 89       	ldd	r22, Y+21	; 0x15
    2a6a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a6c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a6e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	9c 8b       	std	Y+20, r25	; 0x14
    2a7a:	8b 8b       	std	Y+19, r24	; 0x13
    2a7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a80:	98 8b       	std	Y+16, r25	; 0x10
    2a82:	8f 87       	std	Y+15, r24	; 0x0f
    2a84:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a86:	98 89       	ldd	r25, Y+16	; 0x10
    2a88:	01 97       	sbiw	r24, 0x01	; 1
    2a8a:	f1 f7       	brne	.-4      	; 0x2a88 <LCD_sendCommand+0x2e0>
    2a8c:	98 8b       	std	Y+16, r25	; 0x10
    2a8e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	63 e0       	ldi	r22, 0x03	; 3
    2a94:	40 e0       	ldi	r20, 0x00	; 0
    2a96:	0e 94 66 10 	call	0x20cc	; 0x20cc <GPIO_writePin>
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	a0 e8       	ldi	r26, 0x80	; 128
    2aa0:	bf e3       	ldi	r27, 0x3F	; 63
    2aa2:	8b 87       	std	Y+11, r24	; 0x0b
    2aa4:	9c 87       	std	Y+12, r25	; 0x0c
    2aa6:	ad 87       	std	Y+13, r26	; 0x0d
    2aa8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aac:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	4a ef       	ldi	r20, 0xFA	; 250
    2ab8:	54 e4       	ldi	r21, 0x44	; 68
    2aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	8f 83       	std	Y+7, r24	; 0x07
    2ac4:	98 87       	std	Y+8, r25	; 0x08
    2ac6:	a9 87       	std	Y+9, r26	; 0x09
    2ac8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aca:	6f 81       	ldd	r22, Y+7	; 0x07
    2acc:	78 85       	ldd	r23, Y+8	; 0x08
    2ace:	89 85       	ldd	r24, Y+9	; 0x09
    2ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	40 e8       	ldi	r20, 0x80	; 128
    2ad8:	5f e3       	ldi	r21, 0x3F	; 63
    2ada:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ade:	88 23       	and	r24, r24
    2ae0:	2c f4       	brge	.+10     	; 0x2aec <LCD_sendCommand+0x344>
		__ticks = 1;
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	9e 83       	std	Y+6, r25	; 0x06
    2ae8:	8d 83       	std	Y+5, r24	; 0x05
    2aea:	3f c0       	rjmp	.+126    	; 0x2b6a <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    2aec:	6f 81       	ldd	r22, Y+7	; 0x07
    2aee:	78 85       	ldd	r23, Y+8	; 0x08
    2af0:	89 85       	ldd	r24, Y+9	; 0x09
    2af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	3f ef       	ldi	r19, 0xFF	; 255
    2af8:	4f e7       	ldi	r20, 0x7F	; 127
    2afa:	57 e4       	ldi	r21, 0x47	; 71
    2afc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b00:	18 16       	cp	r1, r24
    2b02:	4c f5       	brge	.+82     	; 0x2b56 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b04:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b06:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	40 e2       	ldi	r20, 0x20	; 32
    2b12:	51 e4       	ldi	r21, 0x41	; 65
    2b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	bc 01       	movw	r22, r24
    2b1e:	cd 01       	movw	r24, r26
    2b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22
    2b28:	9e 83       	std	Y+6, r25	; 0x06
    2b2a:	8d 83       	std	Y+5, r24	; 0x05
    2b2c:	0f c0       	rjmp	.+30     	; 0x2b4c <LCD_sendCommand+0x3a4>
    2b2e:	88 ec       	ldi	r24, 0xC8	; 200
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	9c 83       	std	Y+4, r25	; 0x04
    2b34:	8b 83       	std	Y+3, r24	; 0x03
    2b36:	8b 81       	ldd	r24, Y+3	; 0x03
    2b38:	9c 81       	ldd	r25, Y+4	; 0x04
    2b3a:	01 97       	sbiw	r24, 0x01	; 1
    2b3c:	f1 f7       	brne	.-4      	; 0x2b3a <LCD_sendCommand+0x392>
    2b3e:	9c 83       	std	Y+4, r25	; 0x04
    2b40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b42:	8d 81       	ldd	r24, Y+5	; 0x05
    2b44:	9e 81       	ldd	r25, Y+6	; 0x06
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	9e 83       	std	Y+6, r25	; 0x06
    2b4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b50:	00 97       	sbiw	r24, 0x00	; 0
    2b52:	69 f7       	brne	.-38     	; 0x2b2e <LCD_sendCommand+0x386>
    2b54:	14 c0       	rjmp	.+40     	; 0x2b7e <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b56:	6f 81       	ldd	r22, Y+7	; 0x07
    2b58:	78 85       	ldd	r23, Y+8	; 0x08
    2b5a:	89 85       	ldd	r24, Y+9	; 0x09
    2b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	9e 83       	std	Y+6, r25	; 0x06
    2b68:	8d 83       	std	Y+5, r24	; 0x05
    2b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b6e:	9a 83       	std	Y+2, r25	; 0x02
    2b70:	89 83       	std	Y+1, r24	; 0x01
    2b72:	89 81       	ldd	r24, Y+1	; 0x01
    2b74:	9a 81       	ldd	r25, Y+2	; 0x02
    2b76:	01 97       	sbiw	r24, 0x01	; 1
    2b78:	f1 f7       	brne	.-4      	; 0x2b76 <LCD_sendCommand+0x3ce>
    2b7a:	9a 83       	std	Y+2, r25	; 0x02
    2b7c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2b7e:	e9 96       	adiw	r28, 0x39	; 57
    2b80:	0f b6       	in	r0, 0x3f	; 63
    2b82:	f8 94       	cli
    2b84:	de bf       	out	0x3e, r29	; 62
    2b86:	0f be       	out	0x3f, r0	; 63
    2b88:	cd bf       	out	0x3d, r28	; 61
    2b8a:	cf 91       	pop	r28
    2b8c:	df 91       	pop	r29
    2b8e:	08 95       	ret

00002b90 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2b90:	df 93       	push	r29
    2b92:	cf 93       	push	r28
    2b94:	cd b7       	in	r28, 0x3d	; 61
    2b96:	de b7       	in	r29, 0x3e	; 62
    2b98:	e9 97       	sbiw	r28, 0x39	; 57
    2b9a:	0f b6       	in	r0, 0x3f	; 63
    2b9c:	f8 94       	cli
    2b9e:	de bf       	out	0x3e, r29	; 62
    2ba0:	0f be       	out	0x3f, r0	; 63
    2ba2:	cd bf       	out	0x3d, r28	; 61
    2ba4:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	61 e0       	ldi	r22, 0x01	; 1
    2baa:	41 e0       	ldi	r20, 0x01	; 1
    2bac:	0e 94 66 10 	call	0x20cc	; 0x20cc <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	62 e0       	ldi	r22, 0x02	; 2
    2bb4:	40 e0       	ldi	r20, 0x00	; 0
    2bb6:	0e 94 66 10 	call	0x20cc	; 0x20cc <GPIO_writePin>
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	a0 e8       	ldi	r26, 0x80	; 128
    2bc0:	bf e3       	ldi	r27, 0x3F	; 63
    2bc2:	8d ab       	std	Y+53, r24	; 0x35
    2bc4:	9e ab       	std	Y+54, r25	; 0x36
    2bc6:	af ab       	std	Y+55, r26	; 0x37
    2bc8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bca:	6d a9       	ldd	r22, Y+53	; 0x35
    2bcc:	7e a9       	ldd	r23, Y+54	; 0x36
    2bce:	8f a9       	ldd	r24, Y+55	; 0x37
    2bd0:	98 ad       	ldd	r25, Y+56	; 0x38
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	4a ef       	ldi	r20, 0xFA	; 250
    2bd8:	54 e4       	ldi	r21, 0x44	; 68
    2bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	89 ab       	std	Y+49, r24	; 0x31
    2be4:	9a ab       	std	Y+50, r25	; 0x32
    2be6:	ab ab       	std	Y+51, r26	; 0x33
    2be8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2bea:	69 a9       	ldd	r22, Y+49	; 0x31
    2bec:	7a a9       	ldd	r23, Y+50	; 0x32
    2bee:	8b a9       	ldd	r24, Y+51	; 0x33
    2bf0:	9c a9       	ldd	r25, Y+52	; 0x34
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e8       	ldi	r20, 0x80	; 128
    2bf8:	5f e3       	ldi	r21, 0x3F	; 63
    2bfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bfe:	88 23       	and	r24, r24
    2c00:	2c f4       	brge	.+10     	; 0x2c0c <LCD_displayCharacter+0x7c>
		__ticks = 1;
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	98 ab       	std	Y+48, r25	; 0x30
    2c08:	8f a7       	std	Y+47, r24	; 0x2f
    2c0a:	3f c0       	rjmp	.+126    	; 0x2c8a <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2c0c:	69 a9       	ldd	r22, Y+49	; 0x31
    2c0e:	7a a9       	ldd	r23, Y+50	; 0x32
    2c10:	8b a9       	ldd	r24, Y+51	; 0x33
    2c12:	9c a9       	ldd	r25, Y+52	; 0x34
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	3f ef       	ldi	r19, 0xFF	; 255
    2c18:	4f e7       	ldi	r20, 0x7F	; 127
    2c1a:	57 e4       	ldi	r21, 0x47	; 71
    2c1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c20:	18 16       	cp	r1, r24
    2c22:	4c f5       	brge	.+82     	; 0x2c76 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c24:	6d a9       	ldd	r22, Y+53	; 0x35
    2c26:	7e a9       	ldd	r23, Y+54	; 0x36
    2c28:	8f a9       	ldd	r24, Y+55	; 0x37
    2c2a:	98 ad       	ldd	r25, Y+56	; 0x38
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	40 e2       	ldi	r20, 0x20	; 32
    2c32:	51 e4       	ldi	r21, 0x41	; 65
    2c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	bc 01       	movw	r22, r24
    2c3e:	cd 01       	movw	r24, r26
    2c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	98 ab       	std	Y+48, r25	; 0x30
    2c4a:	8f a7       	std	Y+47, r24	; 0x2f
    2c4c:	0f c0       	rjmp	.+30     	; 0x2c6c <LCD_displayCharacter+0xdc>
    2c4e:	88 ec       	ldi	r24, 0xC8	; 200
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	9e a7       	std	Y+46, r25	; 0x2e
    2c54:	8d a7       	std	Y+45, r24	; 0x2d
    2c56:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c58:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	f1 f7       	brne	.-4      	; 0x2c5a <LCD_displayCharacter+0xca>
    2c5e:	9e a7       	std	Y+46, r25	; 0x2e
    2c60:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c62:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c64:	98 a9       	ldd	r25, Y+48	; 0x30
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	98 ab       	std	Y+48, r25	; 0x30
    2c6a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c6e:	98 a9       	ldd	r25, Y+48	; 0x30
    2c70:	00 97       	sbiw	r24, 0x00	; 0
    2c72:	69 f7       	brne	.-38     	; 0x2c4e <LCD_displayCharacter+0xbe>
    2c74:	14 c0       	rjmp	.+40     	; 0x2c9e <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c76:	69 a9       	ldd	r22, Y+49	; 0x31
    2c78:	7a a9       	ldd	r23, Y+50	; 0x32
    2c7a:	8b a9       	ldd	r24, Y+51	; 0x33
    2c7c:	9c a9       	ldd	r25, Y+52	; 0x34
    2c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	98 ab       	std	Y+48, r25	; 0x30
    2c88:	8f a7       	std	Y+47, r24	; 0x2f
    2c8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c8c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c8e:	9c a7       	std	Y+44, r25	; 0x2c
    2c90:	8b a7       	std	Y+43, r24	; 0x2b
    2c92:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c94:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	f1 f7       	brne	.-4      	; 0x2c96 <LCD_displayCharacter+0x106>
    2c9a:	9c a7       	std	Y+44, r25	; 0x2c
    2c9c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	63 e0       	ldi	r22, 0x03	; 3
    2ca2:	41 e0       	ldi	r20, 0x01	; 1
    2ca4:	0e 94 66 10 	call	0x20cc	; 0x20cc <GPIO_writePin>
    2ca8:	80 e0       	ldi	r24, 0x00	; 0
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	a0 e8       	ldi	r26, 0x80	; 128
    2cae:	bf e3       	ldi	r27, 0x3F	; 63
    2cb0:	8f a3       	std	Y+39, r24	; 0x27
    2cb2:	98 a7       	std	Y+40, r25	; 0x28
    2cb4:	a9 a7       	std	Y+41, r26	; 0x29
    2cb6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cb8:	6f a1       	ldd	r22, Y+39	; 0x27
    2cba:	78 a5       	ldd	r23, Y+40	; 0x28
    2cbc:	89 a5       	ldd	r24, Y+41	; 0x29
    2cbe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	4a ef       	ldi	r20, 0xFA	; 250
    2cc6:	54 e4       	ldi	r21, 0x44	; 68
    2cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	8b a3       	std	Y+35, r24	; 0x23
    2cd2:	9c a3       	std	Y+36, r25	; 0x24
    2cd4:	ad a3       	std	Y+37, r26	; 0x25
    2cd6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cd8:	6b a1       	ldd	r22, Y+35	; 0x23
    2cda:	7c a1       	ldd	r23, Y+36	; 0x24
    2cdc:	8d a1       	ldd	r24, Y+37	; 0x25
    2cde:	9e a1       	ldd	r25, Y+38	; 0x26
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	40 e8       	ldi	r20, 0x80	; 128
    2ce6:	5f e3       	ldi	r21, 0x3F	; 63
    2ce8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cec:	88 23       	and	r24, r24
    2cee:	2c f4       	brge	.+10     	; 0x2cfa <LCD_displayCharacter+0x16a>
		__ticks = 1;
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	9a a3       	std	Y+34, r25	; 0x22
    2cf6:	89 a3       	std	Y+33, r24	; 0x21
    2cf8:	3f c0       	rjmp	.+126    	; 0x2d78 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2cfa:	6b a1       	ldd	r22, Y+35	; 0x23
    2cfc:	7c a1       	ldd	r23, Y+36	; 0x24
    2cfe:	8d a1       	ldd	r24, Y+37	; 0x25
    2d00:	9e a1       	ldd	r25, Y+38	; 0x26
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	3f ef       	ldi	r19, 0xFF	; 255
    2d06:	4f e7       	ldi	r20, 0x7F	; 127
    2d08:	57 e4       	ldi	r21, 0x47	; 71
    2d0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d0e:	18 16       	cp	r1, r24
    2d10:	4c f5       	brge	.+82     	; 0x2d64 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d12:	6f a1       	ldd	r22, Y+39	; 0x27
    2d14:	78 a5       	ldd	r23, Y+40	; 0x28
    2d16:	89 a5       	ldd	r24, Y+41	; 0x29
    2d18:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	40 e2       	ldi	r20, 0x20	; 32
    2d20:	51 e4       	ldi	r21, 0x41	; 65
    2d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	bc 01       	movw	r22, r24
    2d2c:	cd 01       	movw	r24, r26
    2d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	9a a3       	std	Y+34, r25	; 0x22
    2d38:	89 a3       	std	Y+33, r24	; 0x21
    2d3a:	0f c0       	rjmp	.+30     	; 0x2d5a <LCD_displayCharacter+0x1ca>
    2d3c:	88 ec       	ldi	r24, 0xC8	; 200
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	98 a3       	std	Y+32, r25	; 0x20
    2d42:	8f 8f       	std	Y+31, r24	; 0x1f
    2d44:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d46:	98 a1       	ldd	r25, Y+32	; 0x20
    2d48:	01 97       	sbiw	r24, 0x01	; 1
    2d4a:	f1 f7       	brne	.-4      	; 0x2d48 <LCD_displayCharacter+0x1b8>
    2d4c:	98 a3       	std	Y+32, r25	; 0x20
    2d4e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d50:	89 a1       	ldd	r24, Y+33	; 0x21
    2d52:	9a a1       	ldd	r25, Y+34	; 0x22
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	9a a3       	std	Y+34, r25	; 0x22
    2d58:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5a:	89 a1       	ldd	r24, Y+33	; 0x21
    2d5c:	9a a1       	ldd	r25, Y+34	; 0x22
    2d5e:	00 97       	sbiw	r24, 0x00	; 0
    2d60:	69 f7       	brne	.-38     	; 0x2d3c <LCD_displayCharacter+0x1ac>
    2d62:	14 c0       	rjmp	.+40     	; 0x2d8c <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d64:	6b a1       	ldd	r22, Y+35	; 0x23
    2d66:	7c a1       	ldd	r23, Y+36	; 0x24
    2d68:	8d a1       	ldd	r24, Y+37	; 0x25
    2d6a:	9e a1       	ldd	r25, Y+38	; 0x26
    2d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d70:	dc 01       	movw	r26, r24
    2d72:	cb 01       	movw	r24, r22
    2d74:	9a a3       	std	Y+34, r25	; 0x22
    2d76:	89 a3       	std	Y+33, r24	; 0x21
    2d78:	89 a1       	ldd	r24, Y+33	; 0x21
    2d7a:	9a a1       	ldd	r25, Y+34	; 0x22
    2d7c:	9e 8f       	std	Y+30, r25	; 0x1e
    2d7e:	8d 8f       	std	Y+29, r24	; 0x1d
    2d80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	f1 f7       	brne	.-4      	; 0x2d84 <LCD_displayCharacter+0x1f4>
    2d88:	9e 8f       	std	Y+30, r25	; 0x1e
    2d8a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2d8c:	82 e0       	ldi	r24, 0x02	; 2
    2d8e:	69 ad       	ldd	r22, Y+57	; 0x39
    2d90:	0e 94 30 12 	call	0x2460	; 0x2460 <GPIO_writePort>
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	a0 e8       	ldi	r26, 0x80	; 128
    2d9a:	bf e3       	ldi	r27, 0x3F	; 63
    2d9c:	89 8f       	std	Y+25, r24	; 0x19
    2d9e:	9a 8f       	std	Y+26, r25	; 0x1a
    2da0:	ab 8f       	std	Y+27, r26	; 0x1b
    2da2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da4:	69 8d       	ldd	r22, Y+25	; 0x19
    2da6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2da8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2daa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	4a ef       	ldi	r20, 0xFA	; 250
    2db2:	54 e4       	ldi	r21, 0x44	; 68
    2db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	8d 8b       	std	Y+21, r24	; 0x15
    2dbe:	9e 8b       	std	Y+22, r25	; 0x16
    2dc0:	af 8b       	std	Y+23, r26	; 0x17
    2dc2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dc4:	6d 89       	ldd	r22, Y+21	; 0x15
    2dc6:	7e 89       	ldd	r23, Y+22	; 0x16
    2dc8:	8f 89       	ldd	r24, Y+23	; 0x17
    2dca:	98 8d       	ldd	r25, Y+24	; 0x18
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	40 e8       	ldi	r20, 0x80	; 128
    2dd2:	5f e3       	ldi	r21, 0x3F	; 63
    2dd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dd8:	88 23       	and	r24, r24
    2dda:	2c f4       	brge	.+10     	; 0x2de6 <LCD_displayCharacter+0x256>
		__ticks = 1;
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	9c 8b       	std	Y+20, r25	; 0x14
    2de2:	8b 8b       	std	Y+19, r24	; 0x13
    2de4:	3f c0       	rjmp	.+126    	; 0x2e64 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    2de6:	6d 89       	ldd	r22, Y+21	; 0x15
    2de8:	7e 89       	ldd	r23, Y+22	; 0x16
    2dea:	8f 89       	ldd	r24, Y+23	; 0x17
    2dec:	98 8d       	ldd	r25, Y+24	; 0x18
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	3f ef       	ldi	r19, 0xFF	; 255
    2df2:	4f e7       	ldi	r20, 0x7F	; 127
    2df4:	57 e4       	ldi	r21, 0x47	; 71
    2df6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dfa:	18 16       	cp	r1, r24
    2dfc:	4c f5       	brge	.+82     	; 0x2e50 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dfe:	69 8d       	ldd	r22, Y+25	; 0x19
    2e00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	40 e2       	ldi	r20, 0x20	; 32
    2e0c:	51 e4       	ldi	r21, 0x41	; 65
    2e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	bc 01       	movw	r22, r24
    2e18:	cd 01       	movw	r24, r26
    2e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1e:	dc 01       	movw	r26, r24
    2e20:	cb 01       	movw	r24, r22
    2e22:	9c 8b       	std	Y+20, r25	; 0x14
    2e24:	8b 8b       	std	Y+19, r24	; 0x13
    2e26:	0f c0       	rjmp	.+30     	; 0x2e46 <LCD_displayCharacter+0x2b6>
    2e28:	88 ec       	ldi	r24, 0xC8	; 200
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	9a 8b       	std	Y+18, r25	; 0x12
    2e2e:	89 8b       	std	Y+17, r24	; 0x11
    2e30:	89 89       	ldd	r24, Y+17	; 0x11
    2e32:	9a 89       	ldd	r25, Y+18	; 0x12
    2e34:	01 97       	sbiw	r24, 0x01	; 1
    2e36:	f1 f7       	brne	.-4      	; 0x2e34 <LCD_displayCharacter+0x2a4>
    2e38:	9a 8b       	std	Y+18, r25	; 0x12
    2e3a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e40:	01 97       	sbiw	r24, 0x01	; 1
    2e42:	9c 8b       	std	Y+20, r25	; 0x14
    2e44:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e46:	8b 89       	ldd	r24, Y+19	; 0x13
    2e48:	9c 89       	ldd	r25, Y+20	; 0x14
    2e4a:	00 97       	sbiw	r24, 0x00	; 0
    2e4c:	69 f7       	brne	.-38     	; 0x2e28 <LCD_displayCharacter+0x298>
    2e4e:	14 c0       	rjmp	.+40     	; 0x2e78 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e50:	6d 89       	ldd	r22, Y+21	; 0x15
    2e52:	7e 89       	ldd	r23, Y+22	; 0x16
    2e54:	8f 89       	ldd	r24, Y+23	; 0x17
    2e56:	98 8d       	ldd	r25, Y+24	; 0x18
    2e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	cb 01       	movw	r24, r22
    2e60:	9c 8b       	std	Y+20, r25	; 0x14
    2e62:	8b 8b       	std	Y+19, r24	; 0x13
    2e64:	8b 89       	ldd	r24, Y+19	; 0x13
    2e66:	9c 89       	ldd	r25, Y+20	; 0x14
    2e68:	98 8b       	std	Y+16, r25	; 0x10
    2e6a:	8f 87       	std	Y+15, r24	; 0x0f
    2e6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e6e:	98 89       	ldd	r25, Y+16	; 0x10
    2e70:	01 97       	sbiw	r24, 0x01	; 1
    2e72:	f1 f7       	brne	.-4      	; 0x2e70 <LCD_displayCharacter+0x2e0>
    2e74:	98 8b       	std	Y+16, r25	; 0x10
    2e76:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	63 e0       	ldi	r22, 0x03	; 3
    2e7c:	40 e0       	ldi	r20, 0x00	; 0
    2e7e:	0e 94 66 10 	call	0x20cc	; 0x20cc <GPIO_writePin>
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	a0 e8       	ldi	r26, 0x80	; 128
    2e88:	bf e3       	ldi	r27, 0x3F	; 63
    2e8a:	8b 87       	std	Y+11, r24	; 0x0b
    2e8c:	9c 87       	std	Y+12, r25	; 0x0c
    2e8e:	ad 87       	std	Y+13, r26	; 0x0d
    2e90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e92:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e94:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	4a ef       	ldi	r20, 0xFA	; 250
    2ea0:	54 e4       	ldi	r21, 0x44	; 68
    2ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	8f 83       	std	Y+7, r24	; 0x07
    2eac:	98 87       	std	Y+8, r25	; 0x08
    2eae:	a9 87       	std	Y+9, r26	; 0x09
    2eb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb4:	78 85       	ldd	r23, Y+8	; 0x08
    2eb6:	89 85       	ldd	r24, Y+9	; 0x09
    2eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	40 e8       	ldi	r20, 0x80	; 128
    2ec0:	5f e3       	ldi	r21, 0x3F	; 63
    2ec2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ec6:	88 23       	and	r24, r24
    2ec8:	2c f4       	brge	.+10     	; 0x2ed4 <LCD_displayCharacter+0x344>
		__ticks = 1;
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	9e 83       	std	Y+6, r25	; 0x06
    2ed0:	8d 83       	std	Y+5, r24	; 0x05
    2ed2:	3f c0       	rjmp	.+126    	; 0x2f52 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2ed4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed6:	78 85       	ldd	r23, Y+8	; 0x08
    2ed8:	89 85       	ldd	r24, Y+9	; 0x09
    2eda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	3f ef       	ldi	r19, 0xFF	; 255
    2ee0:	4f e7       	ldi	r20, 0x7F	; 127
    2ee2:	57 e4       	ldi	r21, 0x47	; 71
    2ee4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ee8:	18 16       	cp	r1, r24
    2eea:	4c f5       	brge	.+82     	; 0x2f3e <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eec:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eee:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	40 e2       	ldi	r20, 0x20	; 32
    2efa:	51 e4       	ldi	r21, 0x41	; 65
    2efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	bc 01       	movw	r22, r24
    2f06:	cd 01       	movw	r24, r26
    2f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	9e 83       	std	Y+6, r25	; 0x06
    2f12:	8d 83       	std	Y+5, r24	; 0x05
    2f14:	0f c0       	rjmp	.+30     	; 0x2f34 <LCD_displayCharacter+0x3a4>
    2f16:	88 ec       	ldi	r24, 0xC8	; 200
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	9c 83       	std	Y+4, r25	; 0x04
    2f1c:	8b 83       	std	Y+3, r24	; 0x03
    2f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f20:	9c 81       	ldd	r25, Y+4	; 0x04
    2f22:	01 97       	sbiw	r24, 0x01	; 1
    2f24:	f1 f7       	brne	.-4      	; 0x2f22 <LCD_displayCharacter+0x392>
    2f26:	9c 83       	std	Y+4, r25	; 0x04
    2f28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f2e:	01 97       	sbiw	r24, 0x01	; 1
    2f30:	9e 83       	std	Y+6, r25	; 0x06
    2f32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f34:	8d 81       	ldd	r24, Y+5	; 0x05
    2f36:	9e 81       	ldd	r25, Y+6	; 0x06
    2f38:	00 97       	sbiw	r24, 0x00	; 0
    2f3a:	69 f7       	brne	.-38     	; 0x2f16 <LCD_displayCharacter+0x386>
    2f3c:	14 c0       	rjmp	.+40     	; 0x2f66 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f40:	78 85       	ldd	r23, Y+8	; 0x08
    2f42:	89 85       	ldd	r24, Y+9	; 0x09
    2f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	9e 83       	std	Y+6, r25	; 0x06
    2f50:	8d 83       	std	Y+5, r24	; 0x05
    2f52:	8d 81       	ldd	r24, Y+5	; 0x05
    2f54:	9e 81       	ldd	r25, Y+6	; 0x06
    2f56:	9a 83       	std	Y+2, r25	; 0x02
    2f58:	89 83       	std	Y+1, r24	; 0x01
    2f5a:	89 81       	ldd	r24, Y+1	; 0x01
    2f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f5e:	01 97       	sbiw	r24, 0x01	; 1
    2f60:	f1 f7       	brne	.-4      	; 0x2f5e <LCD_displayCharacter+0x3ce>
    2f62:	9a 83       	std	Y+2, r25	; 0x02
    2f64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2f66:	e9 96       	adiw	r28, 0x39	; 57
    2f68:	0f b6       	in	r0, 0x3f	; 63
    2f6a:	f8 94       	cli
    2f6c:	de bf       	out	0x3e, r29	; 62
    2f6e:	0f be       	out	0x3f, r0	; 63
    2f70:	cd bf       	out	0x3d, r28	; 61
    2f72:	cf 91       	pop	r28
    2f74:	df 91       	pop	r29
    2f76:	08 95       	ret

00002f78 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2f78:	df 93       	push	r29
    2f7a:	cf 93       	push	r28
    2f7c:	00 d0       	rcall	.+0      	; 0x2f7e <LCD_displayString+0x6>
    2f7e:	0f 92       	push	r0
    2f80:	cd b7       	in	r28, 0x3d	; 61
    2f82:	de b7       	in	r29, 0x3e	; 62
    2f84:	9b 83       	std	Y+3, r25	; 0x03
    2f86:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f88:	19 82       	std	Y+1, r1	; 0x01
    2f8a:	0e c0       	rjmp	.+28     	; 0x2fa8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2f8c:	89 81       	ldd	r24, Y+1	; 0x01
    2f8e:	28 2f       	mov	r18, r24
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	8a 81       	ldd	r24, Y+2	; 0x02
    2f94:	9b 81       	ldd	r25, Y+3	; 0x03
    2f96:	fc 01       	movw	r30, r24
    2f98:	e2 0f       	add	r30, r18
    2f9a:	f3 1f       	adc	r31, r19
    2f9c:	80 81       	ld	r24, Z
    2f9e:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <LCD_displayCharacter>
		i++;
    2fa2:	89 81       	ldd	r24, Y+1	; 0x01
    2fa4:	8f 5f       	subi	r24, 0xFF	; 255
    2fa6:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2fa8:	89 81       	ldd	r24, Y+1	; 0x01
    2faa:	28 2f       	mov	r18, r24
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fb2:	fc 01       	movw	r30, r24
    2fb4:	e2 0f       	add	r30, r18
    2fb6:	f3 1f       	adc	r31, r19
    2fb8:	80 81       	ld	r24, Z
    2fba:	88 23       	and	r24, r24
    2fbc:	39 f7       	brne	.-50     	; 0x2f8c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2fbe:	0f 90       	pop	r0
    2fc0:	0f 90       	pop	r0
    2fc2:	0f 90       	pop	r0
    2fc4:	cf 91       	pop	r28
    2fc6:	df 91       	pop	r29
    2fc8:	08 95       	ret

00002fca <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2fca:	df 93       	push	r29
    2fcc:	cf 93       	push	r28
    2fce:	00 d0       	rcall	.+0      	; 0x2fd0 <LCD_moveCursor+0x6>
    2fd0:	00 d0       	rcall	.+0      	; 0x2fd2 <LCD_moveCursor+0x8>
    2fd2:	0f 92       	push	r0
    2fd4:	cd b7       	in	r28, 0x3d	; 61
    2fd6:	de b7       	in	r29, 0x3e	; 62
    2fd8:	8a 83       	std	Y+2, r24	; 0x02
    2fda:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fde:	28 2f       	mov	r18, r24
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	3d 83       	std	Y+5, r19	; 0x05
    2fe4:	2c 83       	std	Y+4, r18	; 0x04
    2fe6:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe8:	9d 81       	ldd	r25, Y+5	; 0x05
    2fea:	81 30       	cpi	r24, 0x01	; 1
    2fec:	91 05       	cpc	r25, r1
    2fee:	c1 f0       	breq	.+48     	; 0x3020 <LCD_moveCursor+0x56>
    2ff0:	2c 81       	ldd	r18, Y+4	; 0x04
    2ff2:	3d 81       	ldd	r19, Y+5	; 0x05
    2ff4:	22 30       	cpi	r18, 0x02	; 2
    2ff6:	31 05       	cpc	r19, r1
    2ff8:	2c f4       	brge	.+10     	; 0x3004 <LCD_moveCursor+0x3a>
    2ffa:	8c 81       	ldd	r24, Y+4	; 0x04
    2ffc:	9d 81       	ldd	r25, Y+5	; 0x05
    2ffe:	00 97       	sbiw	r24, 0x00	; 0
    3000:	61 f0       	breq	.+24     	; 0x301a <LCD_moveCursor+0x50>
    3002:	19 c0       	rjmp	.+50     	; 0x3036 <LCD_moveCursor+0x6c>
    3004:	2c 81       	ldd	r18, Y+4	; 0x04
    3006:	3d 81       	ldd	r19, Y+5	; 0x05
    3008:	22 30       	cpi	r18, 0x02	; 2
    300a:	31 05       	cpc	r19, r1
    300c:	69 f0       	breq	.+26     	; 0x3028 <LCD_moveCursor+0x5e>
    300e:	8c 81       	ldd	r24, Y+4	; 0x04
    3010:	9d 81       	ldd	r25, Y+5	; 0x05
    3012:	83 30       	cpi	r24, 0x03	; 3
    3014:	91 05       	cpc	r25, r1
    3016:	61 f0       	breq	.+24     	; 0x3030 <LCD_moveCursor+0x66>
    3018:	0e c0       	rjmp	.+28     	; 0x3036 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    301a:	8b 81       	ldd	r24, Y+3	; 0x03
    301c:	89 83       	std	Y+1, r24	; 0x01
    301e:	0b c0       	rjmp	.+22     	; 0x3036 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3020:	8b 81       	ldd	r24, Y+3	; 0x03
    3022:	80 5c       	subi	r24, 0xC0	; 192
    3024:	89 83       	std	Y+1, r24	; 0x01
    3026:	07 c0       	rjmp	.+14     	; 0x3036 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3028:	8b 81       	ldd	r24, Y+3	; 0x03
    302a:	80 5f       	subi	r24, 0xF0	; 240
    302c:	89 83       	std	Y+1, r24	; 0x01
    302e:	03 c0       	rjmp	.+6      	; 0x3036 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3030:	8b 81       	ldd	r24, Y+3	; 0x03
    3032:	80 5b       	subi	r24, 0xB0	; 176
    3034:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3036:	89 81       	ldd	r24, Y+1	; 0x01
    3038:	80 68       	ori	r24, 0x80	; 128
    303a:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_sendCommand>
}
    303e:	0f 90       	pop	r0
    3040:	0f 90       	pop	r0
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
    3048:	cf 91       	pop	r28
    304a:	df 91       	pop	r29
    304c:	08 95       	ret

0000304e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    304e:	df 93       	push	r29
    3050:	cf 93       	push	r28
    3052:	00 d0       	rcall	.+0      	; 0x3054 <LCD_displayStringRowColumn+0x6>
    3054:	00 d0       	rcall	.+0      	; 0x3056 <LCD_displayStringRowColumn+0x8>
    3056:	cd b7       	in	r28, 0x3d	; 61
    3058:	de b7       	in	r29, 0x3e	; 62
    305a:	89 83       	std	Y+1, r24	; 0x01
    305c:	6a 83       	std	Y+2, r22	; 0x02
    305e:	5c 83       	std	Y+4, r21	; 0x04
    3060:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3062:	89 81       	ldd	r24, Y+1	; 0x01
    3064:	6a 81       	ldd	r22, Y+2	; 0x02
    3066:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    306a:	8b 81       	ldd	r24, Y+3	; 0x03
    306c:	9c 81       	ldd	r25, Y+4	; 0x04
    306e:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
}
    3072:	0f 90       	pop	r0
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	cf 91       	pop	r28
    307c:	df 91       	pop	r29
    307e:	08 95       	ret

00003080 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3080:	df 93       	push	r29
    3082:	cf 93       	push	r28
    3084:	cd b7       	in	r28, 0x3d	; 61
    3086:	de b7       	in	r29, 0x3e	; 62
    3088:	62 97       	sbiw	r28, 0x12	; 18
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	f8 94       	cli
    308e:	de bf       	out	0x3e, r29	; 62
    3090:	0f be       	out	0x3f, r0	; 63
    3092:	cd bf       	out	0x3d, r28	; 61
    3094:	9a 8b       	std	Y+18, r25	; 0x12
    3096:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3098:	89 89       	ldd	r24, Y+17	; 0x11
    309a:	9a 89       	ldd	r25, Y+18	; 0x12
    309c:	9e 01       	movw	r18, r28
    309e:	2f 5f       	subi	r18, 0xFF	; 255
    30a0:	3f 4f       	sbci	r19, 0xFF	; 255
    30a2:	b9 01       	movw	r22, r18
    30a4:	4a e0       	ldi	r20, 0x0A	; 10
    30a6:	50 e0       	ldi	r21, 0x00	; 0
    30a8:	0e 94 bd 19 	call	0x337a	; 0x337a <itoa>
   LCD_displayString(buff); /* Display the string */
    30ac:	ce 01       	movw	r24, r28
    30ae:	01 96       	adiw	r24, 0x01	; 1
    30b0:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
}
    30b4:	62 96       	adiw	r28, 0x12	; 18
    30b6:	0f b6       	in	r0, 0x3f	; 63
    30b8:	f8 94       	cli
    30ba:	de bf       	out	0x3e, r29	; 62
    30bc:	0f be       	out	0x3f, r0	; 63
    30be:	cd bf       	out	0x3d, r28	; 61
    30c0:	cf 91       	pop	r28
    30c2:	df 91       	pop	r29
    30c4:	08 95       	ret

000030c6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    30c6:	df 93       	push	r29
    30c8:	cf 93       	push	r28
    30ca:	cd b7       	in	r28, 0x3d	; 61
    30cc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_sendCommand>
}
    30d4:	cf 91       	pop	r28
    30d6:	df 91       	pop	r29
    30d8:	08 95       	ret

000030da <UART_init>:


uint8 data_received;

void UART_init(UART_ConfigType* configurations)
{
    30da:	df 93       	push	r29
    30dc:	cf 93       	push	r28
    30de:	00 d0       	rcall	.+0      	; 0x30e0 <UART_init+0x6>
    30e0:	00 d0       	rcall	.+0      	; 0x30e2 <UART_init+0x8>
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
    30e6:	9c 83       	std	Y+4, r25	; 0x04
    30e8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value=0;
    30ea:	1a 82       	std	Y+2, r1	; 0x02
    30ec:	19 82       	std	Y+1, r1	; 0x01
	SREG=(1<<7);
    30ee:	ef e5       	ldi	r30, 0x5F	; 95
    30f0:	f0 e0       	ldi	r31, 0x00	; 0
    30f2:	80 e8       	ldi	r24, 0x80	; 128
    30f4:	80 83       	st	Z, r24
	UCSRA=(1<<U2X);	/*double transmission speed*/
    30f6:	eb e2       	ldi	r30, 0x2B	; 43
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	82 e0       	ldi	r24, 0x02	; 2
    30fc:	80 83       	st	Z, r24
	/*RXCIE -->when receiving a byte is complete an interrupt happens that return the byte
	 * RXEN--->receiver enable
	 * TXEN---> transmitter enable
	 * */
	UCSRB|=(1<<receiver_enable)|(1<<transmitter_enable);
    30fe:	aa e2       	ldi	r26, 0x2A	; 42
    3100:	b0 e0       	ldi	r27, 0x00	; 0
    3102:	ea e2       	ldi	r30, 0x2A	; 42
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	80 81       	ld	r24, Z
    3108:	88 61       	ori	r24, 0x18	; 24
    310a:	8c 93       	st	X, r24
	/*
	 * this sets the character size of the data
	 * */
	UCSRC=(1<<URSEL)|((configurations->ch_size)<<UCSZ0)|((configurations->parity_type)<<UPM0);
    310c:	a0 e4       	ldi	r26, 0x40	; 64
    310e:	b0 e0       	ldi	r27, 0x00	; 0
    3110:	eb 81       	ldd	r30, Y+3	; 0x03
    3112:	fc 81       	ldd	r31, Y+4	; 0x04
    3114:	83 81       	ldd	r24, Z+3	; 0x03
    3116:	88 2f       	mov	r24, r24
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	88 0f       	add	r24, r24
    311c:	99 1f       	adc	r25, r25
    311e:	28 2f       	mov	r18, r24
    3120:	20 68       	ori	r18, 0x80	; 128
    3122:	eb 81       	ldd	r30, Y+3	; 0x03
    3124:	fc 81       	ldd	r31, Y+4	; 0x04
    3126:	82 81       	ldd	r24, Z+2	; 0x02
    3128:	88 2f       	mov	r24, r24
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	82 95       	swap	r24
    312e:	92 95       	swap	r25
    3130:	90 7f       	andi	r25, 0xF0	; 240
    3132:	98 27       	eor	r25, r24
    3134:	80 7f       	andi	r24, 0xF0	; 240
    3136:	98 27       	eor	r25, r24
    3138:	82 2b       	or	r24, r18
    313a:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((configurations->baud_rate) * 8UL))) - 1);
    313c:	eb 81       	ldd	r30, Y+3	; 0x03
    313e:	fc 81       	ldd	r31, Y+4	; 0x04
    3140:	80 81       	ld	r24, Z
    3142:	91 81       	ldd	r25, Z+1	; 0x01
    3144:	cc 01       	movw	r24, r24
    3146:	a0 e0       	ldi	r26, 0x00	; 0
    3148:	b0 e0       	ldi	r27, 0x00	; 0
    314a:	88 0f       	add	r24, r24
    314c:	99 1f       	adc	r25, r25
    314e:	aa 1f       	adc	r26, r26
    3150:	bb 1f       	adc	r27, r27
    3152:	88 0f       	add	r24, r24
    3154:	99 1f       	adc	r25, r25
    3156:	aa 1f       	adc	r26, r26
    3158:	bb 1f       	adc	r27, r27
    315a:	88 0f       	add	r24, r24
    315c:	99 1f       	adc	r25, r25
    315e:	aa 1f       	adc	r26, r26
    3160:	bb 1f       	adc	r27, r27
    3162:	9c 01       	movw	r18, r24
    3164:	ad 01       	movw	r20, r26
    3166:	80 e0       	ldi	r24, 0x00	; 0
    3168:	92 e1       	ldi	r25, 0x12	; 18
    316a:	aa e7       	ldi	r26, 0x7A	; 122
    316c:	b0 e0       	ldi	r27, 0x00	; 0
    316e:	bc 01       	movw	r22, r24
    3170:	cd 01       	movw	r24, r26
    3172:	0e 94 64 19 	call	0x32c8	; 0x32c8 <__udivmodsi4>
    3176:	da 01       	movw	r26, r20
    3178:	c9 01       	movw	r24, r18
    317a:	01 97       	sbiw	r24, 0x01	; 1
    317c:	9a 83       	std	Y+2, r25	; 0x02
    317e:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3180:	e0 e4       	ldi	r30, 0x40	; 64
    3182:	f0 e0       	ldi	r31, 0x00	; 0
    3184:	89 81       	ldd	r24, Y+1	; 0x01
    3186:	9a 81       	ldd	r25, Y+2	; 0x02
    3188:	89 2f       	mov	r24, r25
    318a:	99 27       	eor	r25, r25
    318c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    318e:	e9 e2       	ldi	r30, 0x29	; 41
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	89 81       	ldd	r24, Y+1	; 0x01
    3194:	80 83       	st	Z, r24



}
    3196:	0f 90       	pop	r0
    3198:	0f 90       	pop	r0
    319a:	0f 90       	pop	r0
    319c:	0f 90       	pop	r0
    319e:	cf 91       	pop	r28
    31a0:	df 91       	pop	r29
    31a2:	08 95       	ret

000031a4 <UART_sendByte>:

void UART_sendByte(uint8 data)
{
    31a4:	df 93       	push	r29
    31a6:	cf 93       	push	r28
    31a8:	0f 92       	push	r0
    31aa:	cd b7       	in	r28, 0x3d	; 61
    31ac:	de b7       	in	r29, 0x3e	; 62
    31ae:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    31b0:	eb e2       	ldi	r30, 0x2B	; 43
    31b2:	f0 e0       	ldi	r31, 0x00	; 0
    31b4:	80 81       	ld	r24, Z
    31b6:	88 2f       	mov	r24, r24
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	80 72       	andi	r24, 0x20	; 32
    31bc:	90 70       	andi	r25, 0x00	; 0
    31be:	00 97       	sbiw	r24, 0x00	; 0
    31c0:	b9 f3       	breq	.-18     	; 0x31b0 <UART_sendByte+0xc>
	UDR=data;
    31c2:	ec e2       	ldi	r30, 0x2C	; 44
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	89 81       	ldd	r24, Y+1	; 0x01
    31c8:	80 83       	st	Z, r24

}
    31ca:	0f 90       	pop	r0
    31cc:	cf 91       	pop	r28
    31ce:	df 91       	pop	r29
    31d0:	08 95       	ret

000031d2 <UART_receiveByte>:
uint8 UART_receiveByte()
{
    31d2:	df 93       	push	r29
    31d4:	cf 93       	push	r28
    31d6:	cd b7       	in	r28, 0x3d	; 61
    31d8:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    31da:	eb e2       	ldi	r30, 0x2B	; 43
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	80 81       	ld	r24, Z
    31e0:	88 23       	and	r24, r24
    31e2:	dc f7       	brge	.-10     	; 0x31da <UART_receiveByte+0x8>
	return UDR;
    31e4:	ec e2       	ldi	r30, 0x2C	; 44
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	80 81       	ld	r24, Z
}
    31ea:	cf 91       	pop	r28
    31ec:	df 91       	pop	r29
    31ee:	08 95       	ret

000031f0 <UART_sendString>:
void UART_sendString(const char*str)
{
    31f0:	df 93       	push	r29
    31f2:	cf 93       	push	r28
    31f4:	00 d0       	rcall	.+0      	; 0x31f6 <UART_sendString+0x6>
    31f6:	0f 92       	push	r0
    31f8:	cd b7       	in	r28, 0x3d	; 61
    31fa:	de b7       	in	r29, 0x3e	; 62
    31fc:	9b 83       	std	Y+3, r25	; 0x03
    31fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3200:	19 82       	std	Y+1, r1	; 0x01
    3202:	0e c0       	rjmp	.+28     	; 0x3220 <UART_sendString+0x30>

		/* Send the whole string */
		while(str[i] != '\0')
		{
			UART_sendByte(str[i]);
    3204:	89 81       	ldd	r24, Y+1	; 0x01
    3206:	28 2f       	mov	r18, r24
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	8a 81       	ldd	r24, Y+2	; 0x02
    320c:	9b 81       	ldd	r25, Y+3	; 0x03
    320e:	fc 01       	movw	r30, r24
    3210:	e2 0f       	add	r30, r18
    3212:	f3 1f       	adc	r31, r19
    3214:	80 81       	ld	r24, Z
    3216:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <UART_sendByte>
			i++;
    321a:	89 81       	ldd	r24, Y+1	; 0x01
    321c:	8f 5f       	subi	r24, 0xFF	; 255
    321e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const char*str)
{
	uint8 i = 0;

		/* Send the whole string */
		while(str[i] != '\0')
    3220:	89 81       	ldd	r24, Y+1	; 0x01
    3222:	28 2f       	mov	r18, r24
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	8a 81       	ldd	r24, Y+2	; 0x02
    3228:	9b 81       	ldd	r25, Y+3	; 0x03
    322a:	fc 01       	movw	r30, r24
    322c:	e2 0f       	add	r30, r18
    322e:	f3 1f       	adc	r31, r19
    3230:	80 81       	ld	r24, Z
    3232:	88 23       	and	r24, r24
    3234:	39 f7       	brne	.-50     	; 0x3204 <UART_sendString+0x14>
		{
			UART_sendByte(str[i]);
			i++;
		}

}
    3236:	0f 90       	pop	r0
    3238:	0f 90       	pop	r0
    323a:	0f 90       	pop	r0
    323c:	cf 91       	pop	r28
    323e:	df 91       	pop	r29
    3240:	08 95       	ret

00003242 <UART_receiveString>:
void UART_receiveString(char *str)
{
    3242:	0f 93       	push	r16
    3244:	1f 93       	push	r17
    3246:	df 93       	push	r29
    3248:	cf 93       	push	r28
    324a:	00 d0       	rcall	.+0      	; 0x324c <UART_receiveString+0xa>
    324c:	0f 92       	push	r0
    324e:	cd b7       	in	r28, 0x3d	; 61
    3250:	de b7       	in	r29, 0x3e	; 62
    3252:	9b 83       	std	Y+3, r25	; 0x03
    3254:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    3256:	19 82       	std	Y+1, r1	; 0x01
	str[i]=UART_receiveByte();
    3258:	89 81       	ldd	r24, Y+1	; 0x01
    325a:	28 2f       	mov	r18, r24
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	8a 81       	ldd	r24, Y+2	; 0x02
    3260:	9b 81       	ldd	r25, Y+3	; 0x03
    3262:	8c 01       	movw	r16, r24
    3264:	02 0f       	add	r16, r18
    3266:	13 1f       	adc	r17, r19
    3268:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <UART_receiveByte>
    326c:	f8 01       	movw	r30, r16
    326e:	80 83       	st	Z, r24
    3270:	0f c0       	rjmp	.+30     	; 0x3290 <UART_receiveString+0x4e>
	while(str[i]!=string_stop)
	{
		i++;
    3272:	89 81       	ldd	r24, Y+1	; 0x01
    3274:	8f 5f       	subi	r24, 0xFF	; 255
    3276:	89 83       	std	Y+1, r24	; 0x01
		str[i]=UART_receiveByte();
    3278:	89 81       	ldd	r24, Y+1	; 0x01
    327a:	28 2f       	mov	r18, r24
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	8a 81       	ldd	r24, Y+2	; 0x02
    3280:	9b 81       	ldd	r25, Y+3	; 0x03
    3282:	8c 01       	movw	r16, r24
    3284:	02 0f       	add	r16, r18
    3286:	13 1f       	adc	r17, r19
    3288:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <UART_receiveByte>
    328c:	f8 01       	movw	r30, r16
    328e:	80 83       	st	Z, r24
}
void UART_receiveString(char *str)
{
	uint8 i=0;
	str[i]=UART_receiveByte();
	while(str[i]!=string_stop)
    3290:	89 81       	ldd	r24, Y+1	; 0x01
    3292:	28 2f       	mov	r18, r24
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	8a 81       	ldd	r24, Y+2	; 0x02
    3298:	9b 81       	ldd	r25, Y+3	; 0x03
    329a:	fc 01       	movw	r30, r24
    329c:	e2 0f       	add	r30, r18
    329e:	f3 1f       	adc	r31, r19
    32a0:	80 81       	ld	r24, Z
    32a2:	83 32       	cpi	r24, 0x23	; 35
    32a4:	31 f7       	brne	.-52     	; 0x3272 <UART_receiveString+0x30>
	{
		i++;
		str[i]=UART_receiveByte();
	}
	str[i]='\0';
    32a6:	89 81       	ldd	r24, Y+1	; 0x01
    32a8:	28 2f       	mov	r18, r24
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	8a 81       	ldd	r24, Y+2	; 0x02
    32ae:	9b 81       	ldd	r25, Y+3	; 0x03
    32b0:	fc 01       	movw	r30, r24
    32b2:	e2 0f       	add	r30, r18
    32b4:	f3 1f       	adc	r31, r19
    32b6:	10 82       	st	Z, r1
}
    32b8:	0f 90       	pop	r0
    32ba:	0f 90       	pop	r0
    32bc:	0f 90       	pop	r0
    32be:	cf 91       	pop	r28
    32c0:	df 91       	pop	r29
    32c2:	1f 91       	pop	r17
    32c4:	0f 91       	pop	r16
    32c6:	08 95       	ret

000032c8 <__udivmodsi4>:
    32c8:	a1 e2       	ldi	r26, 0x21	; 33
    32ca:	1a 2e       	mov	r1, r26
    32cc:	aa 1b       	sub	r26, r26
    32ce:	bb 1b       	sub	r27, r27
    32d0:	fd 01       	movw	r30, r26
    32d2:	0d c0       	rjmp	.+26     	; 0x32ee <__udivmodsi4_ep>

000032d4 <__udivmodsi4_loop>:
    32d4:	aa 1f       	adc	r26, r26
    32d6:	bb 1f       	adc	r27, r27
    32d8:	ee 1f       	adc	r30, r30
    32da:	ff 1f       	adc	r31, r31
    32dc:	a2 17       	cp	r26, r18
    32de:	b3 07       	cpc	r27, r19
    32e0:	e4 07       	cpc	r30, r20
    32e2:	f5 07       	cpc	r31, r21
    32e4:	20 f0       	brcs	.+8      	; 0x32ee <__udivmodsi4_ep>
    32e6:	a2 1b       	sub	r26, r18
    32e8:	b3 0b       	sbc	r27, r19
    32ea:	e4 0b       	sbc	r30, r20
    32ec:	f5 0b       	sbc	r31, r21

000032ee <__udivmodsi4_ep>:
    32ee:	66 1f       	adc	r22, r22
    32f0:	77 1f       	adc	r23, r23
    32f2:	88 1f       	adc	r24, r24
    32f4:	99 1f       	adc	r25, r25
    32f6:	1a 94       	dec	r1
    32f8:	69 f7       	brne	.-38     	; 0x32d4 <__udivmodsi4_loop>
    32fa:	60 95       	com	r22
    32fc:	70 95       	com	r23
    32fe:	80 95       	com	r24
    3300:	90 95       	com	r25
    3302:	9b 01       	movw	r18, r22
    3304:	ac 01       	movw	r20, r24
    3306:	bd 01       	movw	r22, r26
    3308:	cf 01       	movw	r24, r30
    330a:	08 95       	ret

0000330c <__prologue_saves__>:
    330c:	2f 92       	push	r2
    330e:	3f 92       	push	r3
    3310:	4f 92       	push	r4
    3312:	5f 92       	push	r5
    3314:	6f 92       	push	r6
    3316:	7f 92       	push	r7
    3318:	8f 92       	push	r8
    331a:	9f 92       	push	r9
    331c:	af 92       	push	r10
    331e:	bf 92       	push	r11
    3320:	cf 92       	push	r12
    3322:	df 92       	push	r13
    3324:	ef 92       	push	r14
    3326:	ff 92       	push	r15
    3328:	0f 93       	push	r16
    332a:	1f 93       	push	r17
    332c:	cf 93       	push	r28
    332e:	df 93       	push	r29
    3330:	cd b7       	in	r28, 0x3d	; 61
    3332:	de b7       	in	r29, 0x3e	; 62
    3334:	ca 1b       	sub	r28, r26
    3336:	db 0b       	sbc	r29, r27
    3338:	0f b6       	in	r0, 0x3f	; 63
    333a:	f8 94       	cli
    333c:	de bf       	out	0x3e, r29	; 62
    333e:	0f be       	out	0x3f, r0	; 63
    3340:	cd bf       	out	0x3d, r28	; 61
    3342:	09 94       	ijmp

00003344 <__epilogue_restores__>:
    3344:	2a 88       	ldd	r2, Y+18	; 0x12
    3346:	39 88       	ldd	r3, Y+17	; 0x11
    3348:	48 88       	ldd	r4, Y+16	; 0x10
    334a:	5f 84       	ldd	r5, Y+15	; 0x0f
    334c:	6e 84       	ldd	r6, Y+14	; 0x0e
    334e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3350:	8c 84       	ldd	r8, Y+12	; 0x0c
    3352:	9b 84       	ldd	r9, Y+11	; 0x0b
    3354:	aa 84       	ldd	r10, Y+10	; 0x0a
    3356:	b9 84       	ldd	r11, Y+9	; 0x09
    3358:	c8 84       	ldd	r12, Y+8	; 0x08
    335a:	df 80       	ldd	r13, Y+7	; 0x07
    335c:	ee 80       	ldd	r14, Y+6	; 0x06
    335e:	fd 80       	ldd	r15, Y+5	; 0x05
    3360:	0c 81       	ldd	r16, Y+4	; 0x04
    3362:	1b 81       	ldd	r17, Y+3	; 0x03
    3364:	aa 81       	ldd	r26, Y+2	; 0x02
    3366:	b9 81       	ldd	r27, Y+1	; 0x01
    3368:	ce 0f       	add	r28, r30
    336a:	d1 1d       	adc	r29, r1
    336c:	0f b6       	in	r0, 0x3f	; 63
    336e:	f8 94       	cli
    3370:	de bf       	out	0x3e, r29	; 62
    3372:	0f be       	out	0x3f, r0	; 63
    3374:	cd bf       	out	0x3d, r28	; 61
    3376:	ed 01       	movw	r28, r26
    3378:	08 95       	ret

0000337a <itoa>:
    337a:	fb 01       	movw	r30, r22
    337c:	9f 01       	movw	r18, r30
    337e:	e8 94       	clt
    3380:	42 30       	cpi	r20, 0x02	; 2
    3382:	c4 f0       	brlt	.+48     	; 0x33b4 <itoa+0x3a>
    3384:	45 32       	cpi	r20, 0x25	; 37
    3386:	b4 f4       	brge	.+44     	; 0x33b4 <itoa+0x3a>
    3388:	4a 30       	cpi	r20, 0x0A	; 10
    338a:	29 f4       	brne	.+10     	; 0x3396 <itoa+0x1c>
    338c:	97 fb       	bst	r25, 7
    338e:	1e f4       	brtc	.+6      	; 0x3396 <itoa+0x1c>
    3390:	90 95       	com	r25
    3392:	81 95       	neg	r24
    3394:	9f 4f       	sbci	r25, 0xFF	; 255
    3396:	64 2f       	mov	r22, r20
    3398:	77 27       	eor	r23, r23
    339a:	0e 94 ee 19 	call	0x33dc	; 0x33dc <__udivmodhi4>
    339e:	80 5d       	subi	r24, 0xD0	; 208
    33a0:	8a 33       	cpi	r24, 0x3A	; 58
    33a2:	0c f0       	brlt	.+2      	; 0x33a6 <itoa+0x2c>
    33a4:	89 5d       	subi	r24, 0xD9	; 217
    33a6:	81 93       	st	Z+, r24
    33a8:	cb 01       	movw	r24, r22
    33aa:	00 97       	sbiw	r24, 0x00	; 0
    33ac:	a1 f7       	brne	.-24     	; 0x3396 <itoa+0x1c>
    33ae:	16 f4       	brtc	.+4      	; 0x33b4 <itoa+0x3a>
    33b0:	5d e2       	ldi	r21, 0x2D	; 45
    33b2:	51 93       	st	Z+, r21
    33b4:	10 82       	st	Z, r1
    33b6:	c9 01       	movw	r24, r18
    33b8:	0c 94 de 19 	jmp	0x33bc	; 0x33bc <strrev>

000033bc <strrev>:
    33bc:	dc 01       	movw	r26, r24
    33be:	fc 01       	movw	r30, r24
    33c0:	67 2f       	mov	r22, r23
    33c2:	71 91       	ld	r23, Z+
    33c4:	77 23       	and	r23, r23
    33c6:	e1 f7       	brne	.-8      	; 0x33c0 <strrev+0x4>
    33c8:	32 97       	sbiw	r30, 0x02	; 2
    33ca:	04 c0       	rjmp	.+8      	; 0x33d4 <strrev+0x18>
    33cc:	7c 91       	ld	r23, X
    33ce:	6d 93       	st	X+, r22
    33d0:	70 83       	st	Z, r23
    33d2:	62 91       	ld	r22, -Z
    33d4:	ae 17       	cp	r26, r30
    33d6:	bf 07       	cpc	r27, r31
    33d8:	c8 f3       	brcs	.-14     	; 0x33cc <strrev+0x10>
    33da:	08 95       	ret

000033dc <__udivmodhi4>:
    33dc:	aa 1b       	sub	r26, r26
    33de:	bb 1b       	sub	r27, r27
    33e0:	51 e1       	ldi	r21, 0x11	; 17
    33e2:	07 c0       	rjmp	.+14     	; 0x33f2 <__udivmodhi4_ep>

000033e4 <__udivmodhi4_loop>:
    33e4:	aa 1f       	adc	r26, r26
    33e6:	bb 1f       	adc	r27, r27
    33e8:	a6 17       	cp	r26, r22
    33ea:	b7 07       	cpc	r27, r23
    33ec:	10 f0       	brcs	.+4      	; 0x33f2 <__udivmodhi4_ep>
    33ee:	a6 1b       	sub	r26, r22
    33f0:	b7 0b       	sbc	r27, r23

000033f2 <__udivmodhi4_ep>:
    33f2:	88 1f       	adc	r24, r24
    33f4:	99 1f       	adc	r25, r25
    33f6:	5a 95       	dec	r21
    33f8:	a9 f7       	brne	.-22     	; 0x33e4 <__udivmodhi4_loop>
    33fa:	80 95       	com	r24
    33fc:	90 95       	com	r25
    33fe:	bc 01       	movw	r22, r24
    3400:	cd 01       	movw	r24, r26
    3402:	08 95       	ret

00003404 <_exit>:
    3404:	f8 94       	cli

00003406 <__stop_program>:
    3406:	ff cf       	rjmp	.-2      	; 0x3406 <__stop_program>
