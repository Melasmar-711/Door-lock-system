
version_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  00003c9a  00003d2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800170  00800170  00003e3e  2**0
                  ALLOC
  3 .stab         00002844  00000000  00000000  00003e40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f66  00000000  00000000  00006684  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000075ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b0  00000000  00000000  0000774a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002410  00000000  00000000  000078fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d6  00000000  00000000  00009d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000ade0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000bde4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000313  00000000  00000000  0000bf64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001642  00000000  00000000  0000c277  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  0000d8b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 0f 19 	jmp	0x321e	; 0x321e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 55 19 	jmp	0x32aa	; 0x32aa <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 37       	cpi	r26, 0x75	; 117
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <main>
      8a:	0c 94 4b 1e 	jmp	0x3c96	; 0x3c96 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 be 09 	call	0x137c	; 0x137c <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 36 08 	call	0x106c	; 0x106c <__subsf3>
      be:	0e 94 1e 0a 	call	0x143c	; 0x143c <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 1e 0a 	call	0x143c	; 0x143c <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__udivdi3>:
      ea:	ae e5       	ldi	r26, 0x5E	; 94
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 14 1e 	jmp	0x3c28	; 0x3c28 <__prologue_saves__>
      f6:	a8 e0       	ldi	r26, 0x08	; 8
      f8:	4e 01       	movw	r8, r28
      fa:	08 94       	sec
      fc:	81 1c       	adc	r8, r1
      fe:	91 1c       	adc	r9, r1
     100:	f4 01       	movw	r30, r8
     102:	6a 2e       	mov	r6, r26
     104:	11 92       	st	Z+, r1
     106:	6a 94       	dec	r6
     108:	e9 f7       	brne	.-6      	; 0x104 <__udivdi3+0x1a>
     10a:	29 83       	std	Y+1, r18	; 0x01
     10c:	3a 83       	std	Y+2, r19	; 0x02
     10e:	4b 83       	std	Y+3, r20	; 0x03
     110:	5c 83       	std	Y+4, r21	; 0x04
     112:	6d 83       	std	Y+5, r22	; 0x05
     114:	7e 83       	std	Y+6, r23	; 0x06
     116:	8f 83       	std	Y+7, r24	; 0x07
     118:	98 87       	std	Y+8, r25	; 0x08
     11a:	ce 01       	movw	r24, r28
     11c:	09 96       	adiw	r24, 0x09	; 9
     11e:	fc 01       	movw	r30, r24
     120:	11 92       	st	Z+, r1
     122:	aa 95       	dec	r26
     124:	e9 f7       	brne	.-6      	; 0x120 <__udivdi3+0x36>
     126:	a9 86       	std	Y+9, r10	; 0x09
     128:	ba 86       	std	Y+10, r11	; 0x0a
     12a:	cb 86       	std	Y+11, r12	; 0x0b
     12c:	dc 86       	std	Y+12, r13	; 0x0c
     12e:	ed 86       	std	Y+13, r14	; 0x0d
     130:	fe 86       	std	Y+14, r15	; 0x0e
     132:	0f 87       	std	Y+15, r16	; 0x0f
     134:	18 8b       	std	Y+16, r17	; 0x10
     136:	29 84       	ldd	r2, Y+9	; 0x09
     138:	3a 84       	ldd	r3, Y+10	; 0x0a
     13a:	4b 84       	ldd	r4, Y+11	; 0x0b
     13c:	5c 84       	ldd	r5, Y+12	; 0x0c
     13e:	ed 84       	ldd	r14, Y+13	; 0x0d
     140:	fe 84       	ldd	r15, Y+14	; 0x0e
     142:	0f 85       	ldd	r16, Y+15	; 0x0f
     144:	18 89       	ldd	r17, Y+16	; 0x10
     146:	69 80       	ldd	r6, Y+1	; 0x01
     148:	7a 80       	ldd	r7, Y+2	; 0x02
     14a:	8b 80       	ldd	r8, Y+3	; 0x03
     14c:	9c 80       	ldd	r9, Y+4	; 0x04
     14e:	6d a6       	std	Y+45, r6	; 0x2d
     150:	7e a6       	std	Y+46, r7	; 0x2e
     152:	8f a6       	std	Y+47, r8	; 0x2f
     154:	98 aa       	std	Y+48, r9	; 0x30
     156:	6d 80       	ldd	r6, Y+5	; 0x05
     158:	7e 80       	ldd	r7, Y+6	; 0x06
     15a:	8f 80       	ldd	r8, Y+7	; 0x07
     15c:	98 84       	ldd	r9, Y+8	; 0x08
     15e:	e1 14       	cp	r14, r1
     160:	f1 04       	cpc	r15, r1
     162:	01 05       	cpc	r16, r1
     164:	11 05       	cpc	r17, r1
     166:	09 f0       	breq	.+2      	; 0x16a <__udivdi3+0x80>
     168:	b3 c3       	rjmp	.+1894   	; 0x8d0 <__stack+0x471>
     16a:	62 14       	cp	r6, r2
     16c:	73 04       	cpc	r7, r3
     16e:	84 04       	cpc	r8, r4
     170:	95 04       	cpc	r9, r5
     172:	08 f0       	brcs	.+2      	; 0x176 <__udivdi3+0x8c>
     174:	3d c1       	rjmp	.+634    	; 0x3f0 <__udivdi3+0x306>
     176:	00 e0       	ldi	r16, 0x00	; 0
     178:	20 16       	cp	r2, r16
     17a:	00 e0       	ldi	r16, 0x00	; 0
     17c:	30 06       	cpc	r3, r16
     17e:	01 e0       	ldi	r16, 0x01	; 1
     180:	40 06       	cpc	r4, r16
     182:	00 e0       	ldi	r16, 0x00	; 0
     184:	50 06       	cpc	r5, r16
     186:	88 f4       	brcc	.+34     	; 0x1aa <__udivdi3+0xc0>
     188:	1f ef       	ldi	r17, 0xFF	; 255
     18a:	21 16       	cp	r2, r17
     18c:	31 04       	cpc	r3, r1
     18e:	41 04       	cpc	r4, r1
     190:	51 04       	cpc	r5, r1
     192:	39 f0       	breq	.+14     	; 0x1a2 <__udivdi3+0xb8>
     194:	30 f0       	brcs	.+12     	; 0x1a2 <__udivdi3+0xb8>
     196:	48 e0       	ldi	r20, 0x08	; 8
     198:	e4 2e       	mov	r14, r20
     19a:	f1 2c       	mov	r15, r1
     19c:	01 2d       	mov	r16, r1
     19e:	11 2d       	mov	r17, r1
     1a0:	18 c0       	rjmp	.+48     	; 0x1d2 <__udivdi3+0xe8>
     1a2:	ee 24       	eor	r14, r14
     1a4:	ff 24       	eor	r15, r15
     1a6:	87 01       	movw	r16, r14
     1a8:	14 c0       	rjmp	.+40     	; 0x1d2 <__udivdi3+0xe8>
     1aa:	20 e0       	ldi	r18, 0x00	; 0
     1ac:	22 16       	cp	r2, r18
     1ae:	20 e0       	ldi	r18, 0x00	; 0
     1b0:	32 06       	cpc	r3, r18
     1b2:	20 e0       	ldi	r18, 0x00	; 0
     1b4:	42 06       	cpc	r4, r18
     1b6:	21 e0       	ldi	r18, 0x01	; 1
     1b8:	52 06       	cpc	r5, r18
     1ba:	30 f0       	brcs	.+12     	; 0x1c8 <__udivdi3+0xde>
     1bc:	38 e1       	ldi	r19, 0x18	; 24
     1be:	e3 2e       	mov	r14, r19
     1c0:	f1 2c       	mov	r15, r1
     1c2:	01 2d       	mov	r16, r1
     1c4:	11 2d       	mov	r17, r1
     1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <__udivdi3+0xe8>
     1c8:	20 e1       	ldi	r18, 0x10	; 16
     1ca:	e2 2e       	mov	r14, r18
     1cc:	f1 2c       	mov	r15, r1
     1ce:	01 2d       	mov	r16, r1
     1d0:	11 2d       	mov	r17, r1
     1d2:	d2 01       	movw	r26, r4
     1d4:	c1 01       	movw	r24, r2
     1d6:	0e 2c       	mov	r0, r14
     1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <__udivdi3+0xf8>
     1da:	b6 95       	lsr	r27
     1dc:	a7 95       	ror	r26
     1de:	97 95       	ror	r25
     1e0:	87 95       	ror	r24
     1e2:	0a 94       	dec	r0
     1e4:	d2 f7       	brpl	.-12     	; 0x1da <__udivdi3+0xf0>
     1e6:	88 59       	subi	r24, 0x98	; 152
     1e8:	9f 4f       	sbci	r25, 0xFF	; 255
     1ea:	dc 01       	movw	r26, r24
     1ec:	2c 91       	ld	r18, X
     1ee:	80 e2       	ldi	r24, 0x20	; 32
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	a0 e0       	ldi	r26, 0x00	; 0
     1f4:	b0 e0       	ldi	r27, 0x00	; 0
     1f6:	8e 19       	sub	r24, r14
     1f8:	9f 09       	sbc	r25, r15
     1fa:	a0 0b       	sbc	r26, r16
     1fc:	b1 0b       	sbc	r27, r17
     1fe:	7c 01       	movw	r14, r24
     200:	8d 01       	movw	r16, r26
     202:	e2 1a       	sub	r14, r18
     204:	f1 08       	sbc	r15, r1
     206:	01 09       	sbc	r16, r1
     208:	11 09       	sbc	r17, r1
     20a:	e1 14       	cp	r14, r1
     20c:	f1 04       	cpc	r15, r1
     20e:	01 05       	cpc	r16, r1
     210:	11 05       	cpc	r17, r1
     212:	a1 f1       	breq	.+104    	; 0x27c <__udivdi3+0x192>
     214:	0e 2c       	mov	r0, r14
     216:	04 c0       	rjmp	.+8      	; 0x220 <__udivdi3+0x136>
     218:	22 0c       	add	r2, r2
     21a:	33 1c       	adc	r3, r3
     21c:	44 1c       	adc	r4, r4
     21e:	55 1c       	adc	r5, r5
     220:	0a 94       	dec	r0
     222:	d2 f7       	brpl	.-12     	; 0x218 <__udivdi3+0x12e>
     224:	a4 01       	movw	r20, r8
     226:	93 01       	movw	r18, r6
     228:	0e 2c       	mov	r0, r14
     22a:	04 c0       	rjmp	.+8      	; 0x234 <__udivdi3+0x14a>
     22c:	22 0f       	add	r18, r18
     22e:	33 1f       	adc	r19, r19
     230:	44 1f       	adc	r20, r20
     232:	55 1f       	adc	r21, r21
     234:	0a 94       	dec	r0
     236:	d2 f7       	brpl	.-12     	; 0x22c <__udivdi3+0x142>
     238:	80 e2       	ldi	r24, 0x20	; 32
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	8e 19       	sub	r24, r14
     23e:	9f 09       	sbc	r25, r15
     240:	6d a4       	ldd	r6, Y+45	; 0x2d
     242:	7e a4       	ldd	r7, Y+46	; 0x2e
     244:	8f a4       	ldd	r8, Y+47	; 0x2f
     246:	98 a8       	ldd	r9, Y+48	; 0x30
     248:	04 c0       	rjmp	.+8      	; 0x252 <__udivdi3+0x168>
     24a:	96 94       	lsr	r9
     24c:	87 94       	ror	r8
     24e:	77 94       	ror	r7
     250:	67 94       	ror	r6
     252:	8a 95       	dec	r24
     254:	d2 f7       	brpl	.-12     	; 0x24a <__udivdi3+0x160>
     256:	62 2a       	or	r6, r18
     258:	73 2a       	or	r7, r19
     25a:	84 2a       	or	r8, r20
     25c:	95 2a       	or	r9, r21
     25e:	ad a4       	ldd	r10, Y+45	; 0x2d
     260:	be a4       	ldd	r11, Y+46	; 0x2e
     262:	cf a4       	ldd	r12, Y+47	; 0x2f
     264:	d8 a8       	ldd	r13, Y+48	; 0x30
     266:	04 c0       	rjmp	.+8      	; 0x270 <__udivdi3+0x186>
     268:	aa 0c       	add	r10, r10
     26a:	bb 1c       	adc	r11, r11
     26c:	cc 1c       	adc	r12, r12
     26e:	dd 1c       	adc	r13, r13
     270:	ea 94       	dec	r14
     272:	d2 f7       	brpl	.-12     	; 0x268 <__udivdi3+0x17e>
     274:	ad a6       	std	Y+45, r10	; 0x2d
     276:	be a6       	std	Y+46, r11	; 0x2e
     278:	cf a6       	std	Y+47, r12	; 0x2f
     27a:	d8 aa       	std	Y+48, r13	; 0x30
     27c:	62 01       	movw	r12, r4
     27e:	ee 24       	eor	r14, r14
     280:	ff 24       	eor	r15, r15
     282:	cd aa       	std	Y+53, r12	; 0x35
     284:	de aa       	std	Y+54, r13	; 0x36
     286:	ef aa       	std	Y+55, r14	; 0x37
     288:	f8 ae       	std	Y+56, r15	; 0x38
     28a:	92 01       	movw	r18, r4
     28c:	81 01       	movw	r16, r2
     28e:	20 70       	andi	r18, 0x00	; 0
     290:	30 70       	andi	r19, 0x00	; 0
     292:	09 af       	std	Y+57, r16	; 0x39
     294:	1a af       	std	Y+58, r17	; 0x3a
     296:	2b af       	std	Y+59, r18	; 0x3b
     298:	3c af       	std	Y+60, r19	; 0x3c
     29a:	c4 01       	movw	r24, r8
     29c:	b3 01       	movw	r22, r6
     29e:	a7 01       	movw	r20, r14
     2a0:	96 01       	movw	r18, r12
     2a2:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     2a6:	7b 01       	movw	r14, r22
     2a8:	8c 01       	movw	r16, r24
     2aa:	c4 01       	movw	r24, r8
     2ac:	b3 01       	movw	r22, r6
     2ae:	2d a9       	ldd	r18, Y+53	; 0x35
     2b0:	3e a9       	ldd	r19, Y+54	; 0x36
     2b2:	4f a9       	ldd	r20, Y+55	; 0x37
     2b4:	58 ad       	ldd	r21, Y+56	; 0x38
     2b6:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     2ba:	c9 01       	movw	r24, r18
     2bc:	da 01       	movw	r26, r20
     2be:	3c 01       	movw	r6, r24
     2c0:	4d 01       	movw	r8, r26
     2c2:	c4 01       	movw	r24, r8
     2c4:	b3 01       	movw	r22, r6
     2c6:	29 ad       	ldd	r18, Y+57	; 0x39
     2c8:	3a ad       	ldd	r19, Y+58	; 0x3a
     2ca:	4b ad       	ldd	r20, Y+59	; 0x3b
     2cc:	5c ad       	ldd	r21, Y+60	; 0x3c
     2ce:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__mulsi3>
     2d2:	9b 01       	movw	r18, r22
     2d4:	ac 01       	movw	r20, r24
     2d6:	87 01       	movw	r16, r14
     2d8:	ff 24       	eor	r15, r15
     2da:	ee 24       	eor	r14, r14
     2dc:	ad a4       	ldd	r10, Y+45	; 0x2d
     2de:	be a4       	ldd	r11, Y+46	; 0x2e
     2e0:	cf a4       	ldd	r12, Y+47	; 0x2f
     2e2:	d8 a8       	ldd	r13, Y+48	; 0x30
     2e4:	c6 01       	movw	r24, r12
     2e6:	aa 27       	eor	r26, r26
     2e8:	bb 27       	eor	r27, r27
     2ea:	57 01       	movw	r10, r14
     2ec:	68 01       	movw	r12, r16
     2ee:	a8 2a       	or	r10, r24
     2f0:	b9 2a       	or	r11, r25
     2f2:	ca 2a       	or	r12, r26
     2f4:	db 2a       	or	r13, r27
     2f6:	a2 16       	cp	r10, r18
     2f8:	b3 06       	cpc	r11, r19
     2fa:	c4 06       	cpc	r12, r20
     2fc:	d5 06       	cpc	r13, r21
     2fe:	e0 f4       	brcc	.+56     	; 0x338 <__udivdi3+0x24e>
     300:	08 94       	sec
     302:	61 08       	sbc	r6, r1
     304:	71 08       	sbc	r7, r1
     306:	81 08       	sbc	r8, r1
     308:	91 08       	sbc	r9, r1
     30a:	a2 0c       	add	r10, r2
     30c:	b3 1c       	adc	r11, r3
     30e:	c4 1c       	adc	r12, r4
     310:	d5 1c       	adc	r13, r5
     312:	a2 14       	cp	r10, r2
     314:	b3 04       	cpc	r11, r3
     316:	c4 04       	cpc	r12, r4
     318:	d5 04       	cpc	r13, r5
     31a:	70 f0       	brcs	.+28     	; 0x338 <__udivdi3+0x24e>
     31c:	a2 16       	cp	r10, r18
     31e:	b3 06       	cpc	r11, r19
     320:	c4 06       	cpc	r12, r20
     322:	d5 06       	cpc	r13, r21
     324:	48 f4       	brcc	.+18     	; 0x338 <__udivdi3+0x24e>
     326:	08 94       	sec
     328:	61 08       	sbc	r6, r1
     32a:	71 08       	sbc	r7, r1
     32c:	81 08       	sbc	r8, r1
     32e:	91 08       	sbc	r9, r1
     330:	a2 0c       	add	r10, r2
     332:	b3 1c       	adc	r11, r3
     334:	c4 1c       	adc	r12, r4
     336:	d5 1c       	adc	r13, r5
     338:	a2 1a       	sub	r10, r18
     33a:	b3 0a       	sbc	r11, r19
     33c:	c4 0a       	sbc	r12, r20
     33e:	d5 0a       	sbc	r13, r21
     340:	c6 01       	movw	r24, r12
     342:	b5 01       	movw	r22, r10
     344:	2d a9       	ldd	r18, Y+53	; 0x35
     346:	3e a9       	ldd	r19, Y+54	; 0x36
     348:	4f a9       	ldd	r20, Y+55	; 0x37
     34a:	58 ad       	ldd	r21, Y+56	; 0x38
     34c:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     350:	7b 01       	movw	r14, r22
     352:	8c 01       	movw	r16, r24
     354:	c6 01       	movw	r24, r12
     356:	b5 01       	movw	r22, r10
     358:	2d a9       	ldd	r18, Y+53	; 0x35
     35a:	3e a9       	ldd	r19, Y+54	; 0x36
     35c:	4f a9       	ldd	r20, Y+55	; 0x37
     35e:	58 ad       	ldd	r21, Y+56	; 0x38
     360:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     364:	c9 01       	movw	r24, r18
     366:	da 01       	movw	r26, r20
     368:	5c 01       	movw	r10, r24
     36a:	6d 01       	movw	r12, r26
     36c:	c6 01       	movw	r24, r12
     36e:	b5 01       	movw	r22, r10
     370:	29 ad       	ldd	r18, Y+57	; 0x39
     372:	3a ad       	ldd	r19, Y+58	; 0x3a
     374:	4b ad       	ldd	r20, Y+59	; 0x3b
     376:	5c ad       	ldd	r21, Y+60	; 0x3c
     378:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__mulsi3>
     37c:	9b 01       	movw	r18, r22
     37e:	ac 01       	movw	r20, r24
     380:	87 01       	movw	r16, r14
     382:	ff 24       	eor	r15, r15
     384:	ee 24       	eor	r14, r14
     386:	8d a5       	ldd	r24, Y+45	; 0x2d
     388:	9e a5       	ldd	r25, Y+46	; 0x2e
     38a:	af a5       	ldd	r26, Y+47	; 0x2f
     38c:	b8 a9       	ldd	r27, Y+48	; 0x30
     38e:	a0 70       	andi	r26, 0x00	; 0
     390:	b0 70       	andi	r27, 0x00	; 0
     392:	e8 2a       	or	r14, r24
     394:	f9 2a       	or	r15, r25
     396:	0a 2b       	or	r16, r26
     398:	1b 2b       	or	r17, r27
     39a:	e2 16       	cp	r14, r18
     39c:	f3 06       	cpc	r15, r19
     39e:	04 07       	cpc	r16, r20
     3a0:	15 07       	cpc	r17, r21
     3a2:	c0 f4       	brcc	.+48     	; 0x3d4 <__udivdi3+0x2ea>
     3a4:	08 94       	sec
     3a6:	a1 08       	sbc	r10, r1
     3a8:	b1 08       	sbc	r11, r1
     3aa:	c1 08       	sbc	r12, r1
     3ac:	d1 08       	sbc	r13, r1
     3ae:	e2 0c       	add	r14, r2
     3b0:	f3 1c       	adc	r15, r3
     3b2:	04 1d       	adc	r16, r4
     3b4:	15 1d       	adc	r17, r5
     3b6:	e2 14       	cp	r14, r2
     3b8:	f3 04       	cpc	r15, r3
     3ba:	04 05       	cpc	r16, r4
     3bc:	15 05       	cpc	r17, r5
     3be:	50 f0       	brcs	.+20     	; 0x3d4 <__udivdi3+0x2ea>
     3c0:	e2 16       	cp	r14, r18
     3c2:	f3 06       	cpc	r15, r19
     3c4:	04 07       	cpc	r16, r20
     3c6:	15 07       	cpc	r17, r21
     3c8:	28 f4       	brcc	.+10     	; 0x3d4 <__udivdi3+0x2ea>
     3ca:	08 94       	sec
     3cc:	a1 08       	sbc	r10, r1
     3ce:	b1 08       	sbc	r11, r1
     3d0:	c1 08       	sbc	r12, r1
     3d2:	d1 08       	sbc	r13, r1
     3d4:	d3 01       	movw	r26, r6
     3d6:	99 27       	eor	r25, r25
     3d8:	88 27       	eor	r24, r24
     3da:	86 01       	movw	r16, r12
     3dc:	75 01       	movw	r14, r10
     3de:	e8 2a       	or	r14, r24
     3e0:	f9 2a       	or	r15, r25
     3e2:	0a 2b       	or	r16, r26
     3e4:	1b 2b       	or	r17, r27
     3e6:	e9 aa       	std	Y+49, r14	; 0x31
     3e8:	fa aa       	std	Y+50, r15	; 0x32
     3ea:	0b ab       	std	Y+51, r16	; 0x33
     3ec:	1c ab       	std	Y+52, r17	; 0x34
     3ee:	cf c4       	rjmp	.+2462   	; 0xd8e <__stack+0x92f>
     3f0:	21 14       	cp	r2, r1
     3f2:	31 04       	cpc	r3, r1
     3f4:	41 04       	cpc	r4, r1
     3f6:	51 04       	cpc	r5, r1
     3f8:	71 f4       	brne	.+28     	; 0x416 <__udivdi3+0x32c>
     3fa:	61 e0       	ldi	r22, 0x01	; 1
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	40 e0       	ldi	r20, 0x00	; 0
     408:	50 e0       	ldi	r21, 0x00	; 0
     40a:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     40e:	c9 01       	movw	r24, r18
     410:	da 01       	movw	r26, r20
     412:	1c 01       	movw	r2, r24
     414:	2d 01       	movw	r4, r26
     416:	00 e0       	ldi	r16, 0x00	; 0
     418:	20 16       	cp	r2, r16
     41a:	00 e0       	ldi	r16, 0x00	; 0
     41c:	30 06       	cpc	r3, r16
     41e:	01 e0       	ldi	r16, 0x01	; 1
     420:	40 06       	cpc	r4, r16
     422:	00 e0       	ldi	r16, 0x00	; 0
     424:	50 06       	cpc	r5, r16
     426:	88 f4       	brcc	.+34     	; 0x44a <__udivdi3+0x360>
     428:	1f ef       	ldi	r17, 0xFF	; 255
     42a:	21 16       	cp	r2, r17
     42c:	31 04       	cpc	r3, r1
     42e:	41 04       	cpc	r4, r1
     430:	51 04       	cpc	r5, r1
     432:	31 f0       	breq	.+12     	; 0x440 <__udivdi3+0x356>
     434:	28 f0       	brcs	.+10     	; 0x440 <__udivdi3+0x356>
     436:	48 e0       	ldi	r20, 0x08	; 8
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	70 e0       	ldi	r23, 0x00	; 0
     43e:	17 c0       	rjmp	.+46     	; 0x46e <__stack+0xf>
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	12 c0       	rjmp	.+36     	; 0x46e <__stack+0xf>
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	22 16       	cp	r2, r18
     44e:	20 e0       	ldi	r18, 0x00	; 0
     450:	32 06       	cpc	r3, r18
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	42 06       	cpc	r4, r18
     456:	21 e0       	ldi	r18, 0x01	; 1
     458:	52 06       	cpc	r5, r18
     45a:	28 f0       	brcs	.+10     	; 0x466 <__stack+0x7>
     45c:	48 e1       	ldi	r20, 0x18	; 24
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	04 c0       	rjmp	.+8      	; 0x46e <__stack+0xf>
     466:	40 e1       	ldi	r20, 0x10	; 16
     468:	50 e0       	ldi	r21, 0x00	; 0
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	d2 01       	movw	r26, r4
     470:	c1 01       	movw	r24, r2
     472:	04 2e       	mov	r0, r20
     474:	04 c0       	rjmp	.+8      	; 0x47e <__stack+0x1f>
     476:	b6 95       	lsr	r27
     478:	a7 95       	ror	r26
     47a:	97 95       	ror	r25
     47c:	87 95       	ror	r24
     47e:	0a 94       	dec	r0
     480:	d2 f7       	brpl	.-12     	; 0x476 <__stack+0x17>
     482:	88 59       	subi	r24, 0x98	; 152
     484:	9f 4f       	sbci	r25, 0xFF	; 255
     486:	dc 01       	movw	r26, r24
     488:	2c 91       	ld	r18, X
     48a:	e0 e2       	ldi	r30, 0x20	; 32
     48c:	ee 2e       	mov	r14, r30
     48e:	f1 2c       	mov	r15, r1
     490:	01 2d       	mov	r16, r1
     492:	11 2d       	mov	r17, r1
     494:	d8 01       	movw	r26, r16
     496:	c7 01       	movw	r24, r14
     498:	84 1b       	sub	r24, r20
     49a:	95 0b       	sbc	r25, r21
     49c:	a6 0b       	sbc	r26, r22
     49e:	b7 0b       	sbc	r27, r23
     4a0:	82 1b       	sub	r24, r18
     4a2:	91 09       	sbc	r25, r1
     4a4:	a1 09       	sbc	r26, r1
     4a6:	b1 09       	sbc	r27, r1
     4a8:	00 97       	sbiw	r24, 0x00	; 0
     4aa:	a1 05       	cpc	r26, r1
     4ac:	b1 05       	cpc	r27, r1
     4ae:	61 f4       	brne	.+24     	; 0x4c8 <__stack+0x69>
     4b0:	64 01       	movw	r12, r8
     4b2:	53 01       	movw	r10, r6
     4b4:	a2 18       	sub	r10, r2
     4b6:	b3 08       	sbc	r11, r3
     4b8:	c4 08       	sbc	r12, r4
     4ba:	d5 08       	sbc	r13, r5
     4bc:	31 e0       	ldi	r19, 0x01	; 1
     4be:	63 2e       	mov	r6, r19
     4c0:	71 2c       	mov	r7, r1
     4c2:	81 2c       	mov	r8, r1
     4c4:	91 2c       	mov	r9, r1
     4c6:	1e c1       	rjmp	.+572    	; 0x704 <__stack+0x2a5>
     4c8:	6f 96       	adiw	r28, 0x1f	; 31
     4ca:	8f af       	std	Y+63, r24	; 0x3f
     4cc:	6f 97       	sbiw	r28, 0x1f	; 31
     4ce:	08 2e       	mov	r0, r24
     4d0:	04 c0       	rjmp	.+8      	; 0x4da <__stack+0x7b>
     4d2:	22 0c       	add	r2, r2
     4d4:	33 1c       	adc	r3, r3
     4d6:	44 1c       	adc	r4, r4
     4d8:	55 1c       	adc	r5, r5
     4da:	0a 94       	dec	r0
     4dc:	d2 f7       	brpl	.-12     	; 0x4d2 <__stack+0x73>
     4de:	ee 2d       	mov	r30, r14
     4e0:	e8 1b       	sub	r30, r24
     4e2:	64 01       	movw	r12, r8
     4e4:	53 01       	movw	r10, r6
     4e6:	0e 2e       	mov	r0, r30
     4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <__stack+0x93>
     4ea:	d6 94       	lsr	r13
     4ec:	c7 94       	ror	r12
     4ee:	b7 94       	ror	r11
     4f0:	a7 94       	ror	r10
     4f2:	0a 94       	dec	r0
     4f4:	d2 f7       	brpl	.-12     	; 0x4ea <__stack+0x8b>
     4f6:	a4 01       	movw	r20, r8
     4f8:	93 01       	movw	r18, r6
     4fa:	6f 96       	adiw	r28, 0x1f	; 31
     4fc:	0f ac       	ldd	r0, Y+63	; 0x3f
     4fe:	6f 97       	sbiw	r28, 0x1f	; 31
     500:	04 c0       	rjmp	.+8      	; 0x50a <__stack+0xab>
     502:	22 0f       	add	r18, r18
     504:	33 1f       	adc	r19, r19
     506:	44 1f       	adc	r20, r20
     508:	55 1f       	adc	r21, r21
     50a:	0a 94       	dec	r0
     50c:	d2 f7       	brpl	.-12     	; 0x502 <__stack+0xa3>
     50e:	6d a4       	ldd	r6, Y+45	; 0x2d
     510:	7e a4       	ldd	r7, Y+46	; 0x2e
     512:	8f a4       	ldd	r8, Y+47	; 0x2f
     514:	98 a8       	ldd	r9, Y+48	; 0x30
     516:	0e 2e       	mov	r0, r30
     518:	04 c0       	rjmp	.+8      	; 0x522 <__stack+0xc3>
     51a:	96 94       	lsr	r9
     51c:	87 94       	ror	r8
     51e:	77 94       	ror	r7
     520:	67 94       	ror	r6
     522:	0a 94       	dec	r0
     524:	d2 f7       	brpl	.-12     	; 0x51a <__stack+0xbb>
     526:	84 01       	movw	r16, r8
     528:	73 01       	movw	r14, r6
     52a:	e2 2a       	or	r14, r18
     52c:	f3 2a       	or	r15, r19
     52e:	04 2b       	or	r16, r20
     530:	15 2b       	or	r17, r21
     532:	e9 a6       	std	Y+41, r14	; 0x29
     534:	fa a6       	std	Y+42, r15	; 0x2a
     536:	0b a7       	std	Y+43, r16	; 0x2b
     538:	1c a7       	std	Y+44, r17	; 0x2c
     53a:	32 01       	movw	r6, r4
     53c:	88 24       	eor	r8, r8
     53e:	99 24       	eor	r9, r9
     540:	92 01       	movw	r18, r4
     542:	81 01       	movw	r16, r2
     544:	20 70       	andi	r18, 0x00	; 0
     546:	30 70       	andi	r19, 0x00	; 0
     548:	21 96       	adiw	r28, 0x01	; 1
     54a:	0c af       	std	Y+60, r16	; 0x3c
     54c:	1d af       	std	Y+61, r17	; 0x3d
     54e:	2e af       	std	Y+62, r18	; 0x3e
     550:	3f af       	std	Y+63, r19	; 0x3f
     552:	21 97       	sbiw	r28, 0x01	; 1
     554:	c6 01       	movw	r24, r12
     556:	b5 01       	movw	r22, r10
     558:	a4 01       	movw	r20, r8
     55a:	93 01       	movw	r18, r6
     55c:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     560:	7b 01       	movw	r14, r22
     562:	8c 01       	movw	r16, r24
     564:	c6 01       	movw	r24, r12
     566:	b5 01       	movw	r22, r10
     568:	a4 01       	movw	r20, r8
     56a:	93 01       	movw	r18, r6
     56c:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     570:	c9 01       	movw	r24, r18
     572:	da 01       	movw	r26, r20
     574:	25 96       	adiw	r28, 0x05	; 5
     576:	8c af       	std	Y+60, r24	; 0x3c
     578:	9d af       	std	Y+61, r25	; 0x3d
     57a:	ae af       	std	Y+62, r26	; 0x3e
     57c:	bf af       	std	Y+63, r27	; 0x3f
     57e:	25 97       	sbiw	r28, 0x05	; 5
     580:	bc 01       	movw	r22, r24
     582:	cd 01       	movw	r24, r26
     584:	21 96       	adiw	r28, 0x01	; 1
     586:	2c ad       	ldd	r18, Y+60	; 0x3c
     588:	3d ad       	ldd	r19, Y+61	; 0x3d
     58a:	4e ad       	ldd	r20, Y+62	; 0x3e
     58c:	5f ad       	ldd	r21, Y+63	; 0x3f
     58e:	21 97       	sbiw	r28, 0x01	; 1
     590:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__mulsi3>
     594:	9b 01       	movw	r18, r22
     596:	ac 01       	movw	r20, r24
     598:	87 01       	movw	r16, r14
     59a:	ff 24       	eor	r15, r15
     59c:	ee 24       	eor	r14, r14
     59e:	a9 a4       	ldd	r10, Y+41	; 0x29
     5a0:	ba a4       	ldd	r11, Y+42	; 0x2a
     5a2:	cb a4       	ldd	r12, Y+43	; 0x2b
     5a4:	dc a4       	ldd	r13, Y+44	; 0x2c
     5a6:	c6 01       	movw	r24, r12
     5a8:	aa 27       	eor	r26, r26
     5aa:	bb 27       	eor	r27, r27
     5ac:	5c 01       	movw	r10, r24
     5ae:	6d 01       	movw	r12, r26
     5b0:	ae 28       	or	r10, r14
     5b2:	bf 28       	or	r11, r15
     5b4:	c0 2a       	or	r12, r16
     5b6:	d1 2a       	or	r13, r17
     5b8:	a2 16       	cp	r10, r18
     5ba:	b3 06       	cpc	r11, r19
     5bc:	c4 06       	cpc	r12, r20
     5be:	d5 06       	cpc	r13, r21
     5c0:	60 f5       	brcc	.+88     	; 0x61a <__stack+0x1bb>
     5c2:	25 96       	adiw	r28, 0x05	; 5
     5c4:	6c ad       	ldd	r22, Y+60	; 0x3c
     5c6:	7d ad       	ldd	r23, Y+61	; 0x3d
     5c8:	8e ad       	ldd	r24, Y+62	; 0x3e
     5ca:	9f ad       	ldd	r25, Y+63	; 0x3f
     5cc:	25 97       	sbiw	r28, 0x05	; 5
     5ce:	61 50       	subi	r22, 0x01	; 1
     5d0:	70 40       	sbci	r23, 0x00	; 0
     5d2:	80 40       	sbci	r24, 0x00	; 0
     5d4:	90 40       	sbci	r25, 0x00	; 0
     5d6:	25 96       	adiw	r28, 0x05	; 5
     5d8:	6c af       	std	Y+60, r22	; 0x3c
     5da:	7d af       	std	Y+61, r23	; 0x3d
     5dc:	8e af       	std	Y+62, r24	; 0x3e
     5de:	9f af       	std	Y+63, r25	; 0x3f
     5e0:	25 97       	sbiw	r28, 0x05	; 5
     5e2:	a2 0c       	add	r10, r2
     5e4:	b3 1c       	adc	r11, r3
     5e6:	c4 1c       	adc	r12, r4
     5e8:	d5 1c       	adc	r13, r5
     5ea:	a2 14       	cp	r10, r2
     5ec:	b3 04       	cpc	r11, r3
     5ee:	c4 04       	cpc	r12, r4
     5f0:	d5 04       	cpc	r13, r5
     5f2:	98 f0       	brcs	.+38     	; 0x61a <__stack+0x1bb>
     5f4:	a2 16       	cp	r10, r18
     5f6:	b3 06       	cpc	r11, r19
     5f8:	c4 06       	cpc	r12, r20
     5fa:	d5 06       	cpc	r13, r21
     5fc:	70 f4       	brcc	.+28     	; 0x61a <__stack+0x1bb>
     5fe:	61 50       	subi	r22, 0x01	; 1
     600:	70 40       	sbci	r23, 0x00	; 0
     602:	80 40       	sbci	r24, 0x00	; 0
     604:	90 40       	sbci	r25, 0x00	; 0
     606:	25 96       	adiw	r28, 0x05	; 5
     608:	6c af       	std	Y+60, r22	; 0x3c
     60a:	7d af       	std	Y+61, r23	; 0x3d
     60c:	8e af       	std	Y+62, r24	; 0x3e
     60e:	9f af       	std	Y+63, r25	; 0x3f
     610:	25 97       	sbiw	r28, 0x05	; 5
     612:	a2 0c       	add	r10, r2
     614:	b3 1c       	adc	r11, r3
     616:	c4 1c       	adc	r12, r4
     618:	d5 1c       	adc	r13, r5
     61a:	a2 1a       	sub	r10, r18
     61c:	b3 0a       	sbc	r11, r19
     61e:	c4 0a       	sbc	r12, r20
     620:	d5 0a       	sbc	r13, r21
     622:	c6 01       	movw	r24, r12
     624:	b5 01       	movw	r22, r10
     626:	a4 01       	movw	r20, r8
     628:	93 01       	movw	r18, r6
     62a:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     62e:	7b 01       	movw	r14, r22
     630:	8c 01       	movw	r16, r24
     632:	c6 01       	movw	r24, r12
     634:	b5 01       	movw	r22, r10
     636:	a4 01       	movw	r20, r8
     638:	93 01       	movw	r18, r6
     63a:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     63e:	c9 01       	movw	r24, r18
     640:	da 01       	movw	r26, r20
     642:	3c 01       	movw	r6, r24
     644:	4d 01       	movw	r8, r26
     646:	c4 01       	movw	r24, r8
     648:	b3 01       	movw	r22, r6
     64a:	21 96       	adiw	r28, 0x01	; 1
     64c:	2c ad       	ldd	r18, Y+60	; 0x3c
     64e:	3d ad       	ldd	r19, Y+61	; 0x3d
     650:	4e ad       	ldd	r20, Y+62	; 0x3e
     652:	5f ad       	ldd	r21, Y+63	; 0x3f
     654:	21 97       	sbiw	r28, 0x01	; 1
     656:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__mulsi3>
     65a:	9b 01       	movw	r18, r22
     65c:	ac 01       	movw	r20, r24
     65e:	87 01       	movw	r16, r14
     660:	ff 24       	eor	r15, r15
     662:	ee 24       	eor	r14, r14
     664:	89 a5       	ldd	r24, Y+41	; 0x29
     666:	9a a5       	ldd	r25, Y+42	; 0x2a
     668:	ab a5       	ldd	r26, Y+43	; 0x2b
     66a:	bc a5       	ldd	r27, Y+44	; 0x2c
     66c:	a0 70       	andi	r26, 0x00	; 0
     66e:	b0 70       	andi	r27, 0x00	; 0
     670:	57 01       	movw	r10, r14
     672:	68 01       	movw	r12, r16
     674:	a8 2a       	or	r10, r24
     676:	b9 2a       	or	r11, r25
     678:	ca 2a       	or	r12, r26
     67a:	db 2a       	or	r13, r27
     67c:	a2 16       	cp	r10, r18
     67e:	b3 06       	cpc	r11, r19
     680:	c4 06       	cpc	r12, r20
     682:	d5 06       	cpc	r13, r21
     684:	e0 f4       	brcc	.+56     	; 0x6be <__stack+0x25f>
     686:	08 94       	sec
     688:	61 08       	sbc	r6, r1
     68a:	71 08       	sbc	r7, r1
     68c:	81 08       	sbc	r8, r1
     68e:	91 08       	sbc	r9, r1
     690:	a2 0c       	add	r10, r2
     692:	b3 1c       	adc	r11, r3
     694:	c4 1c       	adc	r12, r4
     696:	d5 1c       	adc	r13, r5
     698:	a2 14       	cp	r10, r2
     69a:	b3 04       	cpc	r11, r3
     69c:	c4 04       	cpc	r12, r4
     69e:	d5 04       	cpc	r13, r5
     6a0:	70 f0       	brcs	.+28     	; 0x6be <__stack+0x25f>
     6a2:	a2 16       	cp	r10, r18
     6a4:	b3 06       	cpc	r11, r19
     6a6:	c4 06       	cpc	r12, r20
     6a8:	d5 06       	cpc	r13, r21
     6aa:	48 f4       	brcc	.+18     	; 0x6be <__stack+0x25f>
     6ac:	08 94       	sec
     6ae:	61 08       	sbc	r6, r1
     6b0:	71 08       	sbc	r7, r1
     6b2:	81 08       	sbc	r8, r1
     6b4:	91 08       	sbc	r9, r1
     6b6:	a2 0c       	add	r10, r2
     6b8:	b3 1c       	adc	r11, r3
     6ba:	c4 1c       	adc	r12, r4
     6bc:	d5 1c       	adc	r13, r5
     6be:	8d a5       	ldd	r24, Y+45	; 0x2d
     6c0:	9e a5       	ldd	r25, Y+46	; 0x2e
     6c2:	af a5       	ldd	r26, Y+47	; 0x2f
     6c4:	b8 a9       	ldd	r27, Y+48	; 0x30
     6c6:	6f 96       	adiw	r28, 0x1f	; 31
     6c8:	0f ac       	ldd	r0, Y+63	; 0x3f
     6ca:	6f 97       	sbiw	r28, 0x1f	; 31
     6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <__stack+0x277>
     6ce:	88 0f       	add	r24, r24
     6d0:	99 1f       	adc	r25, r25
     6d2:	aa 1f       	adc	r26, r26
     6d4:	bb 1f       	adc	r27, r27
     6d6:	0a 94       	dec	r0
     6d8:	d2 f7       	brpl	.-12     	; 0x6ce <__stack+0x26f>
     6da:	8d a7       	std	Y+45, r24	; 0x2d
     6dc:	9e a7       	std	Y+46, r25	; 0x2e
     6de:	af a7       	std	Y+47, r26	; 0x2f
     6e0:	b8 ab       	std	Y+48, r27	; 0x30
     6e2:	a2 1a       	sub	r10, r18
     6e4:	b3 0a       	sbc	r11, r19
     6e6:	c4 0a       	sbc	r12, r20
     6e8:	d5 0a       	sbc	r13, r21
     6ea:	25 96       	adiw	r28, 0x05	; 5
     6ec:	ec ac       	ldd	r14, Y+60	; 0x3c
     6ee:	fd ac       	ldd	r15, Y+61	; 0x3d
     6f0:	0e ad       	ldd	r16, Y+62	; 0x3e
     6f2:	1f ad       	ldd	r17, Y+63	; 0x3f
     6f4:	25 97       	sbiw	r28, 0x05	; 5
     6f6:	d7 01       	movw	r26, r14
     6f8:	99 27       	eor	r25, r25
     6fa:	88 27       	eor	r24, r24
     6fc:	68 2a       	or	r6, r24
     6fe:	79 2a       	or	r7, r25
     700:	8a 2a       	or	r8, r26
     702:	9b 2a       	or	r9, r27
     704:	82 01       	movw	r16, r4
     706:	22 27       	eor	r18, r18
     708:	33 27       	eor	r19, r19
     70a:	29 96       	adiw	r28, 0x09	; 9
     70c:	0c af       	std	Y+60, r16	; 0x3c
     70e:	1d af       	std	Y+61, r17	; 0x3d
     710:	2e af       	std	Y+62, r18	; 0x3e
     712:	3f af       	std	Y+63, r19	; 0x3f
     714:	29 97       	sbiw	r28, 0x09	; 9
     716:	a2 01       	movw	r20, r4
     718:	91 01       	movw	r18, r2
     71a:	40 70       	andi	r20, 0x00	; 0
     71c:	50 70       	andi	r21, 0x00	; 0
     71e:	2d 96       	adiw	r28, 0x0d	; 13
     720:	2c af       	std	Y+60, r18	; 0x3c
     722:	3d af       	std	Y+61, r19	; 0x3d
     724:	4e af       	std	Y+62, r20	; 0x3e
     726:	5f af       	std	Y+63, r21	; 0x3f
     728:	2d 97       	sbiw	r28, 0x0d	; 13
     72a:	c6 01       	movw	r24, r12
     72c:	b5 01       	movw	r22, r10
     72e:	29 96       	adiw	r28, 0x09	; 9
     730:	2c ad       	ldd	r18, Y+60	; 0x3c
     732:	3d ad       	ldd	r19, Y+61	; 0x3d
     734:	4e ad       	ldd	r20, Y+62	; 0x3e
     736:	5f ad       	ldd	r21, Y+63	; 0x3f
     738:	29 97       	sbiw	r28, 0x09	; 9
     73a:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     73e:	7b 01       	movw	r14, r22
     740:	8c 01       	movw	r16, r24
     742:	c6 01       	movw	r24, r12
     744:	b5 01       	movw	r22, r10
     746:	29 96       	adiw	r28, 0x09	; 9
     748:	2c ad       	ldd	r18, Y+60	; 0x3c
     74a:	3d ad       	ldd	r19, Y+61	; 0x3d
     74c:	4e ad       	ldd	r20, Y+62	; 0x3e
     74e:	5f ad       	ldd	r21, Y+63	; 0x3f
     750:	29 97       	sbiw	r28, 0x09	; 9
     752:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     756:	c9 01       	movw	r24, r18
     758:	da 01       	movw	r26, r20
     75a:	61 96       	adiw	r28, 0x11	; 17
     75c:	8c af       	std	Y+60, r24	; 0x3c
     75e:	9d af       	std	Y+61, r25	; 0x3d
     760:	ae af       	std	Y+62, r26	; 0x3e
     762:	bf af       	std	Y+63, r27	; 0x3f
     764:	61 97       	sbiw	r28, 0x11	; 17
     766:	bc 01       	movw	r22, r24
     768:	cd 01       	movw	r24, r26
     76a:	2d 96       	adiw	r28, 0x0d	; 13
     76c:	2c ad       	ldd	r18, Y+60	; 0x3c
     76e:	3d ad       	ldd	r19, Y+61	; 0x3d
     770:	4e ad       	ldd	r20, Y+62	; 0x3e
     772:	5f ad       	ldd	r21, Y+63	; 0x3f
     774:	2d 97       	sbiw	r28, 0x0d	; 13
     776:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__mulsi3>
     77a:	9b 01       	movw	r18, r22
     77c:	ac 01       	movw	r20, r24
     77e:	87 01       	movw	r16, r14
     780:	ff 24       	eor	r15, r15
     782:	ee 24       	eor	r14, r14
     784:	ad a4       	ldd	r10, Y+45	; 0x2d
     786:	be a4       	ldd	r11, Y+46	; 0x2e
     788:	cf a4       	ldd	r12, Y+47	; 0x2f
     78a:	d8 a8       	ldd	r13, Y+48	; 0x30
     78c:	c6 01       	movw	r24, r12
     78e:	aa 27       	eor	r26, r26
     790:	bb 27       	eor	r27, r27
     792:	57 01       	movw	r10, r14
     794:	68 01       	movw	r12, r16
     796:	a8 2a       	or	r10, r24
     798:	b9 2a       	or	r11, r25
     79a:	ca 2a       	or	r12, r26
     79c:	db 2a       	or	r13, r27
     79e:	a2 16       	cp	r10, r18
     7a0:	b3 06       	cpc	r11, r19
     7a2:	c4 06       	cpc	r12, r20
     7a4:	d5 06       	cpc	r13, r21
     7a6:	60 f5       	brcc	.+88     	; 0x800 <__stack+0x3a1>
     7a8:	61 96       	adiw	r28, 0x11	; 17
     7aa:	6c ad       	ldd	r22, Y+60	; 0x3c
     7ac:	7d ad       	ldd	r23, Y+61	; 0x3d
     7ae:	8e ad       	ldd	r24, Y+62	; 0x3e
     7b0:	9f ad       	ldd	r25, Y+63	; 0x3f
     7b2:	61 97       	sbiw	r28, 0x11	; 17
     7b4:	61 50       	subi	r22, 0x01	; 1
     7b6:	70 40       	sbci	r23, 0x00	; 0
     7b8:	80 40       	sbci	r24, 0x00	; 0
     7ba:	90 40       	sbci	r25, 0x00	; 0
     7bc:	61 96       	adiw	r28, 0x11	; 17
     7be:	6c af       	std	Y+60, r22	; 0x3c
     7c0:	7d af       	std	Y+61, r23	; 0x3d
     7c2:	8e af       	std	Y+62, r24	; 0x3e
     7c4:	9f af       	std	Y+63, r25	; 0x3f
     7c6:	61 97       	sbiw	r28, 0x11	; 17
     7c8:	a2 0c       	add	r10, r2
     7ca:	b3 1c       	adc	r11, r3
     7cc:	c4 1c       	adc	r12, r4
     7ce:	d5 1c       	adc	r13, r5
     7d0:	a2 14       	cp	r10, r2
     7d2:	b3 04       	cpc	r11, r3
     7d4:	c4 04       	cpc	r12, r4
     7d6:	d5 04       	cpc	r13, r5
     7d8:	98 f0       	brcs	.+38     	; 0x800 <__stack+0x3a1>
     7da:	a2 16       	cp	r10, r18
     7dc:	b3 06       	cpc	r11, r19
     7de:	c4 06       	cpc	r12, r20
     7e0:	d5 06       	cpc	r13, r21
     7e2:	70 f4       	brcc	.+28     	; 0x800 <__stack+0x3a1>
     7e4:	61 50       	subi	r22, 0x01	; 1
     7e6:	70 40       	sbci	r23, 0x00	; 0
     7e8:	80 40       	sbci	r24, 0x00	; 0
     7ea:	90 40       	sbci	r25, 0x00	; 0
     7ec:	61 96       	adiw	r28, 0x11	; 17
     7ee:	6c af       	std	Y+60, r22	; 0x3c
     7f0:	7d af       	std	Y+61, r23	; 0x3d
     7f2:	8e af       	std	Y+62, r24	; 0x3e
     7f4:	9f af       	std	Y+63, r25	; 0x3f
     7f6:	61 97       	sbiw	r28, 0x11	; 17
     7f8:	a2 0c       	add	r10, r2
     7fa:	b3 1c       	adc	r11, r3
     7fc:	c4 1c       	adc	r12, r4
     7fe:	d5 1c       	adc	r13, r5
     800:	a2 1a       	sub	r10, r18
     802:	b3 0a       	sbc	r11, r19
     804:	c4 0a       	sbc	r12, r20
     806:	d5 0a       	sbc	r13, r21
     808:	c6 01       	movw	r24, r12
     80a:	b5 01       	movw	r22, r10
     80c:	29 96       	adiw	r28, 0x09	; 9
     80e:	2c ad       	ldd	r18, Y+60	; 0x3c
     810:	3d ad       	ldd	r19, Y+61	; 0x3d
     812:	4e ad       	ldd	r20, Y+62	; 0x3e
     814:	5f ad       	ldd	r21, Y+63	; 0x3f
     816:	29 97       	sbiw	r28, 0x09	; 9
     818:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     81c:	7b 01       	movw	r14, r22
     81e:	8c 01       	movw	r16, r24
     820:	c6 01       	movw	r24, r12
     822:	b5 01       	movw	r22, r10
     824:	29 96       	adiw	r28, 0x09	; 9
     826:	2c ad       	ldd	r18, Y+60	; 0x3c
     828:	3d ad       	ldd	r19, Y+61	; 0x3d
     82a:	4e ad       	ldd	r20, Y+62	; 0x3e
     82c:	5f ad       	ldd	r21, Y+63	; 0x3f
     82e:	29 97       	sbiw	r28, 0x09	; 9
     830:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     834:	c9 01       	movw	r24, r18
     836:	da 01       	movw	r26, r20
     838:	5c 01       	movw	r10, r24
     83a:	6d 01       	movw	r12, r26
     83c:	c6 01       	movw	r24, r12
     83e:	b5 01       	movw	r22, r10
     840:	2d 96       	adiw	r28, 0x0d	; 13
     842:	2c ad       	ldd	r18, Y+60	; 0x3c
     844:	3d ad       	ldd	r19, Y+61	; 0x3d
     846:	4e ad       	ldd	r20, Y+62	; 0x3e
     848:	5f ad       	ldd	r21, Y+63	; 0x3f
     84a:	2d 97       	sbiw	r28, 0x0d	; 13
     84c:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__mulsi3>
     850:	9b 01       	movw	r18, r22
     852:	ac 01       	movw	r20, r24
     854:	87 01       	movw	r16, r14
     856:	ff 24       	eor	r15, r15
     858:	ee 24       	eor	r14, r14
     85a:	8d a5       	ldd	r24, Y+45	; 0x2d
     85c:	9e a5       	ldd	r25, Y+46	; 0x2e
     85e:	af a5       	ldd	r26, Y+47	; 0x2f
     860:	b8 a9       	ldd	r27, Y+48	; 0x30
     862:	a0 70       	andi	r26, 0x00	; 0
     864:	b0 70       	andi	r27, 0x00	; 0
     866:	e8 2a       	or	r14, r24
     868:	f9 2a       	or	r15, r25
     86a:	0a 2b       	or	r16, r26
     86c:	1b 2b       	or	r17, r27
     86e:	e2 16       	cp	r14, r18
     870:	f3 06       	cpc	r15, r19
     872:	04 07       	cpc	r16, r20
     874:	15 07       	cpc	r17, r21
     876:	c0 f4       	brcc	.+48     	; 0x8a8 <__stack+0x449>
     878:	08 94       	sec
     87a:	a1 08       	sbc	r10, r1
     87c:	b1 08       	sbc	r11, r1
     87e:	c1 08       	sbc	r12, r1
     880:	d1 08       	sbc	r13, r1
     882:	e2 0c       	add	r14, r2
     884:	f3 1c       	adc	r15, r3
     886:	04 1d       	adc	r16, r4
     888:	15 1d       	adc	r17, r5
     88a:	e2 14       	cp	r14, r2
     88c:	f3 04       	cpc	r15, r3
     88e:	04 05       	cpc	r16, r4
     890:	15 05       	cpc	r17, r5
     892:	50 f0       	brcs	.+20     	; 0x8a8 <__stack+0x449>
     894:	e2 16       	cp	r14, r18
     896:	f3 06       	cpc	r15, r19
     898:	04 07       	cpc	r16, r20
     89a:	15 07       	cpc	r17, r21
     89c:	28 f4       	brcc	.+10     	; 0x8a8 <__stack+0x449>
     89e:	08 94       	sec
     8a0:	a1 08       	sbc	r10, r1
     8a2:	b1 08       	sbc	r11, r1
     8a4:	c1 08       	sbc	r12, r1
     8a6:	d1 08       	sbc	r13, r1
     8a8:	61 96       	adiw	r28, 0x11	; 17
     8aa:	ec ac       	ldd	r14, Y+60	; 0x3c
     8ac:	fd ac       	ldd	r15, Y+61	; 0x3d
     8ae:	0e ad       	ldd	r16, Y+62	; 0x3e
     8b0:	1f ad       	ldd	r17, Y+63	; 0x3f
     8b2:	61 97       	sbiw	r28, 0x11	; 17
     8b4:	d7 01       	movw	r26, r14
     8b6:	99 27       	eor	r25, r25
     8b8:	88 27       	eor	r24, r24
     8ba:	96 01       	movw	r18, r12
     8bc:	85 01       	movw	r16, r10
     8be:	08 2b       	or	r16, r24
     8c0:	19 2b       	or	r17, r25
     8c2:	2a 2b       	or	r18, r26
     8c4:	3b 2b       	or	r19, r27
     8c6:	09 ab       	std	Y+49, r16	; 0x31
     8c8:	1a ab       	std	Y+50, r17	; 0x32
     8ca:	2b ab       	std	Y+51, r18	; 0x33
     8cc:	3c ab       	std	Y+52, r19	; 0x34
     8ce:	62 c2       	rjmp	.+1220   	; 0xd94 <__stack+0x935>
     8d0:	6e 14       	cp	r6, r14
     8d2:	7f 04       	cpc	r7, r15
     8d4:	80 06       	cpc	r8, r16
     8d6:	91 06       	cpc	r9, r17
     8d8:	08 f4       	brcc	.+2      	; 0x8dc <__stack+0x47d>
     8da:	51 c2       	rjmp	.+1186   	; 0xd7e <__stack+0x91f>
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	e2 16       	cp	r14, r18
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	f2 06       	cpc	r15, r18
     8e4:	21 e0       	ldi	r18, 0x01	; 1
     8e6:	02 07       	cpc	r16, r18
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	12 07       	cpc	r17, r18
     8ec:	88 f4       	brcc	.+34     	; 0x910 <__stack+0x4b1>
     8ee:	3f ef       	ldi	r19, 0xFF	; 255
     8f0:	e3 16       	cp	r14, r19
     8f2:	f1 04       	cpc	r15, r1
     8f4:	01 05       	cpc	r16, r1
     8f6:	11 05       	cpc	r17, r1
     8f8:	31 f0       	breq	.+12     	; 0x906 <__stack+0x4a7>
     8fa:	28 f0       	brcs	.+10     	; 0x906 <__stack+0x4a7>
     8fc:	48 e0       	ldi	r20, 0x08	; 8
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	17 c0       	rjmp	.+46     	; 0x934 <__stack+0x4d5>
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	12 c0       	rjmp	.+36     	; 0x934 <__stack+0x4d5>
     910:	40 e0       	ldi	r20, 0x00	; 0
     912:	e4 16       	cp	r14, r20
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	f4 06       	cpc	r15, r20
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	04 07       	cpc	r16, r20
     91c:	41 e0       	ldi	r20, 0x01	; 1
     91e:	14 07       	cpc	r17, r20
     920:	28 f0       	brcs	.+10     	; 0x92c <__stack+0x4cd>
     922:	48 e1       	ldi	r20, 0x18	; 24
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__stack+0x4d5>
     92c:	40 e1       	ldi	r20, 0x10	; 16
     92e:	50 e0       	ldi	r21, 0x00	; 0
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	d8 01       	movw	r26, r16
     936:	c7 01       	movw	r24, r14
     938:	04 2e       	mov	r0, r20
     93a:	04 c0       	rjmp	.+8      	; 0x944 <__stack+0x4e5>
     93c:	b6 95       	lsr	r27
     93e:	a7 95       	ror	r26
     940:	97 95       	ror	r25
     942:	87 95       	ror	r24
     944:	0a 94       	dec	r0
     946:	d2 f7       	brpl	.-12     	; 0x93c <__stack+0x4dd>
     948:	88 59       	subi	r24, 0x98	; 152
     94a:	9f 4f       	sbci	r25, 0xFF	; 255
     94c:	dc 01       	movw	r26, r24
     94e:	2c 91       	ld	r18, X
     950:	30 e2       	ldi	r19, 0x20	; 32
     952:	a3 2e       	mov	r10, r19
     954:	b1 2c       	mov	r11, r1
     956:	c1 2c       	mov	r12, r1
     958:	d1 2c       	mov	r13, r1
     95a:	d6 01       	movw	r26, r12
     95c:	c5 01       	movw	r24, r10
     95e:	84 1b       	sub	r24, r20
     960:	95 0b       	sbc	r25, r21
     962:	a6 0b       	sbc	r26, r22
     964:	b7 0b       	sbc	r27, r23
     966:	82 1b       	sub	r24, r18
     968:	91 09       	sbc	r25, r1
     96a:	a1 09       	sbc	r26, r1
     96c:	b1 09       	sbc	r27, r1
     96e:	00 97       	sbiw	r24, 0x00	; 0
     970:	a1 05       	cpc	r26, r1
     972:	b1 05       	cpc	r27, r1
     974:	89 f4       	brne	.+34     	; 0x998 <__stack+0x539>
     976:	e6 14       	cp	r14, r6
     978:	f7 04       	cpc	r15, r7
     97a:	08 05       	cpc	r16, r8
     97c:	19 05       	cpc	r17, r9
     97e:	08 f4       	brcc	.+2      	; 0x982 <__stack+0x523>
     980:	f2 c1       	rjmp	.+996    	; 0xd66 <__stack+0x907>
     982:	6d a4       	ldd	r6, Y+45	; 0x2d
     984:	7e a4       	ldd	r7, Y+46	; 0x2e
     986:	8f a4       	ldd	r8, Y+47	; 0x2f
     988:	98 a8       	ldd	r9, Y+48	; 0x30
     98a:	62 14       	cp	r6, r2
     98c:	73 04       	cpc	r7, r3
     98e:	84 04       	cpc	r8, r4
     990:	95 04       	cpc	r9, r5
     992:	08 f0       	brcs	.+2      	; 0x996 <__stack+0x537>
     994:	e8 c1       	rjmp	.+976    	; 0xd66 <__stack+0x907>
     996:	f3 c1       	rjmp	.+998    	; 0xd7e <__stack+0x91f>
     998:	6e 96       	adiw	r28, 0x1e	; 30
     99a:	8f af       	std	Y+63, r24	; 0x3f
     99c:	6e 97       	sbiw	r28, 0x1e	; 30
     99e:	08 2e       	mov	r0, r24
     9a0:	04 c0       	rjmp	.+8      	; 0x9aa <__stack+0x54b>
     9a2:	ee 0c       	add	r14, r14
     9a4:	ff 1c       	adc	r15, r15
     9a6:	00 1f       	adc	r16, r16
     9a8:	11 1f       	adc	r17, r17
     9aa:	0a 94       	dec	r0
     9ac:	d2 f7       	brpl	.-12     	; 0x9a2 <__stack+0x543>
     9ae:	6a 2d       	mov	r22, r10
     9b0:	68 1b       	sub	r22, r24
     9b2:	d2 01       	movw	r26, r4
     9b4:	c1 01       	movw	r24, r2
     9b6:	06 2e       	mov	r0, r22
     9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <__stack+0x563>
     9ba:	b6 95       	lsr	r27
     9bc:	a7 95       	ror	r26
     9be:	97 95       	ror	r25
     9c0:	87 95       	ror	r24
     9c2:	0a 94       	dec	r0
     9c4:	d2 f7       	brpl	.-12     	; 0x9ba <__stack+0x55b>
     9c6:	5c 01       	movw	r10, r24
     9c8:	6d 01       	movw	r12, r26
     9ca:	ae 28       	or	r10, r14
     9cc:	bf 28       	or	r11, r15
     9ce:	c0 2a       	or	r12, r16
     9d0:	d1 2a       	or	r13, r17
     9d2:	ad a2       	std	Y+37, r10	; 0x25
     9d4:	be a2       	std	Y+38, r11	; 0x26
     9d6:	cf a2       	std	Y+39, r12	; 0x27
     9d8:	d8 a6       	std	Y+40, r13	; 0x28
     9da:	72 01       	movw	r14, r4
     9dc:	61 01       	movw	r12, r2
     9de:	6e 96       	adiw	r28, 0x1e	; 30
     9e0:	0f ac       	ldd	r0, Y+63	; 0x3f
     9e2:	6e 97       	sbiw	r28, 0x1e	; 30
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__stack+0x58f>
     9e6:	cc 0c       	add	r12, r12
     9e8:	dd 1c       	adc	r13, r13
     9ea:	ee 1c       	adc	r14, r14
     9ec:	ff 1c       	adc	r15, r15
     9ee:	0a 94       	dec	r0
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__stack+0x587>
     9f2:	c9 a2       	std	Y+33, r12	; 0x21
     9f4:	da a2       	std	Y+34, r13	; 0x22
     9f6:	eb a2       	std	Y+35, r14	; 0x23
     9f8:	fc a2       	std	Y+36, r15	; 0x24
     9fa:	64 01       	movw	r12, r8
     9fc:	53 01       	movw	r10, r6
     9fe:	06 2e       	mov	r0, r22
     a00:	04 c0       	rjmp	.+8      	; 0xa0a <__stack+0x5ab>
     a02:	d6 94       	lsr	r13
     a04:	c7 94       	ror	r12
     a06:	b7 94       	ror	r11
     a08:	a7 94       	ror	r10
     a0a:	0a 94       	dec	r0
     a0c:	d2 f7       	brpl	.-12     	; 0xa02 <__stack+0x5a3>
     a0e:	d4 01       	movw	r26, r8
     a10:	c3 01       	movw	r24, r6
     a12:	6e 96       	adiw	r28, 0x1e	; 30
     a14:	0f ac       	ldd	r0, Y+63	; 0x3f
     a16:	6e 97       	sbiw	r28, 0x1e	; 30
     a18:	04 c0       	rjmp	.+8      	; 0xa22 <__stack+0x5c3>
     a1a:	88 0f       	add	r24, r24
     a1c:	99 1f       	adc	r25, r25
     a1e:	aa 1f       	adc	r26, r26
     a20:	bb 1f       	adc	r27, r27
     a22:	0a 94       	dec	r0
     a24:	d2 f7       	brpl	.-12     	; 0xa1a <__stack+0x5bb>
     a26:	ed a4       	ldd	r14, Y+45	; 0x2d
     a28:	fe a4       	ldd	r15, Y+46	; 0x2e
     a2a:	0f a5       	ldd	r16, Y+47	; 0x2f
     a2c:	18 a9       	ldd	r17, Y+48	; 0x30
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__stack+0x5d9>
     a30:	16 95       	lsr	r17
     a32:	07 95       	ror	r16
     a34:	f7 94       	ror	r15
     a36:	e7 94       	ror	r14
     a38:	6a 95       	dec	r22
     a3a:	d2 f7       	brpl	.-12     	; 0xa30 <__stack+0x5d1>
     a3c:	37 01       	movw	r6, r14
     a3e:	48 01       	movw	r8, r16
     a40:	68 2a       	or	r6, r24
     a42:	79 2a       	or	r7, r25
     a44:	8a 2a       	or	r8, r26
     a46:	9b 2a       	or	r9, r27
     a48:	6d 8e       	std	Y+29, r6	; 0x1d
     a4a:	7e 8e       	std	Y+30, r7	; 0x1e
     a4c:	8f 8e       	std	Y+31, r8	; 0x1f
     a4e:	98 a2       	std	Y+32, r9	; 0x20
     a50:	ed a0       	ldd	r14, Y+37	; 0x25
     a52:	fe a0       	ldd	r15, Y+38	; 0x26
     a54:	0f a1       	ldd	r16, Y+39	; 0x27
     a56:	18 a5       	ldd	r17, Y+40	; 0x28
     a58:	38 01       	movw	r6, r16
     a5a:	88 24       	eor	r8, r8
     a5c:	99 24       	eor	r9, r9
     a5e:	98 01       	movw	r18, r16
     a60:	87 01       	movw	r16, r14
     a62:	20 70       	andi	r18, 0x00	; 0
     a64:	30 70       	andi	r19, 0x00	; 0
     a66:	65 96       	adiw	r28, 0x15	; 21
     a68:	0c af       	std	Y+60, r16	; 0x3c
     a6a:	1d af       	std	Y+61, r17	; 0x3d
     a6c:	2e af       	std	Y+62, r18	; 0x3e
     a6e:	3f af       	std	Y+63, r19	; 0x3f
     a70:	65 97       	sbiw	r28, 0x15	; 21
     a72:	c6 01       	movw	r24, r12
     a74:	b5 01       	movw	r22, r10
     a76:	a4 01       	movw	r20, r8
     a78:	93 01       	movw	r18, r6
     a7a:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     a7e:	7b 01       	movw	r14, r22
     a80:	8c 01       	movw	r16, r24
     a82:	c6 01       	movw	r24, r12
     a84:	b5 01       	movw	r22, r10
     a86:	a4 01       	movw	r20, r8
     a88:	93 01       	movw	r18, r6
     a8a:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     a8e:	c9 01       	movw	r24, r18
     a90:	da 01       	movw	r26, r20
     a92:	1c 01       	movw	r2, r24
     a94:	2d 01       	movw	r4, r26
     a96:	c2 01       	movw	r24, r4
     a98:	b1 01       	movw	r22, r2
     a9a:	65 96       	adiw	r28, 0x15	; 21
     a9c:	2c ad       	ldd	r18, Y+60	; 0x3c
     a9e:	3d ad       	ldd	r19, Y+61	; 0x3d
     aa0:	4e ad       	ldd	r20, Y+62	; 0x3e
     aa2:	5f ad       	ldd	r21, Y+63	; 0x3f
     aa4:	65 97       	sbiw	r28, 0x15	; 21
     aa6:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__mulsi3>
     aaa:	9b 01       	movw	r18, r22
     aac:	ac 01       	movw	r20, r24
     aae:	87 01       	movw	r16, r14
     ab0:	ff 24       	eor	r15, r15
     ab2:	ee 24       	eor	r14, r14
     ab4:	ad 8c       	ldd	r10, Y+29	; 0x1d
     ab6:	be 8c       	ldd	r11, Y+30	; 0x1e
     ab8:	cf 8c       	ldd	r12, Y+31	; 0x1f
     aba:	d8 a0       	ldd	r13, Y+32	; 0x20
     abc:	c6 01       	movw	r24, r12
     abe:	aa 27       	eor	r26, r26
     ac0:	bb 27       	eor	r27, r27
     ac2:	57 01       	movw	r10, r14
     ac4:	68 01       	movw	r12, r16
     ac6:	a8 2a       	or	r10, r24
     ac8:	b9 2a       	or	r11, r25
     aca:	ca 2a       	or	r12, r26
     acc:	db 2a       	or	r13, r27
     ace:	a2 16       	cp	r10, r18
     ad0:	b3 06       	cpc	r11, r19
     ad2:	c4 06       	cpc	r12, r20
     ad4:	d5 06       	cpc	r13, r21
     ad6:	00 f5       	brcc	.+64     	; 0xb18 <__stack+0x6b9>
     ad8:	08 94       	sec
     ada:	21 08       	sbc	r2, r1
     adc:	31 08       	sbc	r3, r1
     ade:	41 08       	sbc	r4, r1
     ae0:	51 08       	sbc	r5, r1
     ae2:	ed a0       	ldd	r14, Y+37	; 0x25
     ae4:	fe a0       	ldd	r15, Y+38	; 0x26
     ae6:	0f a1       	ldd	r16, Y+39	; 0x27
     ae8:	18 a5       	ldd	r17, Y+40	; 0x28
     aea:	ae 0c       	add	r10, r14
     aec:	bf 1c       	adc	r11, r15
     aee:	c0 1e       	adc	r12, r16
     af0:	d1 1e       	adc	r13, r17
     af2:	ae 14       	cp	r10, r14
     af4:	bf 04       	cpc	r11, r15
     af6:	c0 06       	cpc	r12, r16
     af8:	d1 06       	cpc	r13, r17
     afa:	70 f0       	brcs	.+28     	; 0xb18 <__stack+0x6b9>
     afc:	a2 16       	cp	r10, r18
     afe:	b3 06       	cpc	r11, r19
     b00:	c4 06       	cpc	r12, r20
     b02:	d5 06       	cpc	r13, r21
     b04:	48 f4       	brcc	.+18     	; 0xb18 <__stack+0x6b9>
     b06:	08 94       	sec
     b08:	21 08       	sbc	r2, r1
     b0a:	31 08       	sbc	r3, r1
     b0c:	41 08       	sbc	r4, r1
     b0e:	51 08       	sbc	r5, r1
     b10:	ae 0c       	add	r10, r14
     b12:	bf 1c       	adc	r11, r15
     b14:	c0 1e       	adc	r12, r16
     b16:	d1 1e       	adc	r13, r17
     b18:	a2 1a       	sub	r10, r18
     b1a:	b3 0a       	sbc	r11, r19
     b1c:	c4 0a       	sbc	r12, r20
     b1e:	d5 0a       	sbc	r13, r21
     b20:	c6 01       	movw	r24, r12
     b22:	b5 01       	movw	r22, r10
     b24:	a4 01       	movw	r20, r8
     b26:	93 01       	movw	r18, r6
     b28:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     b2c:	7b 01       	movw	r14, r22
     b2e:	8c 01       	movw	r16, r24
     b30:	c6 01       	movw	r24, r12
     b32:	b5 01       	movw	r22, r10
     b34:	a4 01       	movw	r20, r8
     b36:	93 01       	movw	r18, r6
     b38:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     b3c:	c9 01       	movw	r24, r18
     b3e:	da 01       	movw	r26, r20
     b40:	3c 01       	movw	r6, r24
     b42:	4d 01       	movw	r8, r26
     b44:	c4 01       	movw	r24, r8
     b46:	b3 01       	movw	r22, r6
     b48:	65 96       	adiw	r28, 0x15	; 21
     b4a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b4c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b4e:	4e ad       	ldd	r20, Y+62	; 0x3e
     b50:	5f ad       	ldd	r21, Y+63	; 0x3f
     b52:	65 97       	sbiw	r28, 0x15	; 21
     b54:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__mulsi3>
     b58:	9b 01       	movw	r18, r22
     b5a:	ac 01       	movw	r20, r24
     b5c:	87 01       	movw	r16, r14
     b5e:	ff 24       	eor	r15, r15
     b60:	ee 24       	eor	r14, r14
     b62:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b64:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b66:	af 8d       	ldd	r26, Y+31	; 0x1f
     b68:	b8 a1       	ldd	r27, Y+32	; 0x20
     b6a:	a0 70       	andi	r26, 0x00	; 0
     b6c:	b0 70       	andi	r27, 0x00	; 0
     b6e:	57 01       	movw	r10, r14
     b70:	68 01       	movw	r12, r16
     b72:	a8 2a       	or	r10, r24
     b74:	b9 2a       	or	r11, r25
     b76:	ca 2a       	or	r12, r26
     b78:	db 2a       	or	r13, r27
     b7a:	a2 16       	cp	r10, r18
     b7c:	b3 06       	cpc	r11, r19
     b7e:	c4 06       	cpc	r12, r20
     b80:	d5 06       	cpc	r13, r21
     b82:	00 f5       	brcc	.+64     	; 0xbc4 <__stack+0x765>
     b84:	08 94       	sec
     b86:	61 08       	sbc	r6, r1
     b88:	71 08       	sbc	r7, r1
     b8a:	81 08       	sbc	r8, r1
     b8c:	91 08       	sbc	r9, r1
     b8e:	6d a1       	ldd	r22, Y+37	; 0x25
     b90:	7e a1       	ldd	r23, Y+38	; 0x26
     b92:	8f a1       	ldd	r24, Y+39	; 0x27
     b94:	98 a5       	ldd	r25, Y+40	; 0x28
     b96:	a6 0e       	add	r10, r22
     b98:	b7 1e       	adc	r11, r23
     b9a:	c8 1e       	adc	r12, r24
     b9c:	d9 1e       	adc	r13, r25
     b9e:	a6 16       	cp	r10, r22
     ba0:	b7 06       	cpc	r11, r23
     ba2:	c8 06       	cpc	r12, r24
     ba4:	d9 06       	cpc	r13, r25
     ba6:	70 f0       	brcs	.+28     	; 0xbc4 <__stack+0x765>
     ba8:	a2 16       	cp	r10, r18
     baa:	b3 06       	cpc	r11, r19
     bac:	c4 06       	cpc	r12, r20
     bae:	d5 06       	cpc	r13, r21
     bb0:	48 f4       	brcc	.+18     	; 0xbc4 <__stack+0x765>
     bb2:	08 94       	sec
     bb4:	61 08       	sbc	r6, r1
     bb6:	71 08       	sbc	r7, r1
     bb8:	81 08       	sbc	r8, r1
     bba:	91 08       	sbc	r9, r1
     bbc:	a6 0e       	add	r10, r22
     bbe:	b7 1e       	adc	r11, r23
     bc0:	c8 1e       	adc	r12, r24
     bc2:	d9 1e       	adc	r13, r25
     bc4:	d6 01       	movw	r26, r12
     bc6:	c5 01       	movw	r24, r10
     bc8:	82 1b       	sub	r24, r18
     bca:	93 0b       	sbc	r25, r19
     bcc:	a4 0b       	sbc	r26, r20
     bce:	b5 0b       	sbc	r27, r21
     bd0:	89 8f       	std	Y+25, r24	; 0x19
     bd2:	9a 8f       	std	Y+26, r25	; 0x1a
     bd4:	ab 8f       	std	Y+27, r26	; 0x1b
     bd6:	bc 8f       	std	Y+28, r27	; 0x1c
     bd8:	d1 01       	movw	r26, r2
     bda:	99 27       	eor	r25, r25
     bdc:	88 27       	eor	r24, r24
     bde:	64 01       	movw	r12, r8
     be0:	53 01       	movw	r10, r6
     be2:	a8 2a       	or	r10, r24
     be4:	b9 2a       	or	r11, r25
     be6:	ca 2a       	or	r12, r26
     be8:	db 2a       	or	r13, r27
     bea:	a9 aa       	std	Y+49, r10	; 0x31
     bec:	ba aa       	std	Y+50, r11	; 0x32
     bee:	cb aa       	std	Y+51, r12	; 0x33
     bf0:	dc aa       	std	Y+52, r13	; 0x34
     bf2:	86 01       	movw	r16, r12
     bf4:	75 01       	movw	r14, r10
     bf6:	2f ef       	ldi	r18, 0xFF	; 255
     bf8:	3f ef       	ldi	r19, 0xFF	; 255
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	50 e0       	ldi	r21, 0x00	; 0
     bfe:	e2 22       	and	r14, r18
     c00:	f3 22       	and	r15, r19
     c02:	04 23       	and	r16, r20
     c04:	15 23       	and	r17, r21
     c06:	a6 01       	movw	r20, r12
     c08:	66 27       	eor	r22, r22
     c0a:	77 27       	eor	r23, r23
     c0c:	6d 96       	adiw	r28, 0x1d	; 29
     c0e:	4c af       	std	Y+60, r20	; 0x3c
     c10:	5d af       	std	Y+61, r21	; 0x3d
     c12:	6e af       	std	Y+62, r22	; 0x3e
     c14:	7f af       	std	Y+63, r23	; 0x3f
     c16:	6d 97       	sbiw	r28, 0x1d	; 29
     c18:	a9 a0       	ldd	r10, Y+33	; 0x21
     c1a:	ba a0       	ldd	r11, Y+34	; 0x22
     c1c:	cb a0       	ldd	r12, Y+35	; 0x23
     c1e:	dc a0       	ldd	r13, Y+36	; 0x24
     c20:	6f ef       	ldi	r22, 0xFF	; 255
     c22:	7f ef       	ldi	r23, 0xFF	; 255
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	a6 22       	and	r10, r22
     c2a:	b7 22       	and	r11, r23
     c2c:	c8 22       	and	r12, r24
     c2e:	d9 22       	and	r13, r25
     c30:	89 a1       	ldd	r24, Y+33	; 0x21
     c32:	9a a1       	ldd	r25, Y+34	; 0x22
     c34:	ab a1       	ldd	r26, Y+35	; 0x23
     c36:	bc a1       	ldd	r27, Y+36	; 0x24
     c38:	1d 01       	movw	r2, r26
     c3a:	44 24       	eor	r4, r4
     c3c:	55 24       	eor	r5, r5
     c3e:	c8 01       	movw	r24, r16
     c40:	b7 01       	movw	r22, r14
     c42:	a6 01       	movw	r20, r12
     c44:	95 01       	movw	r18, r10
     c46:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__mulsi3>
     c4a:	69 96       	adiw	r28, 0x19	; 25
     c4c:	6c af       	std	Y+60, r22	; 0x3c
     c4e:	7d af       	std	Y+61, r23	; 0x3d
     c50:	8e af       	std	Y+62, r24	; 0x3e
     c52:	9f af       	std	Y+63, r25	; 0x3f
     c54:	69 97       	sbiw	r28, 0x19	; 25
     c56:	c8 01       	movw	r24, r16
     c58:	b7 01       	movw	r22, r14
     c5a:	a2 01       	movw	r20, r4
     c5c:	91 01       	movw	r18, r2
     c5e:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__mulsi3>
     c62:	3b 01       	movw	r6, r22
     c64:	4c 01       	movw	r8, r24
     c66:	6d 96       	adiw	r28, 0x1d	; 29
     c68:	6c ad       	ldd	r22, Y+60	; 0x3c
     c6a:	7d ad       	ldd	r23, Y+61	; 0x3d
     c6c:	8e ad       	ldd	r24, Y+62	; 0x3e
     c6e:	9f ad       	ldd	r25, Y+63	; 0x3f
     c70:	6d 97       	sbiw	r28, 0x1d	; 29
     c72:	a6 01       	movw	r20, r12
     c74:	95 01       	movw	r18, r10
     c76:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__mulsi3>
     c7a:	7b 01       	movw	r14, r22
     c7c:	8c 01       	movw	r16, r24
     c7e:	6d 96       	adiw	r28, 0x1d	; 29
     c80:	6c ad       	ldd	r22, Y+60	; 0x3c
     c82:	7d ad       	ldd	r23, Y+61	; 0x3d
     c84:	8e ad       	ldd	r24, Y+62	; 0x3e
     c86:	9f ad       	ldd	r25, Y+63	; 0x3f
     c88:	6d 97       	sbiw	r28, 0x1d	; 29
     c8a:	a2 01       	movw	r20, r4
     c8c:	91 01       	movw	r18, r2
     c8e:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__mulsi3>
     c92:	5b 01       	movw	r10, r22
     c94:	6c 01       	movw	r12, r24
     c96:	a8 01       	movw	r20, r16
     c98:	97 01       	movw	r18, r14
     c9a:	26 0d       	add	r18, r6
     c9c:	37 1d       	adc	r19, r7
     c9e:	48 1d       	adc	r20, r8
     ca0:	59 1d       	adc	r21, r9
     ca2:	69 96       	adiw	r28, 0x19	; 25
     ca4:	6c ac       	ldd	r6, Y+60	; 0x3c
     ca6:	7d ac       	ldd	r7, Y+61	; 0x3d
     ca8:	8e ac       	ldd	r8, Y+62	; 0x3e
     caa:	9f ac       	ldd	r9, Y+63	; 0x3f
     cac:	69 97       	sbiw	r28, 0x19	; 25
     cae:	c4 01       	movw	r24, r8
     cb0:	aa 27       	eor	r26, r26
     cb2:	bb 27       	eor	r27, r27
     cb4:	28 0f       	add	r18, r24
     cb6:	39 1f       	adc	r19, r25
     cb8:	4a 1f       	adc	r20, r26
     cba:	5b 1f       	adc	r21, r27
     cbc:	2e 15       	cp	r18, r14
     cbe:	3f 05       	cpc	r19, r15
     cc0:	40 07       	cpc	r20, r16
     cc2:	51 07       	cpc	r21, r17
     cc4:	48 f4       	brcc	.+18     	; 0xcd8 <__stack+0x879>
     cc6:	e1 2c       	mov	r14, r1
     cc8:	f1 2c       	mov	r15, r1
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	06 2f       	mov	r16, r22
     cce:	11 2d       	mov	r17, r1
     cd0:	ae 0c       	add	r10, r14
     cd2:	bf 1c       	adc	r11, r15
     cd4:	c0 1e       	adc	r12, r16
     cd6:	d1 1e       	adc	r13, r17
     cd8:	ca 01       	movw	r24, r20
     cda:	aa 27       	eor	r26, r26
     cdc:	bb 27       	eor	r27, r27
     cde:	bc 01       	movw	r22, r24
     ce0:	cd 01       	movw	r24, r26
     ce2:	6a 0d       	add	r22, r10
     ce4:	7b 1d       	adc	r23, r11
     ce6:	8c 1d       	adc	r24, r12
     ce8:	9d 1d       	adc	r25, r13
     cea:	69 8c       	ldd	r6, Y+25	; 0x19
     cec:	7a 8c       	ldd	r7, Y+26	; 0x1a
     cee:	8b 8c       	ldd	r8, Y+27	; 0x1b
     cf0:	9c 8c       	ldd	r9, Y+28	; 0x1c
     cf2:	66 16       	cp	r6, r22
     cf4:	77 06       	cpc	r7, r23
     cf6:	88 06       	cpc	r8, r24
     cf8:	99 06       	cpc	r9, r25
     cfa:	40 f1       	brcs	.+80     	; 0xd4c <__stack+0x8ed>
     cfc:	66 15       	cp	r22, r6
     cfe:	77 05       	cpc	r23, r7
     d00:	88 05       	cpc	r24, r8
     d02:	99 05       	cpc	r25, r9
     d04:	09 f0       	breq	.+2      	; 0xd08 <__stack+0x8a9>
     d06:	43 c0       	rjmp	.+134    	; 0xd8e <__stack+0x92f>
     d08:	d9 01       	movw	r26, r18
     d0a:	99 27       	eor	r25, r25
     d0c:	88 27       	eor	r24, r24
     d0e:	69 96       	adiw	r28, 0x19	; 25
     d10:	2c ad       	ldd	r18, Y+60	; 0x3c
     d12:	3d ad       	ldd	r19, Y+61	; 0x3d
     d14:	4e ad       	ldd	r20, Y+62	; 0x3e
     d16:	5f ad       	ldd	r21, Y+63	; 0x3f
     d18:	69 97       	sbiw	r28, 0x19	; 25
     d1a:	40 70       	andi	r20, 0x00	; 0
     d1c:	50 70       	andi	r21, 0x00	; 0
     d1e:	82 0f       	add	r24, r18
     d20:	93 1f       	adc	r25, r19
     d22:	a4 1f       	adc	r26, r20
     d24:	b5 1f       	adc	r27, r21
     d26:	2d a5       	ldd	r18, Y+45	; 0x2d
     d28:	3e a5       	ldd	r19, Y+46	; 0x2e
     d2a:	4f a5       	ldd	r20, Y+47	; 0x2f
     d2c:	58 a9       	ldd	r21, Y+48	; 0x30
     d2e:	6e 96       	adiw	r28, 0x1e	; 30
     d30:	0f ac       	ldd	r0, Y+63	; 0x3f
     d32:	6e 97       	sbiw	r28, 0x1e	; 30
     d34:	04 c0       	rjmp	.+8      	; 0xd3e <__stack+0x8df>
     d36:	22 0f       	add	r18, r18
     d38:	33 1f       	adc	r19, r19
     d3a:	44 1f       	adc	r20, r20
     d3c:	55 1f       	adc	r21, r21
     d3e:	0a 94       	dec	r0
     d40:	d2 f7       	brpl	.-12     	; 0xd36 <__stack+0x8d7>
     d42:	28 17       	cp	r18, r24
     d44:	39 07       	cpc	r19, r25
     d46:	4a 07       	cpc	r20, r26
     d48:	5b 07       	cpc	r21, r27
     d4a:	08 f5       	brcc	.+66     	; 0xd8e <__stack+0x92f>
     d4c:	09 a9       	ldd	r16, Y+49	; 0x31
     d4e:	1a a9       	ldd	r17, Y+50	; 0x32
     d50:	2b a9       	ldd	r18, Y+51	; 0x33
     d52:	3c a9       	ldd	r19, Y+52	; 0x34
     d54:	01 50       	subi	r16, 0x01	; 1
     d56:	10 40       	sbci	r17, 0x00	; 0
     d58:	20 40       	sbci	r18, 0x00	; 0
     d5a:	30 40       	sbci	r19, 0x00	; 0
     d5c:	09 ab       	std	Y+49, r16	; 0x31
     d5e:	1a ab       	std	Y+50, r17	; 0x32
     d60:	2b ab       	std	Y+51, r18	; 0x33
     d62:	3c ab       	std	Y+52, r19	; 0x34
     d64:	14 c0       	rjmp	.+40     	; 0xd8e <__stack+0x92f>
     d66:	66 24       	eor	r6, r6
     d68:	77 24       	eor	r7, r7
     d6a:	43 01       	movw	r8, r6
     d6c:	21 e0       	ldi	r18, 0x01	; 1
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e0       	ldi	r20, 0x00	; 0
     d72:	50 e0       	ldi	r21, 0x00	; 0
     d74:	29 ab       	std	Y+49, r18	; 0x31
     d76:	3a ab       	std	Y+50, r19	; 0x32
     d78:	4b ab       	std	Y+51, r20	; 0x33
     d7a:	5c ab       	std	Y+52, r21	; 0x34
     d7c:	0b c0       	rjmp	.+22     	; 0xd94 <__stack+0x935>
     d7e:	66 24       	eor	r6, r6
     d80:	77 24       	eor	r7, r7
     d82:	43 01       	movw	r8, r6
     d84:	19 aa       	std	Y+49, r1	; 0x31
     d86:	1a aa       	std	Y+50, r1	; 0x32
     d88:	1b aa       	std	Y+51, r1	; 0x33
     d8a:	1c aa       	std	Y+52, r1	; 0x34
     d8c:	03 c0       	rjmp	.+6      	; 0xd94 <__stack+0x935>
     d8e:	66 24       	eor	r6, r6
     d90:	77 24       	eor	r7, r7
     d92:	43 01       	movw	r8, r6
     d94:	fe 01       	movw	r30, r28
     d96:	71 96       	adiw	r30, 0x11	; 17
     d98:	88 e0       	ldi	r24, 0x08	; 8
     d9a:	df 01       	movw	r26, r30
     d9c:	1d 92       	st	X+, r1
     d9e:	8a 95       	dec	r24
     da0:	e9 f7       	brne	.-6      	; 0xd9c <__stack+0x93d>
     da2:	a9 a8       	ldd	r10, Y+49	; 0x31
     da4:	ba a8       	ldd	r11, Y+50	; 0x32
     da6:	cb a8       	ldd	r12, Y+51	; 0x33
     da8:	dc a8       	ldd	r13, Y+52	; 0x34
     daa:	a9 8a       	std	Y+17, r10	; 0x11
     dac:	ba 8a       	std	Y+18, r11	; 0x12
     dae:	cb 8a       	std	Y+19, r12	; 0x13
     db0:	dc 8a       	std	Y+20, r13	; 0x14
     db2:	6d 8a       	std	Y+21, r6	; 0x15
     db4:	7e 8a       	std	Y+22, r7	; 0x16
     db6:	8f 8a       	std	Y+23, r8	; 0x17
     db8:	98 8e       	std	Y+24, r9	; 0x18
     dba:	29 a9       	ldd	r18, Y+49	; 0x31
     dbc:	3a 89       	ldd	r19, Y+18	; 0x12
     dbe:	4b 89       	ldd	r20, Y+19	; 0x13
     dc0:	5c 89       	ldd	r21, Y+20	; 0x14
     dc2:	66 2d       	mov	r22, r6
     dc4:	7e 89       	ldd	r23, Y+22	; 0x16
     dc6:	8f 89       	ldd	r24, Y+23	; 0x17
     dc8:	98 8d       	ldd	r25, Y+24	; 0x18
     dca:	c2 5a       	subi	r28, 0xA2	; 162
     dcc:	df 4f       	sbci	r29, 0xFF	; 255
     dce:	e2 e1       	ldi	r30, 0x12	; 18
     dd0:	0c 94 30 1e 	jmp	0x3c60	; 0x3c60 <__epilogue_restores__>

00000dd4 <_fpadd_parts>:
     dd4:	a0 e0       	ldi	r26, 0x00	; 0
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e0 ef       	ldi	r30, 0xF0	; 240
     dda:	f6 e0       	ldi	r31, 0x06	; 6
     ddc:	0c 94 14 1e 	jmp	0x3c28	; 0x3c28 <__prologue_saves__>
     de0:	dc 01       	movw	r26, r24
     de2:	2b 01       	movw	r4, r22
     de4:	fa 01       	movw	r30, r20
     de6:	9c 91       	ld	r25, X
     de8:	92 30       	cpi	r25, 0x02	; 2
     dea:	08 f4       	brcc	.+2      	; 0xdee <_fpadd_parts+0x1a>
     dec:	39 c1       	rjmp	.+626    	; 0x1060 <_fpadd_parts+0x28c>
     dee:	eb 01       	movw	r28, r22
     df0:	88 81       	ld	r24, Y
     df2:	82 30       	cpi	r24, 0x02	; 2
     df4:	08 f4       	brcc	.+2      	; 0xdf8 <_fpadd_parts+0x24>
     df6:	33 c1       	rjmp	.+614    	; 0x105e <_fpadd_parts+0x28a>
     df8:	94 30       	cpi	r25, 0x04	; 4
     dfa:	69 f4       	brne	.+26     	; 0xe16 <_fpadd_parts+0x42>
     dfc:	84 30       	cpi	r24, 0x04	; 4
     dfe:	09 f0       	breq	.+2      	; 0xe02 <_fpadd_parts+0x2e>
     e00:	2f c1       	rjmp	.+606    	; 0x1060 <_fpadd_parts+0x28c>
     e02:	11 96       	adiw	r26, 0x01	; 1
     e04:	9c 91       	ld	r25, X
     e06:	11 97       	sbiw	r26, 0x01	; 1
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	98 17       	cp	r25, r24
     e0c:	09 f4       	brne	.+2      	; 0xe10 <_fpadd_parts+0x3c>
     e0e:	28 c1       	rjmp	.+592    	; 0x1060 <_fpadd_parts+0x28c>
     e10:	a0 e6       	ldi	r26, 0x60	; 96
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	25 c1       	rjmp	.+586    	; 0x1060 <_fpadd_parts+0x28c>
     e16:	84 30       	cpi	r24, 0x04	; 4
     e18:	09 f4       	brne	.+2      	; 0xe1c <_fpadd_parts+0x48>
     e1a:	21 c1       	rjmp	.+578    	; 0x105e <_fpadd_parts+0x28a>
     e1c:	82 30       	cpi	r24, 0x02	; 2
     e1e:	a9 f4       	brne	.+42     	; 0xe4a <_fpadd_parts+0x76>
     e20:	92 30       	cpi	r25, 0x02	; 2
     e22:	09 f0       	breq	.+2      	; 0xe26 <_fpadd_parts+0x52>
     e24:	1d c1       	rjmp	.+570    	; 0x1060 <_fpadd_parts+0x28c>
     e26:	9a 01       	movw	r18, r20
     e28:	ad 01       	movw	r20, r26
     e2a:	88 e0       	ldi	r24, 0x08	; 8
     e2c:	ea 01       	movw	r28, r20
     e2e:	09 90       	ld	r0, Y+
     e30:	ae 01       	movw	r20, r28
     e32:	e9 01       	movw	r28, r18
     e34:	09 92       	st	Y+, r0
     e36:	9e 01       	movw	r18, r28
     e38:	81 50       	subi	r24, 0x01	; 1
     e3a:	c1 f7       	brne	.-16     	; 0xe2c <_fpadd_parts+0x58>
     e3c:	e2 01       	movw	r28, r4
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	11 96       	adiw	r26, 0x01	; 1
     e42:	9c 91       	ld	r25, X
     e44:	89 23       	and	r24, r25
     e46:	81 83       	std	Z+1, r24	; 0x01
     e48:	08 c1       	rjmp	.+528    	; 0x105a <_fpadd_parts+0x286>
     e4a:	92 30       	cpi	r25, 0x02	; 2
     e4c:	09 f4       	brne	.+2      	; 0xe50 <_fpadd_parts+0x7c>
     e4e:	07 c1       	rjmp	.+526    	; 0x105e <_fpadd_parts+0x28a>
     e50:	12 96       	adiw	r26, 0x02	; 2
     e52:	2d 90       	ld	r2, X+
     e54:	3c 90       	ld	r3, X
     e56:	13 97       	sbiw	r26, 0x03	; 3
     e58:	eb 01       	movw	r28, r22
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	9b 81       	ldd	r25, Y+3	; 0x03
     e5e:	14 96       	adiw	r26, 0x04	; 4
     e60:	ad 90       	ld	r10, X+
     e62:	bd 90       	ld	r11, X+
     e64:	cd 90       	ld	r12, X+
     e66:	dc 90       	ld	r13, X
     e68:	17 97       	sbiw	r26, 0x07	; 7
     e6a:	ec 80       	ldd	r14, Y+4	; 0x04
     e6c:	fd 80       	ldd	r15, Y+5	; 0x05
     e6e:	0e 81       	ldd	r16, Y+6	; 0x06
     e70:	1f 81       	ldd	r17, Y+7	; 0x07
     e72:	91 01       	movw	r18, r2
     e74:	28 1b       	sub	r18, r24
     e76:	39 0b       	sbc	r19, r25
     e78:	b9 01       	movw	r22, r18
     e7a:	37 ff       	sbrs	r19, 7
     e7c:	04 c0       	rjmp	.+8      	; 0xe86 <_fpadd_parts+0xb2>
     e7e:	66 27       	eor	r22, r22
     e80:	77 27       	eor	r23, r23
     e82:	62 1b       	sub	r22, r18
     e84:	73 0b       	sbc	r23, r19
     e86:	60 32       	cpi	r22, 0x20	; 32
     e88:	71 05       	cpc	r23, r1
     e8a:	0c f0       	brlt	.+2      	; 0xe8e <_fpadd_parts+0xba>
     e8c:	61 c0       	rjmp	.+194    	; 0xf50 <_fpadd_parts+0x17c>
     e8e:	12 16       	cp	r1, r18
     e90:	13 06       	cpc	r1, r19
     e92:	6c f5       	brge	.+90     	; 0xeee <_fpadd_parts+0x11a>
     e94:	37 01       	movw	r6, r14
     e96:	48 01       	movw	r8, r16
     e98:	06 2e       	mov	r0, r22
     e9a:	04 c0       	rjmp	.+8      	; 0xea4 <_fpadd_parts+0xd0>
     e9c:	96 94       	lsr	r9
     e9e:	87 94       	ror	r8
     ea0:	77 94       	ror	r7
     ea2:	67 94       	ror	r6
     ea4:	0a 94       	dec	r0
     ea6:	d2 f7       	brpl	.-12     	; 0xe9c <_fpadd_parts+0xc8>
     ea8:	21 e0       	ldi	r18, 0x01	; 1
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	50 e0       	ldi	r21, 0x00	; 0
     eb0:	04 c0       	rjmp	.+8      	; 0xeba <_fpadd_parts+0xe6>
     eb2:	22 0f       	add	r18, r18
     eb4:	33 1f       	adc	r19, r19
     eb6:	44 1f       	adc	r20, r20
     eb8:	55 1f       	adc	r21, r21
     eba:	6a 95       	dec	r22
     ebc:	d2 f7       	brpl	.-12     	; 0xeb2 <_fpadd_parts+0xde>
     ebe:	21 50       	subi	r18, 0x01	; 1
     ec0:	30 40       	sbci	r19, 0x00	; 0
     ec2:	40 40       	sbci	r20, 0x00	; 0
     ec4:	50 40       	sbci	r21, 0x00	; 0
     ec6:	2e 21       	and	r18, r14
     ec8:	3f 21       	and	r19, r15
     eca:	40 23       	and	r20, r16
     ecc:	51 23       	and	r21, r17
     ece:	21 15       	cp	r18, r1
     ed0:	31 05       	cpc	r19, r1
     ed2:	41 05       	cpc	r20, r1
     ed4:	51 05       	cpc	r21, r1
     ed6:	21 f0       	breq	.+8      	; 0xee0 <_fpadd_parts+0x10c>
     ed8:	21 e0       	ldi	r18, 0x01	; 1
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	40 e0       	ldi	r20, 0x00	; 0
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	79 01       	movw	r14, r18
     ee2:	8a 01       	movw	r16, r20
     ee4:	e6 28       	or	r14, r6
     ee6:	f7 28       	or	r15, r7
     ee8:	08 29       	or	r16, r8
     eea:	19 29       	or	r17, r9
     eec:	3c c0       	rjmp	.+120    	; 0xf66 <_fpadd_parts+0x192>
     eee:	23 2b       	or	r18, r19
     ef0:	d1 f1       	breq	.+116    	; 0xf66 <_fpadd_parts+0x192>
     ef2:	26 0e       	add	r2, r22
     ef4:	37 1e       	adc	r3, r23
     ef6:	35 01       	movw	r6, r10
     ef8:	46 01       	movw	r8, r12
     efa:	06 2e       	mov	r0, r22
     efc:	04 c0       	rjmp	.+8      	; 0xf06 <_fpadd_parts+0x132>
     efe:	96 94       	lsr	r9
     f00:	87 94       	ror	r8
     f02:	77 94       	ror	r7
     f04:	67 94       	ror	r6
     f06:	0a 94       	dec	r0
     f08:	d2 f7       	brpl	.-12     	; 0xefe <_fpadd_parts+0x12a>
     f0a:	21 e0       	ldi	r18, 0x01	; 1
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	40 e0       	ldi	r20, 0x00	; 0
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	04 c0       	rjmp	.+8      	; 0xf1c <_fpadd_parts+0x148>
     f14:	22 0f       	add	r18, r18
     f16:	33 1f       	adc	r19, r19
     f18:	44 1f       	adc	r20, r20
     f1a:	55 1f       	adc	r21, r21
     f1c:	6a 95       	dec	r22
     f1e:	d2 f7       	brpl	.-12     	; 0xf14 <_fpadd_parts+0x140>
     f20:	21 50       	subi	r18, 0x01	; 1
     f22:	30 40       	sbci	r19, 0x00	; 0
     f24:	40 40       	sbci	r20, 0x00	; 0
     f26:	50 40       	sbci	r21, 0x00	; 0
     f28:	2a 21       	and	r18, r10
     f2a:	3b 21       	and	r19, r11
     f2c:	4c 21       	and	r20, r12
     f2e:	5d 21       	and	r21, r13
     f30:	21 15       	cp	r18, r1
     f32:	31 05       	cpc	r19, r1
     f34:	41 05       	cpc	r20, r1
     f36:	51 05       	cpc	r21, r1
     f38:	21 f0       	breq	.+8      	; 0xf42 <_fpadd_parts+0x16e>
     f3a:	21 e0       	ldi	r18, 0x01	; 1
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	59 01       	movw	r10, r18
     f44:	6a 01       	movw	r12, r20
     f46:	a6 28       	or	r10, r6
     f48:	b7 28       	or	r11, r7
     f4a:	c8 28       	or	r12, r8
     f4c:	d9 28       	or	r13, r9
     f4e:	0b c0       	rjmp	.+22     	; 0xf66 <_fpadd_parts+0x192>
     f50:	82 15       	cp	r24, r2
     f52:	93 05       	cpc	r25, r3
     f54:	2c f0       	brlt	.+10     	; 0xf60 <_fpadd_parts+0x18c>
     f56:	1c 01       	movw	r2, r24
     f58:	aa 24       	eor	r10, r10
     f5a:	bb 24       	eor	r11, r11
     f5c:	65 01       	movw	r12, r10
     f5e:	03 c0       	rjmp	.+6      	; 0xf66 <_fpadd_parts+0x192>
     f60:	ee 24       	eor	r14, r14
     f62:	ff 24       	eor	r15, r15
     f64:	87 01       	movw	r16, r14
     f66:	11 96       	adiw	r26, 0x01	; 1
     f68:	9c 91       	ld	r25, X
     f6a:	d2 01       	movw	r26, r4
     f6c:	11 96       	adiw	r26, 0x01	; 1
     f6e:	8c 91       	ld	r24, X
     f70:	98 17       	cp	r25, r24
     f72:	09 f4       	brne	.+2      	; 0xf76 <_fpadd_parts+0x1a2>
     f74:	45 c0       	rjmp	.+138    	; 0x1000 <_fpadd_parts+0x22c>
     f76:	99 23       	and	r25, r25
     f78:	39 f0       	breq	.+14     	; 0xf88 <_fpadd_parts+0x1b4>
     f7a:	a8 01       	movw	r20, r16
     f7c:	97 01       	movw	r18, r14
     f7e:	2a 19       	sub	r18, r10
     f80:	3b 09       	sbc	r19, r11
     f82:	4c 09       	sbc	r20, r12
     f84:	5d 09       	sbc	r21, r13
     f86:	06 c0       	rjmp	.+12     	; 0xf94 <_fpadd_parts+0x1c0>
     f88:	a6 01       	movw	r20, r12
     f8a:	95 01       	movw	r18, r10
     f8c:	2e 19       	sub	r18, r14
     f8e:	3f 09       	sbc	r19, r15
     f90:	40 0b       	sbc	r20, r16
     f92:	51 0b       	sbc	r21, r17
     f94:	57 fd       	sbrc	r21, 7
     f96:	08 c0       	rjmp	.+16     	; 0xfa8 <_fpadd_parts+0x1d4>
     f98:	11 82       	std	Z+1, r1	; 0x01
     f9a:	33 82       	std	Z+3, r3	; 0x03
     f9c:	22 82       	std	Z+2, r2	; 0x02
     f9e:	24 83       	std	Z+4, r18	; 0x04
     fa0:	35 83       	std	Z+5, r19	; 0x05
     fa2:	46 83       	std	Z+6, r20	; 0x06
     fa4:	57 83       	std	Z+7, r21	; 0x07
     fa6:	1d c0       	rjmp	.+58     	; 0xfe2 <_fpadd_parts+0x20e>
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	81 83       	std	Z+1, r24	; 0x01
     fac:	33 82       	std	Z+3, r3	; 0x03
     fae:	22 82       	std	Z+2, r2	; 0x02
     fb0:	88 27       	eor	r24, r24
     fb2:	99 27       	eor	r25, r25
     fb4:	dc 01       	movw	r26, r24
     fb6:	82 1b       	sub	r24, r18
     fb8:	93 0b       	sbc	r25, r19
     fba:	a4 0b       	sbc	r26, r20
     fbc:	b5 0b       	sbc	r27, r21
     fbe:	84 83       	std	Z+4, r24	; 0x04
     fc0:	95 83       	std	Z+5, r25	; 0x05
     fc2:	a6 83       	std	Z+6, r26	; 0x06
     fc4:	b7 83       	std	Z+7, r27	; 0x07
     fc6:	0d c0       	rjmp	.+26     	; 0xfe2 <_fpadd_parts+0x20e>
     fc8:	22 0f       	add	r18, r18
     fca:	33 1f       	adc	r19, r19
     fcc:	44 1f       	adc	r20, r20
     fce:	55 1f       	adc	r21, r21
     fd0:	24 83       	std	Z+4, r18	; 0x04
     fd2:	35 83       	std	Z+5, r19	; 0x05
     fd4:	46 83       	std	Z+6, r20	; 0x06
     fd6:	57 83       	std	Z+7, r21	; 0x07
     fd8:	82 81       	ldd	r24, Z+2	; 0x02
     fda:	93 81       	ldd	r25, Z+3	; 0x03
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	93 83       	std	Z+3, r25	; 0x03
     fe0:	82 83       	std	Z+2, r24	; 0x02
     fe2:	24 81       	ldd	r18, Z+4	; 0x04
     fe4:	35 81       	ldd	r19, Z+5	; 0x05
     fe6:	46 81       	ldd	r20, Z+6	; 0x06
     fe8:	57 81       	ldd	r21, Z+7	; 0x07
     fea:	da 01       	movw	r26, r20
     fec:	c9 01       	movw	r24, r18
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	a1 09       	sbc	r26, r1
     ff2:	b1 09       	sbc	r27, r1
     ff4:	8f 5f       	subi	r24, 0xFF	; 255
     ff6:	9f 4f       	sbci	r25, 0xFF	; 255
     ff8:	af 4f       	sbci	r26, 0xFF	; 255
     ffa:	bf 43       	sbci	r27, 0x3F	; 63
     ffc:	28 f3       	brcs	.-54     	; 0xfc8 <_fpadd_parts+0x1f4>
     ffe:	0b c0       	rjmp	.+22     	; 0x1016 <_fpadd_parts+0x242>
    1000:	91 83       	std	Z+1, r25	; 0x01
    1002:	33 82       	std	Z+3, r3	; 0x03
    1004:	22 82       	std	Z+2, r2	; 0x02
    1006:	ea 0c       	add	r14, r10
    1008:	fb 1c       	adc	r15, r11
    100a:	0c 1d       	adc	r16, r12
    100c:	1d 1d       	adc	r17, r13
    100e:	e4 82       	std	Z+4, r14	; 0x04
    1010:	f5 82       	std	Z+5, r15	; 0x05
    1012:	06 83       	std	Z+6, r16	; 0x06
    1014:	17 83       	std	Z+7, r17	; 0x07
    1016:	83 e0       	ldi	r24, 0x03	; 3
    1018:	80 83       	st	Z, r24
    101a:	24 81       	ldd	r18, Z+4	; 0x04
    101c:	35 81       	ldd	r19, Z+5	; 0x05
    101e:	46 81       	ldd	r20, Z+6	; 0x06
    1020:	57 81       	ldd	r21, Z+7	; 0x07
    1022:	57 ff       	sbrs	r21, 7
    1024:	1a c0       	rjmp	.+52     	; 0x105a <_fpadd_parts+0x286>
    1026:	c9 01       	movw	r24, r18
    1028:	aa 27       	eor	r26, r26
    102a:	97 fd       	sbrc	r25, 7
    102c:	a0 95       	com	r26
    102e:	ba 2f       	mov	r27, r26
    1030:	81 70       	andi	r24, 0x01	; 1
    1032:	90 70       	andi	r25, 0x00	; 0
    1034:	a0 70       	andi	r26, 0x00	; 0
    1036:	b0 70       	andi	r27, 0x00	; 0
    1038:	56 95       	lsr	r21
    103a:	47 95       	ror	r20
    103c:	37 95       	ror	r19
    103e:	27 95       	ror	r18
    1040:	82 2b       	or	r24, r18
    1042:	93 2b       	or	r25, r19
    1044:	a4 2b       	or	r26, r20
    1046:	b5 2b       	or	r27, r21
    1048:	84 83       	std	Z+4, r24	; 0x04
    104a:	95 83       	std	Z+5, r25	; 0x05
    104c:	a6 83       	std	Z+6, r26	; 0x06
    104e:	b7 83       	std	Z+7, r27	; 0x07
    1050:	82 81       	ldd	r24, Z+2	; 0x02
    1052:	93 81       	ldd	r25, Z+3	; 0x03
    1054:	01 96       	adiw	r24, 0x01	; 1
    1056:	93 83       	std	Z+3, r25	; 0x03
    1058:	82 83       	std	Z+2, r24	; 0x02
    105a:	df 01       	movw	r26, r30
    105c:	01 c0       	rjmp	.+2      	; 0x1060 <_fpadd_parts+0x28c>
    105e:	d2 01       	movw	r26, r4
    1060:	cd 01       	movw	r24, r26
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	e2 e1       	ldi	r30, 0x12	; 18
    1068:	0c 94 30 1e 	jmp	0x3c60	; 0x3c60 <__epilogue_restores__>

0000106c <__subsf3>:
    106c:	a0 e2       	ldi	r26, 0x20	; 32
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	ec e3       	ldi	r30, 0x3C	; 60
    1072:	f8 e0       	ldi	r31, 0x08	; 8
    1074:	0c 94 20 1e 	jmp	0x3c40	; 0x3c40 <__prologue_saves__+0x18>
    1078:	69 83       	std	Y+1, r22	; 0x01
    107a:	7a 83       	std	Y+2, r23	; 0x02
    107c:	8b 83       	std	Y+3, r24	; 0x03
    107e:	9c 83       	std	Y+4, r25	; 0x04
    1080:	2d 83       	std	Y+5, r18	; 0x05
    1082:	3e 83       	std	Y+6, r19	; 0x06
    1084:	4f 83       	std	Y+7, r20	; 0x07
    1086:	58 87       	std	Y+8, r21	; 0x08
    1088:	e9 e0       	ldi	r30, 0x09	; 9
    108a:	ee 2e       	mov	r14, r30
    108c:	f1 2c       	mov	r15, r1
    108e:	ec 0e       	add	r14, r28
    1090:	fd 1e       	adc	r15, r29
    1092:	ce 01       	movw	r24, r28
    1094:	01 96       	adiw	r24, 0x01	; 1
    1096:	b7 01       	movw	r22, r14
    1098:	0e 94 47 0b 	call	0x168e	; 0x168e <__unpack_f>
    109c:	8e 01       	movw	r16, r28
    109e:	0f 5e       	subi	r16, 0xEF	; 239
    10a0:	1f 4f       	sbci	r17, 0xFF	; 255
    10a2:	ce 01       	movw	r24, r28
    10a4:	05 96       	adiw	r24, 0x05	; 5
    10a6:	b8 01       	movw	r22, r16
    10a8:	0e 94 47 0b 	call	0x168e	; 0x168e <__unpack_f>
    10ac:	8a 89       	ldd	r24, Y+18	; 0x12
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	89 27       	eor	r24, r25
    10b2:	8a 8b       	std	Y+18, r24	; 0x12
    10b4:	c7 01       	movw	r24, r14
    10b6:	b8 01       	movw	r22, r16
    10b8:	ae 01       	movw	r20, r28
    10ba:	47 5e       	subi	r20, 0xE7	; 231
    10bc:	5f 4f       	sbci	r21, 0xFF	; 255
    10be:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_fpadd_parts>
    10c2:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__pack_f>
    10c6:	a0 96       	adiw	r28, 0x20	; 32
    10c8:	e6 e0       	ldi	r30, 0x06	; 6
    10ca:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__epilogue_restores__+0x18>

000010ce <__addsf3>:
    10ce:	a0 e2       	ldi	r26, 0x20	; 32
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	ed e6       	ldi	r30, 0x6D	; 109
    10d4:	f8 e0       	ldi	r31, 0x08	; 8
    10d6:	0c 94 20 1e 	jmp	0x3c40	; 0x3c40 <__prologue_saves__+0x18>
    10da:	69 83       	std	Y+1, r22	; 0x01
    10dc:	7a 83       	std	Y+2, r23	; 0x02
    10de:	8b 83       	std	Y+3, r24	; 0x03
    10e0:	9c 83       	std	Y+4, r25	; 0x04
    10e2:	2d 83       	std	Y+5, r18	; 0x05
    10e4:	3e 83       	std	Y+6, r19	; 0x06
    10e6:	4f 83       	std	Y+7, r20	; 0x07
    10e8:	58 87       	std	Y+8, r21	; 0x08
    10ea:	f9 e0       	ldi	r31, 0x09	; 9
    10ec:	ef 2e       	mov	r14, r31
    10ee:	f1 2c       	mov	r15, r1
    10f0:	ec 0e       	add	r14, r28
    10f2:	fd 1e       	adc	r15, r29
    10f4:	ce 01       	movw	r24, r28
    10f6:	01 96       	adiw	r24, 0x01	; 1
    10f8:	b7 01       	movw	r22, r14
    10fa:	0e 94 47 0b 	call	0x168e	; 0x168e <__unpack_f>
    10fe:	8e 01       	movw	r16, r28
    1100:	0f 5e       	subi	r16, 0xEF	; 239
    1102:	1f 4f       	sbci	r17, 0xFF	; 255
    1104:	ce 01       	movw	r24, r28
    1106:	05 96       	adiw	r24, 0x05	; 5
    1108:	b8 01       	movw	r22, r16
    110a:	0e 94 47 0b 	call	0x168e	; 0x168e <__unpack_f>
    110e:	c7 01       	movw	r24, r14
    1110:	b8 01       	movw	r22, r16
    1112:	ae 01       	movw	r20, r28
    1114:	47 5e       	subi	r20, 0xE7	; 231
    1116:	5f 4f       	sbci	r21, 0xFF	; 255
    1118:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_fpadd_parts>
    111c:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__pack_f>
    1120:	a0 96       	adiw	r28, 0x20	; 32
    1122:	e6 e0       	ldi	r30, 0x06	; 6
    1124:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__epilogue_restores__+0x18>

00001128 <__mulsf3>:
    1128:	a0 e2       	ldi	r26, 0x20	; 32
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	ea e9       	ldi	r30, 0x9A	; 154
    112e:	f8 e0       	ldi	r31, 0x08	; 8
    1130:	0c 94 14 1e 	jmp	0x3c28	; 0x3c28 <__prologue_saves__>
    1134:	69 83       	std	Y+1, r22	; 0x01
    1136:	7a 83       	std	Y+2, r23	; 0x02
    1138:	8b 83       	std	Y+3, r24	; 0x03
    113a:	9c 83       	std	Y+4, r25	; 0x04
    113c:	2d 83       	std	Y+5, r18	; 0x05
    113e:	3e 83       	std	Y+6, r19	; 0x06
    1140:	4f 83       	std	Y+7, r20	; 0x07
    1142:	58 87       	std	Y+8, r21	; 0x08
    1144:	ce 01       	movw	r24, r28
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	be 01       	movw	r22, r28
    114a:	67 5f       	subi	r22, 0xF7	; 247
    114c:	7f 4f       	sbci	r23, 0xFF	; 255
    114e:	0e 94 47 0b 	call	0x168e	; 0x168e <__unpack_f>
    1152:	ce 01       	movw	r24, r28
    1154:	05 96       	adiw	r24, 0x05	; 5
    1156:	be 01       	movw	r22, r28
    1158:	6f 5e       	subi	r22, 0xEF	; 239
    115a:	7f 4f       	sbci	r23, 0xFF	; 255
    115c:	0e 94 47 0b 	call	0x168e	; 0x168e <__unpack_f>
    1160:	99 85       	ldd	r25, Y+9	; 0x09
    1162:	92 30       	cpi	r25, 0x02	; 2
    1164:	88 f0       	brcs	.+34     	; 0x1188 <__mulsf3+0x60>
    1166:	89 89       	ldd	r24, Y+17	; 0x11
    1168:	82 30       	cpi	r24, 0x02	; 2
    116a:	c8 f0       	brcs	.+50     	; 0x119e <__mulsf3+0x76>
    116c:	94 30       	cpi	r25, 0x04	; 4
    116e:	19 f4       	brne	.+6      	; 0x1176 <__mulsf3+0x4e>
    1170:	82 30       	cpi	r24, 0x02	; 2
    1172:	51 f4       	brne	.+20     	; 0x1188 <__mulsf3+0x60>
    1174:	04 c0       	rjmp	.+8      	; 0x117e <__mulsf3+0x56>
    1176:	84 30       	cpi	r24, 0x04	; 4
    1178:	29 f4       	brne	.+10     	; 0x1184 <__mulsf3+0x5c>
    117a:	92 30       	cpi	r25, 0x02	; 2
    117c:	81 f4       	brne	.+32     	; 0x119e <__mulsf3+0x76>
    117e:	80 e6       	ldi	r24, 0x60	; 96
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	c6 c0       	rjmp	.+396    	; 0x1310 <__mulsf3+0x1e8>
    1184:	92 30       	cpi	r25, 0x02	; 2
    1186:	49 f4       	brne	.+18     	; 0x119a <__mulsf3+0x72>
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	9a 85       	ldd	r25, Y+10	; 0x0a
    118c:	8a 89       	ldd	r24, Y+18	; 0x12
    118e:	98 13       	cpse	r25, r24
    1190:	21 e0       	ldi	r18, 0x01	; 1
    1192:	2a 87       	std	Y+10, r18	; 0x0a
    1194:	ce 01       	movw	r24, r28
    1196:	09 96       	adiw	r24, 0x09	; 9
    1198:	bb c0       	rjmp	.+374    	; 0x1310 <__mulsf3+0x1e8>
    119a:	82 30       	cpi	r24, 0x02	; 2
    119c:	49 f4       	brne	.+18     	; 0x11b0 <__mulsf3+0x88>
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a2:	8a 89       	ldd	r24, Y+18	; 0x12
    11a4:	98 13       	cpse	r25, r24
    11a6:	21 e0       	ldi	r18, 0x01	; 1
    11a8:	2a 8b       	std	Y+18, r18	; 0x12
    11aa:	ce 01       	movw	r24, r28
    11ac:	41 96       	adiw	r24, 0x11	; 17
    11ae:	b0 c0       	rjmp	.+352    	; 0x1310 <__mulsf3+0x1e8>
    11b0:	2d 84       	ldd	r2, Y+13	; 0x0d
    11b2:	3e 84       	ldd	r3, Y+14	; 0x0e
    11b4:	4f 84       	ldd	r4, Y+15	; 0x0f
    11b6:	58 88       	ldd	r5, Y+16	; 0x10
    11b8:	6d 88       	ldd	r6, Y+21	; 0x15
    11ba:	7e 88       	ldd	r7, Y+22	; 0x16
    11bc:	8f 88       	ldd	r8, Y+23	; 0x17
    11be:	98 8c       	ldd	r9, Y+24	; 0x18
    11c0:	ee 24       	eor	r14, r14
    11c2:	ff 24       	eor	r15, r15
    11c4:	87 01       	movw	r16, r14
    11c6:	aa 24       	eor	r10, r10
    11c8:	bb 24       	eor	r11, r11
    11ca:	65 01       	movw	r12, r10
    11cc:	40 e0       	ldi	r20, 0x00	; 0
    11ce:	50 e0       	ldi	r21, 0x00	; 0
    11d0:	60 e0       	ldi	r22, 0x00	; 0
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	e0 e0       	ldi	r30, 0x00	; 0
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	c1 01       	movw	r24, r2
    11da:	81 70       	andi	r24, 0x01	; 1
    11dc:	90 70       	andi	r25, 0x00	; 0
    11de:	89 2b       	or	r24, r25
    11e0:	e9 f0       	breq	.+58     	; 0x121c <__mulsf3+0xf4>
    11e2:	e6 0c       	add	r14, r6
    11e4:	f7 1c       	adc	r15, r7
    11e6:	08 1d       	adc	r16, r8
    11e8:	19 1d       	adc	r17, r9
    11ea:	9a 01       	movw	r18, r20
    11ec:	ab 01       	movw	r20, r22
    11ee:	2a 0d       	add	r18, r10
    11f0:	3b 1d       	adc	r19, r11
    11f2:	4c 1d       	adc	r20, r12
    11f4:	5d 1d       	adc	r21, r13
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	a0 e0       	ldi	r26, 0x00	; 0
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e6 14       	cp	r14, r6
    1200:	f7 04       	cpc	r15, r7
    1202:	08 05       	cpc	r16, r8
    1204:	19 05       	cpc	r17, r9
    1206:	20 f4       	brcc	.+8      	; 0x1210 <__mulsf3+0xe8>
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	a0 e0       	ldi	r26, 0x00	; 0
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	ba 01       	movw	r22, r20
    1212:	a9 01       	movw	r20, r18
    1214:	48 0f       	add	r20, r24
    1216:	59 1f       	adc	r21, r25
    1218:	6a 1f       	adc	r22, r26
    121a:	7b 1f       	adc	r23, r27
    121c:	aa 0c       	add	r10, r10
    121e:	bb 1c       	adc	r11, r11
    1220:	cc 1c       	adc	r12, r12
    1222:	dd 1c       	adc	r13, r13
    1224:	97 fe       	sbrs	r9, 7
    1226:	08 c0       	rjmp	.+16     	; 0x1238 <__mulsf3+0x110>
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	a0 e0       	ldi	r26, 0x00	; 0
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	a8 2a       	or	r10, r24
    1232:	b9 2a       	or	r11, r25
    1234:	ca 2a       	or	r12, r26
    1236:	db 2a       	or	r13, r27
    1238:	31 96       	adiw	r30, 0x01	; 1
    123a:	e0 32       	cpi	r30, 0x20	; 32
    123c:	f1 05       	cpc	r31, r1
    123e:	49 f0       	breq	.+18     	; 0x1252 <__mulsf3+0x12a>
    1240:	66 0c       	add	r6, r6
    1242:	77 1c       	adc	r7, r7
    1244:	88 1c       	adc	r8, r8
    1246:	99 1c       	adc	r9, r9
    1248:	56 94       	lsr	r5
    124a:	47 94       	ror	r4
    124c:	37 94       	ror	r3
    124e:	27 94       	ror	r2
    1250:	c3 cf       	rjmp	.-122    	; 0x11d8 <__mulsf3+0xb0>
    1252:	fa 85       	ldd	r31, Y+10	; 0x0a
    1254:	ea 89       	ldd	r30, Y+18	; 0x12
    1256:	2b 89       	ldd	r18, Y+19	; 0x13
    1258:	3c 89       	ldd	r19, Y+20	; 0x14
    125a:	8b 85       	ldd	r24, Y+11	; 0x0b
    125c:	9c 85       	ldd	r25, Y+12	; 0x0c
    125e:	28 0f       	add	r18, r24
    1260:	39 1f       	adc	r19, r25
    1262:	2e 5f       	subi	r18, 0xFE	; 254
    1264:	3f 4f       	sbci	r19, 0xFF	; 255
    1266:	17 c0       	rjmp	.+46     	; 0x1296 <__mulsf3+0x16e>
    1268:	ca 01       	movw	r24, r20
    126a:	81 70       	andi	r24, 0x01	; 1
    126c:	90 70       	andi	r25, 0x00	; 0
    126e:	89 2b       	or	r24, r25
    1270:	61 f0       	breq	.+24     	; 0x128a <__mulsf3+0x162>
    1272:	16 95       	lsr	r17
    1274:	07 95       	ror	r16
    1276:	f7 94       	ror	r15
    1278:	e7 94       	ror	r14
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a0 e0       	ldi	r26, 0x00	; 0
    1280:	b0 e8       	ldi	r27, 0x80	; 128
    1282:	e8 2a       	or	r14, r24
    1284:	f9 2a       	or	r15, r25
    1286:	0a 2b       	or	r16, r26
    1288:	1b 2b       	or	r17, r27
    128a:	76 95       	lsr	r23
    128c:	67 95       	ror	r22
    128e:	57 95       	ror	r21
    1290:	47 95       	ror	r20
    1292:	2f 5f       	subi	r18, 0xFF	; 255
    1294:	3f 4f       	sbci	r19, 0xFF	; 255
    1296:	77 fd       	sbrc	r23, 7
    1298:	e7 cf       	rjmp	.-50     	; 0x1268 <__mulsf3+0x140>
    129a:	0c c0       	rjmp	.+24     	; 0x12b4 <__mulsf3+0x18c>
    129c:	44 0f       	add	r20, r20
    129e:	55 1f       	adc	r21, r21
    12a0:	66 1f       	adc	r22, r22
    12a2:	77 1f       	adc	r23, r23
    12a4:	17 fd       	sbrc	r17, 7
    12a6:	41 60       	ori	r20, 0x01	; 1
    12a8:	ee 0c       	add	r14, r14
    12aa:	ff 1c       	adc	r15, r15
    12ac:	00 1f       	adc	r16, r16
    12ae:	11 1f       	adc	r17, r17
    12b0:	21 50       	subi	r18, 0x01	; 1
    12b2:	30 40       	sbci	r19, 0x00	; 0
    12b4:	40 30       	cpi	r20, 0x00	; 0
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	59 07       	cpc	r21, r25
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	69 07       	cpc	r22, r25
    12be:	90 e4       	ldi	r25, 0x40	; 64
    12c0:	79 07       	cpc	r23, r25
    12c2:	60 f3       	brcs	.-40     	; 0x129c <__mulsf3+0x174>
    12c4:	2b 8f       	std	Y+27, r18	; 0x1b
    12c6:	3c 8f       	std	Y+28, r19	; 0x1c
    12c8:	db 01       	movw	r26, r22
    12ca:	ca 01       	movw	r24, r20
    12cc:	8f 77       	andi	r24, 0x7F	; 127
    12ce:	90 70       	andi	r25, 0x00	; 0
    12d0:	a0 70       	andi	r26, 0x00	; 0
    12d2:	b0 70       	andi	r27, 0x00	; 0
    12d4:	80 34       	cpi	r24, 0x40	; 64
    12d6:	91 05       	cpc	r25, r1
    12d8:	a1 05       	cpc	r26, r1
    12da:	b1 05       	cpc	r27, r1
    12dc:	61 f4       	brne	.+24     	; 0x12f6 <__mulsf3+0x1ce>
    12de:	47 fd       	sbrc	r20, 7
    12e0:	0a c0       	rjmp	.+20     	; 0x12f6 <__mulsf3+0x1ce>
    12e2:	e1 14       	cp	r14, r1
    12e4:	f1 04       	cpc	r15, r1
    12e6:	01 05       	cpc	r16, r1
    12e8:	11 05       	cpc	r17, r1
    12ea:	29 f0       	breq	.+10     	; 0x12f6 <__mulsf3+0x1ce>
    12ec:	40 5c       	subi	r20, 0xC0	; 192
    12ee:	5f 4f       	sbci	r21, 0xFF	; 255
    12f0:	6f 4f       	sbci	r22, 0xFF	; 255
    12f2:	7f 4f       	sbci	r23, 0xFF	; 255
    12f4:	40 78       	andi	r20, 0x80	; 128
    12f6:	1a 8e       	std	Y+26, r1	; 0x1a
    12f8:	fe 17       	cp	r31, r30
    12fa:	11 f0       	breq	.+4      	; 0x1300 <__mulsf3+0x1d8>
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	8a 8f       	std	Y+26, r24	; 0x1a
    1300:	4d 8f       	std	Y+29, r20	; 0x1d
    1302:	5e 8f       	std	Y+30, r21	; 0x1e
    1304:	6f 8f       	std	Y+31, r22	; 0x1f
    1306:	78 a3       	std	Y+32, r23	; 0x20
    1308:	83 e0       	ldi	r24, 0x03	; 3
    130a:	89 8f       	std	Y+25, r24	; 0x19
    130c:	ce 01       	movw	r24, r28
    130e:	49 96       	adiw	r24, 0x19	; 25
    1310:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__pack_f>
    1314:	a0 96       	adiw	r28, 0x20	; 32
    1316:	e2 e1       	ldi	r30, 0x12	; 18
    1318:	0c 94 30 1e 	jmp	0x3c60	; 0x3c60 <__epilogue_restores__>

0000131c <__gtsf2>:
    131c:	a8 e1       	ldi	r26, 0x18	; 24
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e4 e9       	ldi	r30, 0x94	; 148
    1322:	f9 e0       	ldi	r31, 0x09	; 9
    1324:	0c 94 20 1e 	jmp	0x3c40	; 0x3c40 <__prologue_saves__+0x18>
    1328:	69 83       	std	Y+1, r22	; 0x01
    132a:	7a 83       	std	Y+2, r23	; 0x02
    132c:	8b 83       	std	Y+3, r24	; 0x03
    132e:	9c 83       	std	Y+4, r25	; 0x04
    1330:	2d 83       	std	Y+5, r18	; 0x05
    1332:	3e 83       	std	Y+6, r19	; 0x06
    1334:	4f 83       	std	Y+7, r20	; 0x07
    1336:	58 87       	std	Y+8, r21	; 0x08
    1338:	89 e0       	ldi	r24, 0x09	; 9
    133a:	e8 2e       	mov	r14, r24
    133c:	f1 2c       	mov	r15, r1
    133e:	ec 0e       	add	r14, r28
    1340:	fd 1e       	adc	r15, r29
    1342:	ce 01       	movw	r24, r28
    1344:	01 96       	adiw	r24, 0x01	; 1
    1346:	b7 01       	movw	r22, r14
    1348:	0e 94 47 0b 	call	0x168e	; 0x168e <__unpack_f>
    134c:	8e 01       	movw	r16, r28
    134e:	0f 5e       	subi	r16, 0xEF	; 239
    1350:	1f 4f       	sbci	r17, 0xFF	; 255
    1352:	ce 01       	movw	r24, r28
    1354:	05 96       	adiw	r24, 0x05	; 5
    1356:	b8 01       	movw	r22, r16
    1358:	0e 94 47 0b 	call	0x168e	; 0x168e <__unpack_f>
    135c:	89 85       	ldd	r24, Y+9	; 0x09
    135e:	82 30       	cpi	r24, 0x02	; 2
    1360:	40 f0       	brcs	.+16     	; 0x1372 <__gtsf2+0x56>
    1362:	89 89       	ldd	r24, Y+17	; 0x11
    1364:	82 30       	cpi	r24, 0x02	; 2
    1366:	28 f0       	brcs	.+10     	; 0x1372 <__gtsf2+0x56>
    1368:	c7 01       	movw	r24, r14
    136a:	b8 01       	movw	r22, r16
    136c:	0e 94 bf 0b 	call	0x177e	; 0x177e <__fpcmp_parts_f>
    1370:	01 c0       	rjmp	.+2      	; 0x1374 <__gtsf2+0x58>
    1372:	8f ef       	ldi	r24, 0xFF	; 255
    1374:	68 96       	adiw	r28, 0x18	; 24
    1376:	e6 e0       	ldi	r30, 0x06	; 6
    1378:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__epilogue_restores__+0x18>

0000137c <__gesf2>:
    137c:	a8 e1       	ldi	r26, 0x18	; 24
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e4 ec       	ldi	r30, 0xC4	; 196
    1382:	f9 e0       	ldi	r31, 0x09	; 9
    1384:	0c 94 20 1e 	jmp	0x3c40	; 0x3c40 <__prologue_saves__+0x18>
    1388:	69 83       	std	Y+1, r22	; 0x01
    138a:	7a 83       	std	Y+2, r23	; 0x02
    138c:	8b 83       	std	Y+3, r24	; 0x03
    138e:	9c 83       	std	Y+4, r25	; 0x04
    1390:	2d 83       	std	Y+5, r18	; 0x05
    1392:	3e 83       	std	Y+6, r19	; 0x06
    1394:	4f 83       	std	Y+7, r20	; 0x07
    1396:	58 87       	std	Y+8, r21	; 0x08
    1398:	89 e0       	ldi	r24, 0x09	; 9
    139a:	e8 2e       	mov	r14, r24
    139c:	f1 2c       	mov	r15, r1
    139e:	ec 0e       	add	r14, r28
    13a0:	fd 1e       	adc	r15, r29
    13a2:	ce 01       	movw	r24, r28
    13a4:	01 96       	adiw	r24, 0x01	; 1
    13a6:	b7 01       	movw	r22, r14
    13a8:	0e 94 47 0b 	call	0x168e	; 0x168e <__unpack_f>
    13ac:	8e 01       	movw	r16, r28
    13ae:	0f 5e       	subi	r16, 0xEF	; 239
    13b0:	1f 4f       	sbci	r17, 0xFF	; 255
    13b2:	ce 01       	movw	r24, r28
    13b4:	05 96       	adiw	r24, 0x05	; 5
    13b6:	b8 01       	movw	r22, r16
    13b8:	0e 94 47 0b 	call	0x168e	; 0x168e <__unpack_f>
    13bc:	89 85       	ldd	r24, Y+9	; 0x09
    13be:	82 30       	cpi	r24, 0x02	; 2
    13c0:	40 f0       	brcs	.+16     	; 0x13d2 <__gesf2+0x56>
    13c2:	89 89       	ldd	r24, Y+17	; 0x11
    13c4:	82 30       	cpi	r24, 0x02	; 2
    13c6:	28 f0       	brcs	.+10     	; 0x13d2 <__gesf2+0x56>
    13c8:	c7 01       	movw	r24, r14
    13ca:	b8 01       	movw	r22, r16
    13cc:	0e 94 bf 0b 	call	0x177e	; 0x177e <__fpcmp_parts_f>
    13d0:	01 c0       	rjmp	.+2      	; 0x13d4 <__gesf2+0x58>
    13d2:	8f ef       	ldi	r24, 0xFF	; 255
    13d4:	68 96       	adiw	r28, 0x18	; 24
    13d6:	e6 e0       	ldi	r30, 0x06	; 6
    13d8:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__epilogue_restores__+0x18>

000013dc <__ltsf2>:
    13dc:	a8 e1       	ldi	r26, 0x18	; 24
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e4 ef       	ldi	r30, 0xF4	; 244
    13e2:	f9 e0       	ldi	r31, 0x09	; 9
    13e4:	0c 94 20 1e 	jmp	0x3c40	; 0x3c40 <__prologue_saves__+0x18>
    13e8:	69 83       	std	Y+1, r22	; 0x01
    13ea:	7a 83       	std	Y+2, r23	; 0x02
    13ec:	8b 83       	std	Y+3, r24	; 0x03
    13ee:	9c 83       	std	Y+4, r25	; 0x04
    13f0:	2d 83       	std	Y+5, r18	; 0x05
    13f2:	3e 83       	std	Y+6, r19	; 0x06
    13f4:	4f 83       	std	Y+7, r20	; 0x07
    13f6:	58 87       	std	Y+8, r21	; 0x08
    13f8:	89 e0       	ldi	r24, 0x09	; 9
    13fa:	e8 2e       	mov	r14, r24
    13fc:	f1 2c       	mov	r15, r1
    13fe:	ec 0e       	add	r14, r28
    1400:	fd 1e       	adc	r15, r29
    1402:	ce 01       	movw	r24, r28
    1404:	01 96       	adiw	r24, 0x01	; 1
    1406:	b7 01       	movw	r22, r14
    1408:	0e 94 47 0b 	call	0x168e	; 0x168e <__unpack_f>
    140c:	8e 01       	movw	r16, r28
    140e:	0f 5e       	subi	r16, 0xEF	; 239
    1410:	1f 4f       	sbci	r17, 0xFF	; 255
    1412:	ce 01       	movw	r24, r28
    1414:	05 96       	adiw	r24, 0x05	; 5
    1416:	b8 01       	movw	r22, r16
    1418:	0e 94 47 0b 	call	0x168e	; 0x168e <__unpack_f>
    141c:	89 85       	ldd	r24, Y+9	; 0x09
    141e:	82 30       	cpi	r24, 0x02	; 2
    1420:	40 f0       	brcs	.+16     	; 0x1432 <__ltsf2+0x56>
    1422:	89 89       	ldd	r24, Y+17	; 0x11
    1424:	82 30       	cpi	r24, 0x02	; 2
    1426:	28 f0       	brcs	.+10     	; 0x1432 <__ltsf2+0x56>
    1428:	c7 01       	movw	r24, r14
    142a:	b8 01       	movw	r22, r16
    142c:	0e 94 bf 0b 	call	0x177e	; 0x177e <__fpcmp_parts_f>
    1430:	01 c0       	rjmp	.+2      	; 0x1434 <__ltsf2+0x58>
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	68 96       	adiw	r28, 0x18	; 24
    1436:	e6 e0       	ldi	r30, 0x06	; 6
    1438:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__epilogue_restores__+0x18>

0000143c <__fixsfsi>:
    143c:	ac e0       	ldi	r26, 0x0C	; 12
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e4 e2       	ldi	r30, 0x24	; 36
    1442:	fa e0       	ldi	r31, 0x0A	; 10
    1444:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <__prologue_saves__+0x20>
    1448:	69 83       	std	Y+1, r22	; 0x01
    144a:	7a 83       	std	Y+2, r23	; 0x02
    144c:	8b 83       	std	Y+3, r24	; 0x03
    144e:	9c 83       	std	Y+4, r25	; 0x04
    1450:	ce 01       	movw	r24, r28
    1452:	01 96       	adiw	r24, 0x01	; 1
    1454:	be 01       	movw	r22, r28
    1456:	6b 5f       	subi	r22, 0xFB	; 251
    1458:	7f 4f       	sbci	r23, 0xFF	; 255
    145a:	0e 94 47 0b 	call	0x168e	; 0x168e <__unpack_f>
    145e:	8d 81       	ldd	r24, Y+5	; 0x05
    1460:	82 30       	cpi	r24, 0x02	; 2
    1462:	61 f1       	breq	.+88     	; 0x14bc <__fixsfsi+0x80>
    1464:	82 30       	cpi	r24, 0x02	; 2
    1466:	50 f1       	brcs	.+84     	; 0x14bc <__fixsfsi+0x80>
    1468:	84 30       	cpi	r24, 0x04	; 4
    146a:	21 f4       	brne	.+8      	; 0x1474 <__fixsfsi+0x38>
    146c:	8e 81       	ldd	r24, Y+6	; 0x06
    146e:	88 23       	and	r24, r24
    1470:	51 f1       	breq	.+84     	; 0x14c6 <__fixsfsi+0x8a>
    1472:	2e c0       	rjmp	.+92     	; 0x14d0 <__fixsfsi+0x94>
    1474:	2f 81       	ldd	r18, Y+7	; 0x07
    1476:	38 85       	ldd	r19, Y+8	; 0x08
    1478:	37 fd       	sbrc	r19, 7
    147a:	20 c0       	rjmp	.+64     	; 0x14bc <__fixsfsi+0x80>
    147c:	6e 81       	ldd	r22, Y+6	; 0x06
    147e:	2f 31       	cpi	r18, 0x1F	; 31
    1480:	31 05       	cpc	r19, r1
    1482:	1c f0       	brlt	.+6      	; 0x148a <__fixsfsi+0x4e>
    1484:	66 23       	and	r22, r22
    1486:	f9 f0       	breq	.+62     	; 0x14c6 <__fixsfsi+0x8a>
    1488:	23 c0       	rjmp	.+70     	; 0x14d0 <__fixsfsi+0x94>
    148a:	8e e1       	ldi	r24, 0x1E	; 30
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	82 1b       	sub	r24, r18
    1490:	93 0b       	sbc	r25, r19
    1492:	29 85       	ldd	r18, Y+9	; 0x09
    1494:	3a 85       	ldd	r19, Y+10	; 0x0a
    1496:	4b 85       	ldd	r20, Y+11	; 0x0b
    1498:	5c 85       	ldd	r21, Y+12	; 0x0c
    149a:	04 c0       	rjmp	.+8      	; 0x14a4 <__fixsfsi+0x68>
    149c:	56 95       	lsr	r21
    149e:	47 95       	ror	r20
    14a0:	37 95       	ror	r19
    14a2:	27 95       	ror	r18
    14a4:	8a 95       	dec	r24
    14a6:	d2 f7       	brpl	.-12     	; 0x149c <__fixsfsi+0x60>
    14a8:	66 23       	and	r22, r22
    14aa:	b1 f0       	breq	.+44     	; 0x14d8 <__fixsfsi+0x9c>
    14ac:	50 95       	com	r21
    14ae:	40 95       	com	r20
    14b0:	30 95       	com	r19
    14b2:	21 95       	neg	r18
    14b4:	3f 4f       	sbci	r19, 0xFF	; 255
    14b6:	4f 4f       	sbci	r20, 0xFF	; 255
    14b8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ba:	0e c0       	rjmp	.+28     	; 0x14d8 <__fixsfsi+0x9c>
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	40 e0       	ldi	r20, 0x00	; 0
    14c2:	50 e0       	ldi	r21, 0x00	; 0
    14c4:	09 c0       	rjmp	.+18     	; 0x14d8 <__fixsfsi+0x9c>
    14c6:	2f ef       	ldi	r18, 0xFF	; 255
    14c8:	3f ef       	ldi	r19, 0xFF	; 255
    14ca:	4f ef       	ldi	r20, 0xFF	; 255
    14cc:	5f e7       	ldi	r21, 0x7F	; 127
    14ce:	04 c0       	rjmp	.+8      	; 0x14d8 <__fixsfsi+0x9c>
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	50 e8       	ldi	r21, 0x80	; 128
    14d8:	b9 01       	movw	r22, r18
    14da:	ca 01       	movw	r24, r20
    14dc:	2c 96       	adiw	r28, 0x0c	; 12
    14de:	e2 e0       	ldi	r30, 0x02	; 2
    14e0:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__epilogue_restores__+0x20>

000014e4 <__pack_f>:
    14e4:	df 92       	push	r13
    14e6:	ef 92       	push	r14
    14e8:	ff 92       	push	r15
    14ea:	0f 93       	push	r16
    14ec:	1f 93       	push	r17
    14ee:	fc 01       	movw	r30, r24
    14f0:	e4 80       	ldd	r14, Z+4	; 0x04
    14f2:	f5 80       	ldd	r15, Z+5	; 0x05
    14f4:	06 81       	ldd	r16, Z+6	; 0x06
    14f6:	17 81       	ldd	r17, Z+7	; 0x07
    14f8:	d1 80       	ldd	r13, Z+1	; 0x01
    14fa:	80 81       	ld	r24, Z
    14fc:	82 30       	cpi	r24, 0x02	; 2
    14fe:	48 f4       	brcc	.+18     	; 0x1512 <__pack_f+0x2e>
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	a0 e1       	ldi	r26, 0x10	; 16
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e8 2a       	or	r14, r24
    150a:	f9 2a       	or	r15, r25
    150c:	0a 2b       	or	r16, r26
    150e:	1b 2b       	or	r17, r27
    1510:	a5 c0       	rjmp	.+330    	; 0x165c <__pack_f+0x178>
    1512:	84 30       	cpi	r24, 0x04	; 4
    1514:	09 f4       	brne	.+2      	; 0x1518 <__pack_f+0x34>
    1516:	9f c0       	rjmp	.+318    	; 0x1656 <__pack_f+0x172>
    1518:	82 30       	cpi	r24, 0x02	; 2
    151a:	21 f4       	brne	.+8      	; 0x1524 <__pack_f+0x40>
    151c:	ee 24       	eor	r14, r14
    151e:	ff 24       	eor	r15, r15
    1520:	87 01       	movw	r16, r14
    1522:	05 c0       	rjmp	.+10     	; 0x152e <__pack_f+0x4a>
    1524:	e1 14       	cp	r14, r1
    1526:	f1 04       	cpc	r15, r1
    1528:	01 05       	cpc	r16, r1
    152a:	11 05       	cpc	r17, r1
    152c:	19 f4       	brne	.+6      	; 0x1534 <__pack_f+0x50>
    152e:	e0 e0       	ldi	r30, 0x00	; 0
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	96 c0       	rjmp	.+300    	; 0x1660 <__pack_f+0x17c>
    1534:	62 81       	ldd	r22, Z+2	; 0x02
    1536:	73 81       	ldd	r23, Z+3	; 0x03
    1538:	9f ef       	ldi	r25, 0xFF	; 255
    153a:	62 38       	cpi	r22, 0x82	; 130
    153c:	79 07       	cpc	r23, r25
    153e:	0c f0       	brlt	.+2      	; 0x1542 <__pack_f+0x5e>
    1540:	5b c0       	rjmp	.+182    	; 0x15f8 <__pack_f+0x114>
    1542:	22 e8       	ldi	r18, 0x82	; 130
    1544:	3f ef       	ldi	r19, 0xFF	; 255
    1546:	26 1b       	sub	r18, r22
    1548:	37 0b       	sbc	r19, r23
    154a:	2a 31       	cpi	r18, 0x1A	; 26
    154c:	31 05       	cpc	r19, r1
    154e:	2c f0       	brlt	.+10     	; 0x155a <__pack_f+0x76>
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	40 e0       	ldi	r20, 0x00	; 0
    1556:	50 e0       	ldi	r21, 0x00	; 0
    1558:	2a c0       	rjmp	.+84     	; 0x15ae <__pack_f+0xca>
    155a:	b8 01       	movw	r22, r16
    155c:	a7 01       	movw	r20, r14
    155e:	02 2e       	mov	r0, r18
    1560:	04 c0       	rjmp	.+8      	; 0x156a <__pack_f+0x86>
    1562:	76 95       	lsr	r23
    1564:	67 95       	ror	r22
    1566:	57 95       	ror	r21
    1568:	47 95       	ror	r20
    156a:	0a 94       	dec	r0
    156c:	d2 f7       	brpl	.-12     	; 0x1562 <__pack_f+0x7e>
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	a0 e0       	ldi	r26, 0x00	; 0
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	04 c0       	rjmp	.+8      	; 0x1580 <__pack_f+0x9c>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	aa 1f       	adc	r26, r26
    157e:	bb 1f       	adc	r27, r27
    1580:	2a 95       	dec	r18
    1582:	d2 f7       	brpl	.-12     	; 0x1578 <__pack_f+0x94>
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	a1 09       	sbc	r26, r1
    1588:	b1 09       	sbc	r27, r1
    158a:	8e 21       	and	r24, r14
    158c:	9f 21       	and	r25, r15
    158e:	a0 23       	and	r26, r16
    1590:	b1 23       	and	r27, r17
    1592:	00 97       	sbiw	r24, 0x00	; 0
    1594:	a1 05       	cpc	r26, r1
    1596:	b1 05       	cpc	r27, r1
    1598:	21 f0       	breq	.+8      	; 0x15a2 <__pack_f+0xbe>
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	a0 e0       	ldi	r26, 0x00	; 0
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	9a 01       	movw	r18, r20
    15a4:	ab 01       	movw	r20, r22
    15a6:	28 2b       	or	r18, r24
    15a8:	39 2b       	or	r19, r25
    15aa:	4a 2b       	or	r20, r26
    15ac:	5b 2b       	or	r21, r27
    15ae:	da 01       	movw	r26, r20
    15b0:	c9 01       	movw	r24, r18
    15b2:	8f 77       	andi	r24, 0x7F	; 127
    15b4:	90 70       	andi	r25, 0x00	; 0
    15b6:	a0 70       	andi	r26, 0x00	; 0
    15b8:	b0 70       	andi	r27, 0x00	; 0
    15ba:	80 34       	cpi	r24, 0x40	; 64
    15bc:	91 05       	cpc	r25, r1
    15be:	a1 05       	cpc	r26, r1
    15c0:	b1 05       	cpc	r27, r1
    15c2:	39 f4       	brne	.+14     	; 0x15d2 <__pack_f+0xee>
    15c4:	27 ff       	sbrs	r18, 7
    15c6:	09 c0       	rjmp	.+18     	; 0x15da <__pack_f+0xf6>
    15c8:	20 5c       	subi	r18, 0xC0	; 192
    15ca:	3f 4f       	sbci	r19, 0xFF	; 255
    15cc:	4f 4f       	sbci	r20, 0xFF	; 255
    15ce:	5f 4f       	sbci	r21, 0xFF	; 255
    15d0:	04 c0       	rjmp	.+8      	; 0x15da <__pack_f+0xf6>
    15d2:	21 5c       	subi	r18, 0xC1	; 193
    15d4:	3f 4f       	sbci	r19, 0xFF	; 255
    15d6:	4f 4f       	sbci	r20, 0xFF	; 255
    15d8:	5f 4f       	sbci	r21, 0xFF	; 255
    15da:	e0 e0       	ldi	r30, 0x00	; 0
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	20 30       	cpi	r18, 0x00	; 0
    15e0:	a0 e0       	ldi	r26, 0x00	; 0
    15e2:	3a 07       	cpc	r19, r26
    15e4:	a0 e0       	ldi	r26, 0x00	; 0
    15e6:	4a 07       	cpc	r20, r26
    15e8:	a0 e4       	ldi	r26, 0x40	; 64
    15ea:	5a 07       	cpc	r21, r26
    15ec:	10 f0       	brcs	.+4      	; 0x15f2 <__pack_f+0x10e>
    15ee:	e1 e0       	ldi	r30, 0x01	; 1
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	79 01       	movw	r14, r18
    15f4:	8a 01       	movw	r16, r20
    15f6:	27 c0       	rjmp	.+78     	; 0x1646 <__pack_f+0x162>
    15f8:	60 38       	cpi	r22, 0x80	; 128
    15fa:	71 05       	cpc	r23, r1
    15fc:	64 f5       	brge	.+88     	; 0x1656 <__pack_f+0x172>
    15fe:	fb 01       	movw	r30, r22
    1600:	e1 58       	subi	r30, 0x81	; 129
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	d8 01       	movw	r26, r16
    1606:	c7 01       	movw	r24, r14
    1608:	8f 77       	andi	r24, 0x7F	; 127
    160a:	90 70       	andi	r25, 0x00	; 0
    160c:	a0 70       	andi	r26, 0x00	; 0
    160e:	b0 70       	andi	r27, 0x00	; 0
    1610:	80 34       	cpi	r24, 0x40	; 64
    1612:	91 05       	cpc	r25, r1
    1614:	a1 05       	cpc	r26, r1
    1616:	b1 05       	cpc	r27, r1
    1618:	39 f4       	brne	.+14     	; 0x1628 <__pack_f+0x144>
    161a:	e7 fe       	sbrs	r14, 7
    161c:	0d c0       	rjmp	.+26     	; 0x1638 <__pack_f+0x154>
    161e:	80 e4       	ldi	r24, 0x40	; 64
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	a0 e0       	ldi	r26, 0x00	; 0
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <__pack_f+0x14c>
    1628:	8f e3       	ldi	r24, 0x3F	; 63
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	a0 e0       	ldi	r26, 0x00	; 0
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e8 0e       	add	r14, r24
    1632:	f9 1e       	adc	r15, r25
    1634:	0a 1f       	adc	r16, r26
    1636:	1b 1f       	adc	r17, r27
    1638:	17 ff       	sbrs	r17, 7
    163a:	05 c0       	rjmp	.+10     	; 0x1646 <__pack_f+0x162>
    163c:	16 95       	lsr	r17
    163e:	07 95       	ror	r16
    1640:	f7 94       	ror	r15
    1642:	e7 94       	ror	r14
    1644:	31 96       	adiw	r30, 0x01	; 1
    1646:	87 e0       	ldi	r24, 0x07	; 7
    1648:	16 95       	lsr	r17
    164a:	07 95       	ror	r16
    164c:	f7 94       	ror	r15
    164e:	e7 94       	ror	r14
    1650:	8a 95       	dec	r24
    1652:	d1 f7       	brne	.-12     	; 0x1648 <__pack_f+0x164>
    1654:	05 c0       	rjmp	.+10     	; 0x1660 <__pack_f+0x17c>
    1656:	ee 24       	eor	r14, r14
    1658:	ff 24       	eor	r15, r15
    165a:	87 01       	movw	r16, r14
    165c:	ef ef       	ldi	r30, 0xFF	; 255
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	6e 2f       	mov	r22, r30
    1662:	67 95       	ror	r22
    1664:	66 27       	eor	r22, r22
    1666:	67 95       	ror	r22
    1668:	90 2f       	mov	r25, r16
    166a:	9f 77       	andi	r25, 0x7F	; 127
    166c:	d7 94       	ror	r13
    166e:	dd 24       	eor	r13, r13
    1670:	d7 94       	ror	r13
    1672:	8e 2f       	mov	r24, r30
    1674:	86 95       	lsr	r24
    1676:	49 2f       	mov	r20, r25
    1678:	46 2b       	or	r20, r22
    167a:	58 2f       	mov	r21, r24
    167c:	5d 29       	or	r21, r13
    167e:	b7 01       	movw	r22, r14
    1680:	ca 01       	movw	r24, r20
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	ff 90       	pop	r15
    1688:	ef 90       	pop	r14
    168a:	df 90       	pop	r13
    168c:	08 95       	ret

0000168e <__unpack_f>:
    168e:	fc 01       	movw	r30, r24
    1690:	db 01       	movw	r26, r22
    1692:	40 81       	ld	r20, Z
    1694:	51 81       	ldd	r21, Z+1	; 0x01
    1696:	22 81       	ldd	r18, Z+2	; 0x02
    1698:	62 2f       	mov	r22, r18
    169a:	6f 77       	andi	r22, 0x7F	; 127
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	22 1f       	adc	r18, r18
    16a0:	22 27       	eor	r18, r18
    16a2:	22 1f       	adc	r18, r18
    16a4:	93 81       	ldd	r25, Z+3	; 0x03
    16a6:	89 2f       	mov	r24, r25
    16a8:	88 0f       	add	r24, r24
    16aa:	82 2b       	or	r24, r18
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	99 1f       	adc	r25, r25
    16b2:	99 27       	eor	r25, r25
    16b4:	99 1f       	adc	r25, r25
    16b6:	11 96       	adiw	r26, 0x01	; 1
    16b8:	9c 93       	st	X, r25
    16ba:	11 97       	sbiw	r26, 0x01	; 1
    16bc:	21 15       	cp	r18, r1
    16be:	31 05       	cpc	r19, r1
    16c0:	a9 f5       	brne	.+106    	; 0x172c <__unpack_f+0x9e>
    16c2:	41 15       	cp	r20, r1
    16c4:	51 05       	cpc	r21, r1
    16c6:	61 05       	cpc	r22, r1
    16c8:	71 05       	cpc	r23, r1
    16ca:	11 f4       	brne	.+4      	; 0x16d0 <__unpack_f+0x42>
    16cc:	82 e0       	ldi	r24, 0x02	; 2
    16ce:	37 c0       	rjmp	.+110    	; 0x173e <__unpack_f+0xb0>
    16d0:	82 e8       	ldi	r24, 0x82	; 130
    16d2:	9f ef       	ldi	r25, 0xFF	; 255
    16d4:	13 96       	adiw	r26, 0x03	; 3
    16d6:	9c 93       	st	X, r25
    16d8:	8e 93       	st	-X, r24
    16da:	12 97       	sbiw	r26, 0x02	; 2
    16dc:	9a 01       	movw	r18, r20
    16de:	ab 01       	movw	r20, r22
    16e0:	67 e0       	ldi	r22, 0x07	; 7
    16e2:	22 0f       	add	r18, r18
    16e4:	33 1f       	adc	r19, r19
    16e6:	44 1f       	adc	r20, r20
    16e8:	55 1f       	adc	r21, r21
    16ea:	6a 95       	dec	r22
    16ec:	d1 f7       	brne	.-12     	; 0x16e2 <__unpack_f+0x54>
    16ee:	83 e0       	ldi	r24, 0x03	; 3
    16f0:	8c 93       	st	X, r24
    16f2:	0d c0       	rjmp	.+26     	; 0x170e <__unpack_f+0x80>
    16f4:	22 0f       	add	r18, r18
    16f6:	33 1f       	adc	r19, r19
    16f8:	44 1f       	adc	r20, r20
    16fa:	55 1f       	adc	r21, r21
    16fc:	12 96       	adiw	r26, 0x02	; 2
    16fe:	8d 91       	ld	r24, X+
    1700:	9c 91       	ld	r25, X
    1702:	13 97       	sbiw	r26, 0x03	; 3
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	13 96       	adiw	r26, 0x03	; 3
    1708:	9c 93       	st	X, r25
    170a:	8e 93       	st	-X, r24
    170c:	12 97       	sbiw	r26, 0x02	; 2
    170e:	20 30       	cpi	r18, 0x00	; 0
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	38 07       	cpc	r19, r24
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	48 07       	cpc	r20, r24
    1718:	80 e4       	ldi	r24, 0x40	; 64
    171a:	58 07       	cpc	r21, r24
    171c:	58 f3       	brcs	.-42     	; 0x16f4 <__unpack_f+0x66>
    171e:	14 96       	adiw	r26, 0x04	; 4
    1720:	2d 93       	st	X+, r18
    1722:	3d 93       	st	X+, r19
    1724:	4d 93       	st	X+, r20
    1726:	5c 93       	st	X, r21
    1728:	17 97       	sbiw	r26, 0x07	; 7
    172a:	08 95       	ret
    172c:	2f 3f       	cpi	r18, 0xFF	; 255
    172e:	31 05       	cpc	r19, r1
    1730:	79 f4       	brne	.+30     	; 0x1750 <__unpack_f+0xc2>
    1732:	41 15       	cp	r20, r1
    1734:	51 05       	cpc	r21, r1
    1736:	61 05       	cpc	r22, r1
    1738:	71 05       	cpc	r23, r1
    173a:	19 f4       	brne	.+6      	; 0x1742 <__unpack_f+0xb4>
    173c:	84 e0       	ldi	r24, 0x04	; 4
    173e:	8c 93       	st	X, r24
    1740:	08 95       	ret
    1742:	64 ff       	sbrs	r22, 4
    1744:	03 c0       	rjmp	.+6      	; 0x174c <__unpack_f+0xbe>
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	8c 93       	st	X, r24
    174a:	12 c0       	rjmp	.+36     	; 0x1770 <__unpack_f+0xe2>
    174c:	1c 92       	st	X, r1
    174e:	10 c0       	rjmp	.+32     	; 0x1770 <__unpack_f+0xe2>
    1750:	2f 57       	subi	r18, 0x7F	; 127
    1752:	30 40       	sbci	r19, 0x00	; 0
    1754:	13 96       	adiw	r26, 0x03	; 3
    1756:	3c 93       	st	X, r19
    1758:	2e 93       	st	-X, r18
    175a:	12 97       	sbiw	r26, 0x02	; 2
    175c:	83 e0       	ldi	r24, 0x03	; 3
    175e:	8c 93       	st	X, r24
    1760:	87 e0       	ldi	r24, 0x07	; 7
    1762:	44 0f       	add	r20, r20
    1764:	55 1f       	adc	r21, r21
    1766:	66 1f       	adc	r22, r22
    1768:	77 1f       	adc	r23, r23
    176a:	8a 95       	dec	r24
    176c:	d1 f7       	brne	.-12     	; 0x1762 <__unpack_f+0xd4>
    176e:	70 64       	ori	r23, 0x40	; 64
    1770:	14 96       	adiw	r26, 0x04	; 4
    1772:	4d 93       	st	X+, r20
    1774:	5d 93       	st	X+, r21
    1776:	6d 93       	st	X+, r22
    1778:	7c 93       	st	X, r23
    177a:	17 97       	sbiw	r26, 0x07	; 7
    177c:	08 95       	ret

0000177e <__fpcmp_parts_f>:
    177e:	1f 93       	push	r17
    1780:	dc 01       	movw	r26, r24
    1782:	fb 01       	movw	r30, r22
    1784:	9c 91       	ld	r25, X
    1786:	92 30       	cpi	r25, 0x02	; 2
    1788:	08 f4       	brcc	.+2      	; 0x178c <__fpcmp_parts_f+0xe>
    178a:	47 c0       	rjmp	.+142    	; 0x181a <__fpcmp_parts_f+0x9c>
    178c:	80 81       	ld	r24, Z
    178e:	82 30       	cpi	r24, 0x02	; 2
    1790:	08 f4       	brcc	.+2      	; 0x1794 <__fpcmp_parts_f+0x16>
    1792:	43 c0       	rjmp	.+134    	; 0x181a <__fpcmp_parts_f+0x9c>
    1794:	94 30       	cpi	r25, 0x04	; 4
    1796:	51 f4       	brne	.+20     	; 0x17ac <__fpcmp_parts_f+0x2e>
    1798:	11 96       	adiw	r26, 0x01	; 1
    179a:	1c 91       	ld	r17, X
    179c:	84 30       	cpi	r24, 0x04	; 4
    179e:	99 f5       	brne	.+102    	; 0x1806 <__fpcmp_parts_f+0x88>
    17a0:	81 81       	ldd	r24, Z+1	; 0x01
    17a2:	68 2f       	mov	r22, r24
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	61 1b       	sub	r22, r17
    17a8:	71 09       	sbc	r23, r1
    17aa:	3f c0       	rjmp	.+126    	; 0x182a <__fpcmp_parts_f+0xac>
    17ac:	84 30       	cpi	r24, 0x04	; 4
    17ae:	21 f0       	breq	.+8      	; 0x17b8 <__fpcmp_parts_f+0x3a>
    17b0:	92 30       	cpi	r25, 0x02	; 2
    17b2:	31 f4       	brne	.+12     	; 0x17c0 <__fpcmp_parts_f+0x42>
    17b4:	82 30       	cpi	r24, 0x02	; 2
    17b6:	b9 f1       	breq	.+110    	; 0x1826 <__fpcmp_parts_f+0xa8>
    17b8:	81 81       	ldd	r24, Z+1	; 0x01
    17ba:	88 23       	and	r24, r24
    17bc:	89 f1       	breq	.+98     	; 0x1820 <__fpcmp_parts_f+0xa2>
    17be:	2d c0       	rjmp	.+90     	; 0x181a <__fpcmp_parts_f+0x9c>
    17c0:	11 96       	adiw	r26, 0x01	; 1
    17c2:	1c 91       	ld	r17, X
    17c4:	11 97       	sbiw	r26, 0x01	; 1
    17c6:	82 30       	cpi	r24, 0x02	; 2
    17c8:	f1 f0       	breq	.+60     	; 0x1806 <__fpcmp_parts_f+0x88>
    17ca:	81 81       	ldd	r24, Z+1	; 0x01
    17cc:	18 17       	cp	r17, r24
    17ce:	d9 f4       	brne	.+54     	; 0x1806 <__fpcmp_parts_f+0x88>
    17d0:	12 96       	adiw	r26, 0x02	; 2
    17d2:	2d 91       	ld	r18, X+
    17d4:	3c 91       	ld	r19, X
    17d6:	13 97       	sbiw	r26, 0x03	; 3
    17d8:	82 81       	ldd	r24, Z+2	; 0x02
    17da:	93 81       	ldd	r25, Z+3	; 0x03
    17dc:	82 17       	cp	r24, r18
    17de:	93 07       	cpc	r25, r19
    17e0:	94 f0       	brlt	.+36     	; 0x1806 <__fpcmp_parts_f+0x88>
    17e2:	28 17       	cp	r18, r24
    17e4:	39 07       	cpc	r19, r25
    17e6:	bc f0       	brlt	.+46     	; 0x1816 <__fpcmp_parts_f+0x98>
    17e8:	14 96       	adiw	r26, 0x04	; 4
    17ea:	8d 91       	ld	r24, X+
    17ec:	9d 91       	ld	r25, X+
    17ee:	0d 90       	ld	r0, X+
    17f0:	bc 91       	ld	r27, X
    17f2:	a0 2d       	mov	r26, r0
    17f4:	24 81       	ldd	r18, Z+4	; 0x04
    17f6:	35 81       	ldd	r19, Z+5	; 0x05
    17f8:	46 81       	ldd	r20, Z+6	; 0x06
    17fa:	57 81       	ldd	r21, Z+7	; 0x07
    17fc:	28 17       	cp	r18, r24
    17fe:	39 07       	cpc	r19, r25
    1800:	4a 07       	cpc	r20, r26
    1802:	5b 07       	cpc	r21, r27
    1804:	18 f4       	brcc	.+6      	; 0x180c <__fpcmp_parts_f+0x8e>
    1806:	11 23       	and	r17, r17
    1808:	41 f0       	breq	.+16     	; 0x181a <__fpcmp_parts_f+0x9c>
    180a:	0a c0       	rjmp	.+20     	; 0x1820 <__fpcmp_parts_f+0xa2>
    180c:	82 17       	cp	r24, r18
    180e:	93 07       	cpc	r25, r19
    1810:	a4 07       	cpc	r26, r20
    1812:	b5 07       	cpc	r27, r21
    1814:	40 f4       	brcc	.+16     	; 0x1826 <__fpcmp_parts_f+0xa8>
    1816:	11 23       	and	r17, r17
    1818:	19 f0       	breq	.+6      	; 0x1820 <__fpcmp_parts_f+0xa2>
    181a:	61 e0       	ldi	r22, 0x01	; 1
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	05 c0       	rjmp	.+10     	; 0x182a <__fpcmp_parts_f+0xac>
    1820:	6f ef       	ldi	r22, 0xFF	; 255
    1822:	7f ef       	ldi	r23, 0xFF	; 255
    1824:	02 c0       	rjmp	.+4      	; 0x182a <__fpcmp_parts_f+0xac>
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	70 e0       	ldi	r23, 0x00	; 0
    182a:	cb 01       	movw	r24, r22
    182c:	1f 91       	pop	r17
    182e:	08 95       	ret

00001830 <BUZZER_init>:

#include"buzzer.h"
#include"gpio.h"

void BUZZER_init()
{
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
    1838:	83 e0       	ldi	r24, 0x03	; 3
    183a:	64 e0       	ldi	r22, 0x04	; 4
    183c:	41 e0       	ldi	r20, 0x01	; 1
    183e:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <GPIO_setupPinDirection>
}
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <BUZZER_on>:
void BUZZER_on()
{
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    1850:	83 e0       	ldi	r24, 0x03	; 3
    1852:	64 e0       	ldi	r22, 0x04	; 4
    1854:	41 e0       	ldi	r20, 0x01	; 1
    1856:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <GPIO_writePin>
}
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret

00001860 <BUZZER_off>:

void BUZZER_off()
{
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    1868:	83 e0       	ldi	r24, 0x03	; 3
    186a:	64 e0       	ldi	r22, 0x04	; 4
    186c:	40 e0       	ldi	r20, 0x00	; 0
    186e:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <GPIO_writePin>
}
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	08 95       	ret

00001878 <DcMotor_init>:

 */


void DcMotor_init(void)
{
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DcMotor_Port,DcMotor_IN1,PIN_OUTPUT);
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	63 e0       	ldi	r22, 0x03	; 3
    1884:	41 e0       	ldi	r20, 0x01	; 1
    1886:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DcMotor_Port,DcMotor_IN2,PIN_OUTPUT);
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	64 e0       	ldi	r22, 0x04	; 4
    188e:	41 e0       	ldi	r20, 0x01	; 1
    1890:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DcMotor_Port,DcMotor_Enable,PIN_OUTPUT);
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	65 e0       	ldi	r22, 0x05	; 5
    1898:	41 e0       	ldi	r20, 0x01	; 1
    189a:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <GPIO_setupPinDirection>
	GPIO_writePin(DcMotor_Port,DcMotor_IN1,LOGIC_LOW);
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	63 e0       	ldi	r22, 0x03	; 3
    18a2:	40 e0       	ldi	r20, 0x00	; 0
    18a4:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <GPIO_writePin>
	GPIO_writePin(DcMotor_Port,DcMotor_IN2,LOGIC_LOW);
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	64 e0       	ldi	r22, 0x04	; 4
    18ac:	40 e0       	ldi	r20, 0x00	; 0
    18ae:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <GPIO_writePin>

}
    18b2:	cf 91       	pop	r28
    18b4:	df 91       	pop	r29
    18b6:	08 95       	ret

000018b8 <DcMotor_Rotate>:
 Arg1:direction --->enum with three motor states in it
 Arg2:speed -----> duty cycle in xx%
 */

void DcMotor_Rotate(uint8 direction)
{
    18b8:	df 93       	push	r29
    18ba:	cf 93       	push	r28
    18bc:	0f 92       	push	r0
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	89 83       	std	Y+1, r24	; 0x01
	/*the condition checks the input of the function and sets the duty cycle and the direction	*/
	if(direction==CW)
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	81 30       	cpi	r24, 0x01	; 1
    18c8:	79 f4       	brne	.+30     	; 0x18e8 <DcMotor_Rotate+0x30>
	{
	GPIO_writePin(DcMotor_Port,DcMotor_IN2,LOGIC_HIGH);
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	64 e0       	ldi	r22, 0x04	; 4
    18ce:	41 e0       	ldi	r20, 0x01	; 1
    18d0:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <GPIO_writePin>
	GPIO_writePin(DcMotor_Port,DcMotor_IN1,LOGIC_LOW);
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	63 e0       	ldi	r22, 0x03	; 3
    18d8:	40 e0       	ldi	r20, 0x00	; 0
    18da:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <GPIO_writePin>
	GPIO_writePin(DcMotor_Port,DcMotor_Enable,LOGIC_HIGH);
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	65 e0       	ldi	r22, 0x05	; 5
    18e2:	41 e0       	ldi	r20, 0x01	; 1
    18e4:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <GPIO_writePin>
	}

	if(direction==CCW)
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	82 30       	cpi	r24, 0x02	; 2
    18ec:	79 f4       	brne	.+30     	; 0x190c <DcMotor_Rotate+0x54>
	{
	GPIO_writePin(DcMotor_Port,DcMotor_IN1,LOGIC_HIGH);
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	63 e0       	ldi	r22, 0x03	; 3
    18f2:	41 e0       	ldi	r20, 0x01	; 1
    18f4:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <GPIO_writePin>
	GPIO_writePin(DcMotor_Port,DcMotor_IN2,LOGIC_LOW);
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	64 e0       	ldi	r22, 0x04	; 4
    18fc:	40 e0       	ldi	r20, 0x00	; 0
    18fe:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <GPIO_writePin>
	GPIO_writePin(DcMotor_Port,DcMotor_Enable,LOGIC_HIGH);
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	65 e0       	ldi	r22, 0x05	; 5
    1906:	41 e0       	ldi	r20, 0x01	; 1
    1908:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <GPIO_writePin>
	}
	if(direction==STOP)
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	88 23       	and	r24, r24
    1910:	79 f4       	brne	.+30     	; 0x1930 <DcMotor_Rotate+0x78>
	{
	GPIO_writePin(DcMotor_Port,DcMotor_IN2,LOGIC_LOW);
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	64 e0       	ldi	r22, 0x04	; 4
    1916:	40 e0       	ldi	r20, 0x00	; 0
    1918:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <GPIO_writePin>
	GPIO_writePin(DcMotor_Port,DcMotor_IN1,LOGIC_LOW);
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	63 e0       	ldi	r22, 0x03	; 3
    1920:	40 e0       	ldi	r20, 0x00	; 0
    1922:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <GPIO_writePin>
	GPIO_writePin(DcMotor_Port,DcMotor_Enable,LOGIC_LOW);
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	65 e0       	ldi	r22, 0x05	; 5
    192a:	40 e0       	ldi	r20, 0x00	; 0
    192c:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <GPIO_writePin>
	}
}
    1930:	0f 90       	pop	r0
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	00 d0       	rcall	.+0      	; 0x193e <EEPROM_writeByte+0x6>
    193e:	00 d0       	rcall	.+0      	; 0x1940 <EEPROM_writeByte+0x8>
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	9a 83       	std	Y+2, r25	; 0x02
    1946:	89 83       	std	Y+1, r24	; 0x01
    1948:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    194a:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    194e:	0e 94 b2 1c 	call	0x3964	; 0x3964 <TWI_getStatus>
    1952:	88 30       	cpi	r24, 0x08	; 8
    1954:	11 f0       	breq	.+4      	; 0x195a <EEPROM_writeByte+0x22>
        return ERROR;
    1956:	1c 82       	std	Y+4, r1	; 0x04
    1958:	28 c0       	rjmp	.+80     	; 0x19aa <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	9a 81       	ldd	r25, Y+2	; 0x02
    195e:	80 70       	andi	r24, 0x00	; 0
    1960:	97 70       	andi	r25, 0x07	; 7
    1962:	88 0f       	add	r24, r24
    1964:	89 2f       	mov	r24, r25
    1966:	88 1f       	adc	r24, r24
    1968:	99 0b       	sbc	r25, r25
    196a:	91 95       	neg	r25
    196c:	80 6a       	ori	r24, 0xA0	; 160
    196e:	0e 94 75 1c 	call	0x38ea	; 0x38ea <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1972:	0e 94 b2 1c 	call	0x3964	; 0x3964 <TWI_getStatus>
    1976:	88 31       	cpi	r24, 0x18	; 24
    1978:	11 f0       	breq	.+4      	; 0x197e <EEPROM_writeByte+0x46>
        return ERROR; 
    197a:	1c 82       	std	Y+4, r1	; 0x04
    197c:	16 c0       	rjmp	.+44     	; 0x19aa <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	0e 94 75 1c 	call	0x38ea	; 0x38ea <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1984:	0e 94 b2 1c 	call	0x3964	; 0x3964 <TWI_getStatus>
    1988:	88 32       	cpi	r24, 0x28	; 40
    198a:	11 f0       	breq	.+4      	; 0x1990 <EEPROM_writeByte+0x58>
        return ERROR;
    198c:	1c 82       	std	Y+4, r1	; 0x04
    198e:	0d c0       	rjmp	.+26     	; 0x19aa <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	0e 94 75 1c 	call	0x38ea	; 0x38ea <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1996:	0e 94 b2 1c 	call	0x3964	; 0x3964 <TWI_getStatus>
    199a:	88 32       	cpi	r24, 0x28	; 40
    199c:	11 f0       	breq	.+4      	; 0x19a2 <EEPROM_writeByte+0x6a>
        return ERROR;
    199e:	1c 82       	std	Y+4, r1	; 0x04
    19a0:	04 c0       	rjmp	.+8      	; 0x19aa <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    19a2:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <TWI_stop>
	
    return SUCCESS;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	8c 83       	std	Y+4, r24	; 0x04
    19aa:	8c 81       	ldd	r24, Y+4	; 0x04
}
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	08 95       	ret

000019ba <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <EEPROM_readByte+0x6>
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <EEPROM_readByte+0x8>
    19c2:	0f 92       	push	r0
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	9a 83       	std	Y+2, r25	; 0x02
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	7c 83       	std	Y+4, r23	; 0x04
    19ce:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    19d0:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    19d4:	0e 94 b2 1c 	call	0x3964	; 0x3964 <TWI_getStatus>
    19d8:	88 30       	cpi	r24, 0x08	; 8
    19da:	11 f0       	breq	.+4      	; 0x19e0 <EEPROM_readByte+0x26>
        return ERROR;
    19dc:	1d 82       	std	Y+5, r1	; 0x05
    19de:	44 c0       	rjmp	.+136    	; 0x1a68 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	9a 81       	ldd	r25, Y+2	; 0x02
    19e4:	80 70       	andi	r24, 0x00	; 0
    19e6:	97 70       	andi	r25, 0x07	; 7
    19e8:	88 0f       	add	r24, r24
    19ea:	89 2f       	mov	r24, r25
    19ec:	88 1f       	adc	r24, r24
    19ee:	99 0b       	sbc	r25, r25
    19f0:	91 95       	neg	r25
    19f2:	80 6a       	ori	r24, 0xA0	; 160
    19f4:	0e 94 75 1c 	call	0x38ea	; 0x38ea <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    19f8:	0e 94 b2 1c 	call	0x3964	; 0x3964 <TWI_getStatus>
    19fc:	88 31       	cpi	r24, 0x18	; 24
    19fe:	11 f0       	breq	.+4      	; 0x1a04 <EEPROM_readByte+0x4a>
        return ERROR;
    1a00:	1d 82       	std	Y+5, r1	; 0x05
    1a02:	32 c0       	rjmp	.+100    	; 0x1a68 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	0e 94 75 1c 	call	0x38ea	; 0x38ea <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1a0a:	0e 94 b2 1c 	call	0x3964	; 0x3964 <TWI_getStatus>
    1a0e:	88 32       	cpi	r24, 0x28	; 40
    1a10:	11 f0       	breq	.+4      	; 0x1a16 <EEPROM_readByte+0x5c>
        return ERROR;
    1a12:	1d 82       	std	Y+5, r1	; 0x05
    1a14:	29 c0       	rjmp	.+82     	; 0x1a68 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1a16:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1a1a:	0e 94 b2 1c 	call	0x3964	; 0x3964 <TWI_getStatus>
    1a1e:	80 31       	cpi	r24, 0x10	; 16
    1a20:	11 f0       	breq	.+4      	; 0x1a26 <EEPROM_readByte+0x6c>
        return ERROR;
    1a22:	1d 82       	std	Y+5, r1	; 0x05
    1a24:	21 c0       	rjmp	.+66     	; 0x1a68 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2a:	80 70       	andi	r24, 0x00	; 0
    1a2c:	97 70       	andi	r25, 0x07	; 7
    1a2e:	88 0f       	add	r24, r24
    1a30:	89 2f       	mov	r24, r25
    1a32:	88 1f       	adc	r24, r24
    1a34:	99 0b       	sbc	r25, r25
    1a36:	91 95       	neg	r25
    1a38:	81 6a       	ori	r24, 0xA1	; 161
    1a3a:	0e 94 75 1c 	call	0x38ea	; 0x38ea <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1a3e:	0e 94 b2 1c 	call	0x3964	; 0x3964 <TWI_getStatus>
    1a42:	80 34       	cpi	r24, 0x40	; 64
    1a44:	11 f0       	breq	.+4      	; 0x1a4a <EEPROM_readByte+0x90>
        return ERROR;
    1a46:	1d 82       	std	Y+5, r1	; 0x05
    1a48:	0f c0       	rjmp	.+30     	; 0x1a68 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1a4a:	0e 94 9f 1c 	call	0x393e	; 0x393e <TWI_readByteWithNACK>
    1a4e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a50:	fc 81       	ldd	r31, Y+4	; 0x04
    1a52:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1a54:	0e 94 b2 1c 	call	0x3964	; 0x3964 <TWI_getStatus>
    1a58:	88 35       	cpi	r24, 0x58	; 88
    1a5a:	11 f0       	breq	.+4      	; 0x1a60 <EEPROM_readByte+0xa6>
        return ERROR;
    1a5c:	1d 82       	std	Y+5, r1	; 0x05
    1a5e:	04 c0       	rjmp	.+8      	; 0x1a68 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1a60:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <TWI_stop>

    return SUCCESS;
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	8d 83       	std	Y+5, r24	; 0x05
    1a68:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <main>:




int main()
{
    1a7a:	0f 93       	push	r16
    1a7c:	1f 93       	push	r17
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
    1a86:	cd 5b       	subi	r28, 0xBD	; 189
    1a88:	d0 40       	sbci	r29, 0x00	; 0
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
	uint8 i=0;
    1a94:	fe 01       	movw	r30, r28
    1a96:	e4 56       	subi	r30, 0x64	; 100
    1a98:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9a:	10 82       	st	Z, r1
	uint8 password[8];
	uint8 password_check[8];
	uint8 check_byte;
	uint16 adresses[]={0x0311,0x0312,0x0313,0x0314};
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	83 55       	subi	r24, 0x53	; 83
    1aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa2:	c7 54       	subi	r28, 0x47	; 71
    1aa4:	df 4f       	sbci	r29, 0xFF	; 255
    1aa6:	99 83       	std	Y+1, r25	; 0x01
    1aa8:	88 83       	st	Y, r24
    1aaa:	c9 5b       	subi	r28, 0xB9	; 185
    1aac:	d0 40       	sbci	r29, 0x00	; 0
    1aae:	88 e6       	ldi	r24, 0x68	; 104
    1ab0:	91 e0       	ldi	r25, 0x01	; 1
    1ab2:	c5 54       	subi	r28, 0x45	; 69
    1ab4:	df 4f       	sbci	r29, 0xFF	; 255
    1ab6:	99 83       	std	Y+1, r25	; 0x01
    1ab8:	88 83       	st	Y, r24
    1aba:	cb 5b       	subi	r28, 0xBB	; 187
    1abc:	d0 40       	sbci	r29, 0x00	; 0
    1abe:	98 e0       	ldi	r25, 0x08	; 8
    1ac0:	c3 54       	subi	r28, 0x43	; 67
    1ac2:	df 4f       	sbci	r29, 0xFF	; 255
    1ac4:	98 83       	st	Y, r25
    1ac6:	cd 5b       	subi	r28, 0xBD	; 189
    1ac8:	d0 40       	sbci	r29, 0x00	; 0
    1aca:	c5 54       	subi	r28, 0x45	; 69
    1acc:	df 4f       	sbci	r29, 0xFF	; 255
    1ace:	e8 81       	ld	r30, Y
    1ad0:	f9 81       	ldd	r31, Y+1	; 0x01
    1ad2:	cb 5b       	subi	r28, 0xBB	; 187
    1ad4:	d0 40       	sbci	r29, 0x00	; 0
    1ad6:	00 80       	ld	r0, Z
    1ad8:	c5 54       	subi	r28, 0x45	; 69
    1ada:	df 4f       	sbci	r29, 0xFF	; 255
    1adc:	88 81       	ld	r24, Y
    1ade:	99 81       	ldd	r25, Y+1	; 0x01
    1ae0:	cb 5b       	subi	r28, 0xBB	; 187
    1ae2:	d0 40       	sbci	r29, 0x00	; 0
    1ae4:	01 96       	adiw	r24, 0x01	; 1
    1ae6:	c5 54       	subi	r28, 0x45	; 69
    1ae8:	df 4f       	sbci	r29, 0xFF	; 255
    1aea:	99 83       	std	Y+1, r25	; 0x01
    1aec:	88 83       	st	Y, r24
    1aee:	cb 5b       	subi	r28, 0xBB	; 187
    1af0:	d0 40       	sbci	r29, 0x00	; 0
    1af2:	c7 54       	subi	r28, 0x47	; 71
    1af4:	df 4f       	sbci	r29, 0xFF	; 255
    1af6:	e8 81       	ld	r30, Y
    1af8:	f9 81       	ldd	r31, Y+1	; 0x01
    1afa:	c9 5b       	subi	r28, 0xB9	; 185
    1afc:	d0 40       	sbci	r29, 0x00	; 0
    1afe:	00 82       	st	Z, r0
    1b00:	c7 54       	subi	r28, 0x47	; 71
    1b02:	df 4f       	sbci	r29, 0xFF	; 255
    1b04:	88 81       	ld	r24, Y
    1b06:	99 81       	ldd	r25, Y+1	; 0x01
    1b08:	c9 5b       	subi	r28, 0xB9	; 185
    1b0a:	d0 40       	sbci	r29, 0x00	; 0
    1b0c:	01 96       	adiw	r24, 0x01	; 1
    1b0e:	c7 54       	subi	r28, 0x47	; 71
    1b10:	df 4f       	sbci	r29, 0xFF	; 255
    1b12:	99 83       	std	Y+1, r25	; 0x01
    1b14:	88 83       	st	Y, r24
    1b16:	c9 5b       	subi	r28, 0xB9	; 185
    1b18:	d0 40       	sbci	r29, 0x00	; 0
    1b1a:	c3 54       	subi	r28, 0x43	; 67
    1b1c:	df 4f       	sbci	r29, 0xFF	; 255
    1b1e:	98 81       	ld	r25, Y
    1b20:	cd 5b       	subi	r28, 0xBD	; 189
    1b22:	d0 40       	sbci	r29, 0x00	; 0
    1b24:	91 50       	subi	r25, 0x01	; 1
    1b26:	c3 54       	subi	r28, 0x43	; 67
    1b28:	df 4f       	sbci	r29, 0xFF	; 255
    1b2a:	98 83       	st	Y, r25
    1b2c:	cd 5b       	subi	r28, 0xBD	; 189
    1b2e:	d0 40       	sbci	r29, 0x00	; 0
    1b30:	c3 54       	subi	r28, 0x43	; 67
    1b32:	df 4f       	sbci	r29, 0xFF	; 255
    1b34:	e8 81       	ld	r30, Y
    1b36:	cd 5b       	subi	r28, 0xBD	; 189
    1b38:	d0 40       	sbci	r29, 0x00	; 0
    1b3a:	ee 23       	and	r30, r30
    1b3c:	31 f6       	brne	.-116    	; 0x1aca <main+0x50>


	/*I2C init*/
	TWI_init(BAUD_400Kb);
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	0e 94 33 1c 	call	0x3866	; 0x3866 <TWI_init>

	/*
	 * UART_initialization
	 * */
	UART_ConfigType UART_configurations;
	UART_configurations.baud_rate=9600;
    1b44:	fe 01       	movw	r30, r28
    1b46:	eb 54       	subi	r30, 0x4B	; 75
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	80 e8       	ldi	r24, 0x80	; 128
    1b4c:	95 e2       	ldi	r25, 0x25	; 37
    1b4e:	91 83       	std	Z+1, r25	; 0x01
    1b50:	80 83       	st	Z, r24
	UART_configurations.ch_size=bit_8;
    1b52:	fe 01       	movw	r30, r28
    1b54:	eb 54       	subi	r30, 0x4B	; 75
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	83 e0       	ldi	r24, 0x03	; 3
    1b5a:	83 83       	std	Z+3, r24	; 0x03
	UART_configurations.parity_type=none;
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	eb 54       	subi	r30, 0x4B	; 75
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	12 82       	std	Z+2, r1	; 0x02
	UART_init(&UART_configurations);
    1b64:	ce 01       	movw	r24, r28
    1b66:	8b 54       	subi	r24, 0x4B	; 75
    1b68:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6a:	0e 94 c1 1c 	call	0x3982	; 0x3982 <UART_init>
	DcMotor_init();
    1b6e:	0e 94 3c 0c 	call	0x1878	; 0x1878 <DcMotor_init>
	//TIMER0_init(CTC);
	//TIMER0_countMilliSeconds_ctc(3000,FCPU_1024);
	while(1)
	{

		check_byte=UART_receiveByte();
    1b72:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <UART_receiveByte>
    1b76:	fe 01       	movw	r30, r28
    1b78:	e5 56       	subi	r30, 0x65	; 101
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	80 83       	st	Z, r24
		if(check_byte==are_you_ready_for_password)
    1b7e:	fe 01       	movw	r30, r28
    1b80:	e5 56       	subi	r30, 0x65	; 101
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	80 81       	ld	r24, Z
    1b86:	8e 31       	cpi	r24, 0x1E	; 30
    1b88:	09 f0       	breq	.+2      	; 0x1b8c <main+0x112>
    1b8a:	f1 c0       	rjmp	.+482    	; 0x1d6e <main+0x2f4>
		{
			UART_sendByte(ready_for_password);
    1b8c:	8f e1       	ldi	r24, 0x1F	; 31
    1b8e:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <UART_sendByte>
			UART_receiveString(password);
    1b92:	ce 01       	movw	r24, r28
    1b94:	83 56       	subi	r24, 0x63	; 99
    1b96:	9f 4f       	sbci	r25, 0xFF	; 255
    1b98:	0e 94 75 1d 	call	0x3aea	; 0x3aea <UART_receiveString>

			for(i=0;i<4;i++)
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	e4 56       	subi	r30, 0x64	; 100
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	10 82       	st	Z, r1
    1ba4:	dd c0       	rjmp	.+442    	; 0x1d60 <main+0x2e6>
			{

				EEPROM_writeByte(adresses[i],password[i]);
    1ba6:	fe 01       	movw	r30, r28
    1ba8:	e4 56       	subi	r30, 0x64	; 100
    1baa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bac:	80 81       	ld	r24, Z
    1bae:	88 2f       	mov	r24, r24
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	9e 01       	movw	r18, r28
    1bb4:	23 55       	subi	r18, 0x53	; 83
    1bb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	f9 01       	movw	r30, r18
    1bbe:	e8 0f       	add	r30, r24
    1bc0:	f9 1f       	adc	r31, r25
    1bc2:	40 81       	ld	r20, Z
    1bc4:	51 81       	ldd	r21, Z+1	; 0x01
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	e4 56       	subi	r30, 0x64	; 100
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	80 81       	ld	r24, Z
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	83 56       	subi	r24, 0x63	; 99
    1bd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd8:	fc 01       	movw	r30, r24
    1bda:	e2 0f       	add	r30, r18
    1bdc:	f3 1f       	adc	r31, r19
    1bde:	20 81       	ld	r18, Z
    1be0:	ca 01       	movw	r24, r20
    1be2:	62 2f       	mov	r22, r18
    1be4:	0e 94 9c 0c 	call	0x1938	; 0x1938 <EEPROM_writeByte>
    1be8:	fe 01       	movw	r30, r28
    1bea:	e9 56       	subi	r30, 0x69	; 105
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	a0 e2       	ldi	r26, 0x20	; 32
    1bf4:	b1 e4       	ldi	r27, 0x41	; 65
    1bf6:	80 83       	st	Z, r24
    1bf8:	91 83       	std	Z+1, r25	; 0x01
    1bfa:	a2 83       	std	Z+2, r26	; 0x02
    1bfc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfe:	8e 01       	movw	r16, r28
    1c00:	0d 56       	subi	r16, 0x6D	; 109
    1c02:	1f 4f       	sbci	r17, 0xFF	; 255
    1c04:	fe 01       	movw	r30, r28
    1c06:	e9 56       	subi	r30, 0x69	; 105
    1c08:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0a:	60 81       	ld	r22, Z
    1c0c:	71 81       	ldd	r23, Z+1	; 0x01
    1c0e:	82 81       	ldd	r24, Z+2	; 0x02
    1c10:	93 81       	ldd	r25, Z+3	; 0x03
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	4a ef       	ldi	r20, 0xFA	; 250
    1c18:	54 e4       	ldi	r21, 0x44	; 68
    1c1a:	0e 94 94 08 	call	0x1128	; 0x1128 <__mulsf3>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	f8 01       	movw	r30, r16
    1c24:	80 83       	st	Z, r24
    1c26:	91 83       	std	Z+1, r25	; 0x01
    1c28:	a2 83       	std	Z+2, r26	; 0x02
    1c2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	ed 56       	subi	r30, 0x6D	; 109
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	60 81       	ld	r22, Z
    1c34:	71 81       	ldd	r23, Z+1	; 0x01
    1c36:	82 81       	ldd	r24, Z+2	; 0x02
    1c38:	93 81       	ldd	r25, Z+3	; 0x03
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	40 e8       	ldi	r20, 0x80	; 128
    1c40:	5f e3       	ldi	r21, 0x3F	; 63
    1c42:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__ltsf2>
    1c46:	88 23       	and	r24, r24
    1c48:	44 f4       	brge	.+16     	; 0x1c5a <main+0x1e0>
		__ticks = 1;
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	ef 56       	subi	r30, 0x6F	; 111
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	91 83       	std	Z+1, r25	; 0x01
    1c56:	80 83       	st	Z, r24
    1c58:	64 c0       	rjmp	.+200    	; 0x1d22 <main+0x2a8>
	else if (__tmp > 65535)
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	ed 56       	subi	r30, 0x6D	; 109
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	60 81       	ld	r22, Z
    1c62:	71 81       	ldd	r23, Z+1	; 0x01
    1c64:	82 81       	ldd	r24, Z+2	; 0x02
    1c66:	93 81       	ldd	r25, Z+3	; 0x03
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	3f ef       	ldi	r19, 0xFF	; 255
    1c6c:	4f e7       	ldi	r20, 0x7F	; 127
    1c6e:	57 e4       	ldi	r21, 0x47	; 71
    1c70:	0e 94 8e 09 	call	0x131c	; 0x131c <__gtsf2>
    1c74:	18 16       	cp	r1, r24
    1c76:	0c f0       	brlt	.+2      	; 0x1c7a <main+0x200>
    1c78:	43 c0       	rjmp	.+134    	; 0x1d00 <main+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	e9 56       	subi	r30, 0x69	; 105
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	60 81       	ld	r22, Z
    1c82:	71 81       	ldd	r23, Z+1	; 0x01
    1c84:	82 81       	ldd	r24, Z+2	; 0x02
    1c86:	93 81       	ldd	r25, Z+3	; 0x03
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	40 e2       	ldi	r20, 0x20	; 32
    1c8e:	51 e4       	ldi	r21, 0x41	; 65
    1c90:	0e 94 94 08 	call	0x1128	; 0x1128 <__mulsf3>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	8e 01       	movw	r16, r28
    1c9a:	0f 56       	subi	r16, 0x6F	; 111
    1c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9e:	bc 01       	movw	r22, r24
    1ca0:	cd 01       	movw	r24, r26
    1ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	f8 01       	movw	r30, r16
    1cac:	91 83       	std	Z+1, r25	; 0x01
    1cae:	80 83       	st	Z, r24
    1cb0:	1f c0       	rjmp	.+62     	; 0x1cf0 <main+0x276>
    1cb2:	fe 01       	movw	r30, r28
    1cb4:	e1 57       	subi	r30, 0x71	; 113
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	88 ec       	ldi	r24, 0xC8	; 200
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	91 83       	std	Z+1, r25	; 0x01
    1cbe:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	e1 57       	subi	r30, 0x71	; 113
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	80 81       	ld	r24, Z
    1cc8:	91 81       	ldd	r25, Z+1	; 0x01
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <main+0x250>
    1cce:	fe 01       	movw	r30, r28
    1cd0:	e1 57       	subi	r30, 0x71	; 113
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	91 83       	std	Z+1, r25	; 0x01
    1cd6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd8:	de 01       	movw	r26, r28
    1cda:	af 56       	subi	r26, 0x6F	; 111
    1cdc:	bf 4f       	sbci	r27, 0xFF	; 255
    1cde:	fe 01       	movw	r30, r28
    1ce0:	ef 56       	subi	r30, 0x6F	; 111
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	80 81       	ld	r24, Z
    1ce6:	91 81       	ldd	r25, Z+1	; 0x01
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	11 96       	adiw	r26, 0x01	; 1
    1cec:	9c 93       	st	X, r25
    1cee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	ef 56       	subi	r30, 0x6F	; 111
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	80 81       	ld	r24, Z
    1cf8:	91 81       	ldd	r25, Z+1	; 0x01
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	d1 f6       	brne	.-76     	; 0x1cb2 <main+0x238>
    1cfe:	27 c0       	rjmp	.+78     	; 0x1d4e <main+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d00:	8e 01       	movw	r16, r28
    1d02:	0f 56       	subi	r16, 0x6F	; 111
    1d04:	1f 4f       	sbci	r17, 0xFF	; 255
    1d06:	fe 01       	movw	r30, r28
    1d08:	ed 56       	subi	r30, 0x6D	; 109
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	60 81       	ld	r22, Z
    1d0e:	71 81       	ldd	r23, Z+1	; 0x01
    1d10:	82 81       	ldd	r24, Z+2	; 0x02
    1d12:	93 81       	ldd	r25, Z+3	; 0x03
    1d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	f8 01       	movw	r30, r16
    1d1e:	91 83       	std	Z+1, r25	; 0x01
    1d20:	80 83       	st	Z, r24
    1d22:	de 01       	movw	r26, r28
    1d24:	a3 57       	subi	r26, 0x73	; 115
    1d26:	bf 4f       	sbci	r27, 0xFF	; 255
    1d28:	fe 01       	movw	r30, r28
    1d2a:	ef 56       	subi	r30, 0x6F	; 111
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	80 81       	ld	r24, Z
    1d30:	91 81       	ldd	r25, Z+1	; 0x01
    1d32:	8d 93       	st	X+, r24
    1d34:	9c 93       	st	X, r25
    1d36:	fe 01       	movw	r30, r28
    1d38:	e3 57       	subi	r30, 0x73	; 115
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	80 81       	ld	r24, Z
    1d3e:	91 81       	ldd	r25, Z+1	; 0x01
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <main+0x2c6>
    1d44:	fe 01       	movw	r30, r28
    1d46:	e3 57       	subi	r30, 0x73	; 115
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	91 83       	std	Z+1, r25	; 0x01
    1d4c:	80 83       	st	Z, r24
		if(check_byte==are_you_ready_for_password)
		{
			UART_sendByte(ready_for_password);
			UART_receiveString(password);

			for(i=0;i<4;i++)
    1d4e:	de 01       	movw	r26, r28
    1d50:	a4 56       	subi	r26, 0x64	; 100
    1d52:	bf 4f       	sbci	r27, 0xFF	; 255
    1d54:	fe 01       	movw	r30, r28
    1d56:	e4 56       	subi	r30, 0x64	; 100
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	80 81       	ld	r24, Z
    1d5c:	8f 5f       	subi	r24, 0xFF	; 255
    1d5e:	8c 93       	st	X, r24
    1d60:	fe 01       	movw	r30, r28
    1d62:	e4 56       	subi	r30, 0x64	; 100
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	80 81       	ld	r24, Z
    1d68:	84 30       	cpi	r24, 0x04	; 4
    1d6a:	08 f4       	brcc	.+2      	; 0x1d6e <main+0x2f4>
    1d6c:	1c cf       	rjmp	.-456    	; 0x1ba6 <main+0x12c>
				_delay_ms(10);

			}
		}
		/*---------------------------------------------------------------------------------------*/
		if(check_byte==are_you_ready_to_confirm_to_open_doors)
    1d6e:	fe 01       	movw	r30, r28
    1d70:	e5 56       	subi	r30, 0x65	; 101
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	80 81       	ld	r24, Z
    1d76:	80 32       	cpi	r24, 0x20	; 32
    1d78:	09 f0       	breq	.+2      	; 0x1d7c <main+0x302>
    1d7a:	2c c1       	rjmp	.+600    	; 0x1fd4 <main+0x55a>
		{
			for(i=0;i<4;i++)
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	e4 56       	subi	r30, 0x64	; 100
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	10 82       	st	Z, r1
    1d84:	db c0       	rjmp	.+438    	; 0x1f3c <main+0x4c2>
			{
				EEPROM_readByte(adresses[i],&password_check[i]);
    1d86:	fe 01       	movw	r30, r28
    1d88:	e4 56       	subi	r30, 0x64	; 100
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	80 81       	ld	r24, Z
    1d8e:	88 2f       	mov	r24, r24
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	9e 01       	movw	r18, r28
    1d94:	23 55       	subi	r18, 0x53	; 83
    1d96:	3f 4f       	sbci	r19, 0xFF	; 255
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	f9 01       	movw	r30, r18
    1d9e:	e8 0f       	add	r30, r24
    1da0:	f9 1f       	adc	r31, r25
    1da2:	40 81       	ld	r20, Z
    1da4:	51 81       	ldd	r21, Z+1	; 0x01
    1da6:	fe 01       	movw	r30, r28
    1da8:	e4 56       	subi	r30, 0x64	; 100
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	80 81       	ld	r24, Z
    1dae:	88 2f       	mov	r24, r24
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	9e 01       	movw	r18, r28
    1db4:	2b 55       	subi	r18, 0x5B	; 91
    1db6:	3f 4f       	sbci	r19, 0xFF	; 255
    1db8:	28 0f       	add	r18, r24
    1dba:	39 1f       	adc	r19, r25
    1dbc:	ca 01       	movw	r24, r20
    1dbe:	b9 01       	movw	r22, r18
    1dc0:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <EEPROM_readByte>
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	e7 57       	subi	r30, 0x77	; 119
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	a0 e2       	ldi	r26, 0x20	; 32
    1dd0:	b1 e4       	ldi	r27, 0x41	; 65
    1dd2:	80 83       	st	Z, r24
    1dd4:	91 83       	std	Z+1, r25	; 0x01
    1dd6:	a2 83       	std	Z+2, r26	; 0x02
    1dd8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dda:	8e 01       	movw	r16, r28
    1ddc:	0b 57       	subi	r16, 0x7B	; 123
    1dde:	1f 4f       	sbci	r17, 0xFF	; 255
    1de0:	fe 01       	movw	r30, r28
    1de2:	e7 57       	subi	r30, 0x77	; 119
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	60 81       	ld	r22, Z
    1de8:	71 81       	ldd	r23, Z+1	; 0x01
    1dea:	82 81       	ldd	r24, Z+2	; 0x02
    1dec:	93 81       	ldd	r25, Z+3	; 0x03
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	4a ef       	ldi	r20, 0xFA	; 250
    1df4:	54 e4       	ldi	r21, 0x44	; 68
    1df6:	0e 94 94 08 	call	0x1128	; 0x1128 <__mulsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	f8 01       	movw	r30, r16
    1e00:	80 83       	st	Z, r24
    1e02:	91 83       	std	Z+1, r25	; 0x01
    1e04:	a2 83       	std	Z+2, r26	; 0x02
    1e06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e08:	fe 01       	movw	r30, r28
    1e0a:	eb 57       	subi	r30, 0x7B	; 123
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	60 81       	ld	r22, Z
    1e10:	71 81       	ldd	r23, Z+1	; 0x01
    1e12:	82 81       	ldd	r24, Z+2	; 0x02
    1e14:	93 81       	ldd	r25, Z+3	; 0x03
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	40 e8       	ldi	r20, 0x80	; 128
    1e1c:	5f e3       	ldi	r21, 0x3F	; 63
    1e1e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__ltsf2>
    1e22:	88 23       	and	r24, r24
    1e24:	44 f4       	brge	.+16     	; 0x1e36 <main+0x3bc>
		__ticks = 1;
    1e26:	fe 01       	movw	r30, r28
    1e28:	ed 57       	subi	r30, 0x7D	; 125
    1e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	91 83       	std	Z+1, r25	; 0x01
    1e32:	80 83       	st	Z, r24
    1e34:	64 c0       	rjmp	.+200    	; 0x1efe <main+0x484>
	else if (__tmp > 65535)
    1e36:	fe 01       	movw	r30, r28
    1e38:	eb 57       	subi	r30, 0x7B	; 123
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	60 81       	ld	r22, Z
    1e3e:	71 81       	ldd	r23, Z+1	; 0x01
    1e40:	82 81       	ldd	r24, Z+2	; 0x02
    1e42:	93 81       	ldd	r25, Z+3	; 0x03
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	3f ef       	ldi	r19, 0xFF	; 255
    1e48:	4f e7       	ldi	r20, 0x7F	; 127
    1e4a:	57 e4       	ldi	r21, 0x47	; 71
    1e4c:	0e 94 8e 09 	call	0x131c	; 0x131c <__gtsf2>
    1e50:	18 16       	cp	r1, r24
    1e52:	0c f0       	brlt	.+2      	; 0x1e56 <main+0x3dc>
    1e54:	43 c0       	rjmp	.+134    	; 0x1edc <main+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e56:	fe 01       	movw	r30, r28
    1e58:	e7 57       	subi	r30, 0x77	; 119
    1e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5c:	60 81       	ld	r22, Z
    1e5e:	71 81       	ldd	r23, Z+1	; 0x01
    1e60:	82 81       	ldd	r24, Z+2	; 0x02
    1e62:	93 81       	ldd	r25, Z+3	; 0x03
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e2       	ldi	r20, 0x20	; 32
    1e6a:	51 e4       	ldi	r21, 0x41	; 65
    1e6c:	0e 94 94 08 	call	0x1128	; 0x1128 <__mulsf3>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	8e 01       	movw	r16, r28
    1e76:	0d 57       	subi	r16, 0x7D	; 125
    1e78:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7a:	bc 01       	movw	r22, r24
    1e7c:	cd 01       	movw	r24, r26
    1e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	f8 01       	movw	r30, r16
    1e88:	91 83       	std	Z+1, r25	; 0x01
    1e8a:	80 83       	st	Z, r24
    1e8c:	1f c0       	rjmp	.+62     	; 0x1ecc <main+0x452>
    1e8e:	fe 01       	movw	r30, r28
    1e90:	ef 57       	subi	r30, 0x7F	; 127
    1e92:	ff 4f       	sbci	r31, 0xFF	; 255
    1e94:	88 ec       	ldi	r24, 0xC8	; 200
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	91 83       	std	Z+1, r25	; 0x01
    1e9a:	80 83       	st	Z, r24
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	ef 57       	subi	r30, 0x7F	; 127
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	80 81       	ld	r24, Z
    1ea4:	91 81       	ldd	r25, Z+1	; 0x01
    1ea6:	01 97       	sbiw	r24, 0x01	; 1
    1ea8:	f1 f7       	brne	.-4      	; 0x1ea6 <main+0x42c>
    1eaa:	fe 01       	movw	r30, r28
    1eac:	ef 57       	subi	r30, 0x7F	; 127
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	91 83       	std	Z+1, r25	; 0x01
    1eb2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb4:	de 01       	movw	r26, r28
    1eb6:	ad 57       	subi	r26, 0x7D	; 125
    1eb8:	bf 4f       	sbci	r27, 0xFF	; 255
    1eba:	fe 01       	movw	r30, r28
    1ebc:	ed 57       	subi	r30, 0x7D	; 125
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	80 81       	ld	r24, Z
    1ec2:	91 81       	ldd	r25, Z+1	; 0x01
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	11 96       	adiw	r26, 0x01	; 1
    1ec8:	9c 93       	st	X, r25
    1eca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ecc:	fe 01       	movw	r30, r28
    1ece:	ed 57       	subi	r30, 0x7D	; 125
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	80 81       	ld	r24, Z
    1ed4:	91 81       	ldd	r25, Z+1	; 0x01
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	d1 f6       	brne	.-76     	; 0x1e8e <main+0x414>
    1eda:	27 c0       	rjmp	.+78     	; 0x1f2a <main+0x4b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1edc:	8e 01       	movw	r16, r28
    1ede:	0d 57       	subi	r16, 0x7D	; 125
    1ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee2:	fe 01       	movw	r30, r28
    1ee4:	eb 57       	subi	r30, 0x7B	; 123
    1ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee8:	60 81       	ld	r22, Z
    1eea:	71 81       	ldd	r23, Z+1	; 0x01
    1eec:	82 81       	ldd	r24, Z+2	; 0x02
    1eee:	93 81       	ldd	r25, Z+3	; 0x03
    1ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	f8 01       	movw	r30, r16
    1efa:	91 83       	std	Z+1, r25	; 0x01
    1efc:	80 83       	st	Z, r24
    1efe:	de 01       	movw	r26, r28
    1f00:	a1 58       	subi	r26, 0x81	; 129
    1f02:	bf 4f       	sbci	r27, 0xFF	; 255
    1f04:	fe 01       	movw	r30, r28
    1f06:	ed 57       	subi	r30, 0x7D	; 125
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	80 81       	ld	r24, Z
    1f0c:	91 81       	ldd	r25, Z+1	; 0x01
    1f0e:	8d 93       	st	X+, r24
    1f10:	9c 93       	st	X, r25
    1f12:	fe 01       	movw	r30, r28
    1f14:	e1 58       	subi	r30, 0x81	; 129
    1f16:	ff 4f       	sbci	r31, 0xFF	; 255
    1f18:	80 81       	ld	r24, Z
    1f1a:	91 81       	ldd	r25, Z+1	; 0x01
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	f1 f7       	brne	.-4      	; 0x1f1c <main+0x4a2>
    1f20:	fe 01       	movw	r30, r28
    1f22:	e1 58       	subi	r30, 0x81	; 129
    1f24:	ff 4f       	sbci	r31, 0xFF	; 255
    1f26:	91 83       	std	Z+1, r25	; 0x01
    1f28:	80 83       	st	Z, r24
			}
		}
		/*---------------------------------------------------------------------------------------*/
		if(check_byte==are_you_ready_to_confirm_to_open_doors)
		{
			for(i=0;i<4;i++)
    1f2a:	de 01       	movw	r26, r28
    1f2c:	a4 56       	subi	r26, 0x64	; 100
    1f2e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f30:	fe 01       	movw	r30, r28
    1f32:	e4 56       	subi	r30, 0x64	; 100
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	80 81       	ld	r24, Z
    1f38:	8f 5f       	subi	r24, 0xFF	; 255
    1f3a:	8c 93       	st	X, r24
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	e4 56       	subi	r30, 0x64	; 100
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	80 81       	ld	r24, Z
    1f44:	84 30       	cpi	r24, 0x04	; 4
    1f46:	08 f4       	brcc	.+2      	; 0x1f4a <main+0x4d0>
    1f48:	1e cf       	rjmp	.-452    	; 0x1d86 <main+0x30c>
			{
				EEPROM_readByte(adresses[i],&password_check[i]);
				_delay_ms(10);
			}
			UART_sendByte(ready_to_confirm_to_open_doors);
    1f4a:	81 e2       	ldi	r24, 0x21	; 33
    1f4c:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <UART_sendByte>
			UART_receiveString(password);
    1f50:	ce 01       	movw	r24, r28
    1f52:	83 56       	subi	r24, 0x63	; 99
    1f54:	9f 4f       	sbci	r25, 0xFF	; 255
    1f56:	0e 94 75 1d 	call	0x3aea	; 0x3aea <UART_receiveString>

			for(i=0;i<4;i++)
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	e4 56       	subi	r30, 0x64	; 100
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	10 82       	st	Z, r1
    1f62:	32 c0       	rjmp	.+100    	; 0x1fc8 <main+0x54e>
			{
				if(password[i]!=password_check[i])
    1f64:	fe 01       	movw	r30, r28
    1f66:	e4 56       	subi	r30, 0x64	; 100
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	80 81       	ld	r24, Z
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	ce 01       	movw	r24, r28
    1f72:	83 56       	subi	r24, 0x63	; 99
    1f74:	9f 4f       	sbci	r25, 0xFF	; 255
    1f76:	fc 01       	movw	r30, r24
    1f78:	e2 0f       	add	r30, r18
    1f7a:	f3 1f       	adc	r31, r19
    1f7c:	40 81       	ld	r20, Z
    1f7e:	fe 01       	movw	r30, r28
    1f80:	e4 56       	subi	r30, 0x64	; 100
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	80 81       	ld	r24, Z
    1f86:	28 2f       	mov	r18, r24
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	ce 01       	movw	r24, r28
    1f8c:	8b 55       	subi	r24, 0x5B	; 91
    1f8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f90:	fc 01       	movw	r30, r24
    1f92:	e2 0f       	add	r30, r18
    1f94:	f3 1f       	adc	r31, r19
    1f96:	80 81       	ld	r24, Z
    1f98:	48 17       	cp	r20, r24
    1f9a:	21 f0       	breq	.+8      	; 0x1fa4 <main+0x52a>
				{
					UART_sendByte(unconfirmed);
    1f9c:	83 e2       	ldi	r24, 0x23	; 35
    1f9e:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <UART_sendByte>
    1fa2:	18 c0       	rjmp	.+48     	; 0x1fd4 <main+0x55a>
					break;
				}
				else
				{
					if(i==3)
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	e4 56       	subi	r30, 0x64	; 100
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	80 81       	ld	r24, Z
    1fac:	83 30       	cpi	r24, 0x03	; 3
    1fae:	19 f4       	brne	.+6      	; 0x1fb6 <main+0x53c>
					{
						UART_sendByte(confirmed);
    1fb0:	82 e2       	ldi	r24, 0x22	; 34
    1fb2:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <UART_sendByte>
				_delay_ms(10);
			}
			UART_sendByte(ready_to_confirm_to_open_doors);
			UART_receiveString(password);

			for(i=0;i<4;i++)
    1fb6:	de 01       	movw	r26, r28
    1fb8:	a4 56       	subi	r26, 0x64	; 100
    1fba:	bf 4f       	sbci	r27, 0xFF	; 255
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	e4 56       	subi	r30, 0x64	; 100
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	80 81       	ld	r24, Z
    1fc4:	8f 5f       	subi	r24, 0xFF	; 255
    1fc6:	8c 93       	st	X, r24
    1fc8:	fe 01       	movw	r30, r28
    1fca:	e4 56       	subi	r30, 0x64	; 100
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	80 81       	ld	r24, Z
    1fd0:	84 30       	cpi	r24, 0x04	; 4
    1fd2:	40 f2       	brcs	.-112    	; 0x1f64 <main+0x4ea>
				}
			}
		}

		/*---------------------------------------------------------------------------------------*/
		if(check_byte==are_you_ready_to_open)
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	e5 56       	subi	r30, 0x65	; 101
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	80 81       	ld	r24, Z
    1fdc:	84 32       	cpi	r24, 0x24	; 36
    1fde:	19 f4       	brne	.+6      	; 0x1fe6 <main+0x56c>
		{
			UART_sendByte(ready_to_open_doors);
    1fe0:	85 e2       	ldi	r24, 0x25	; 37
    1fe2:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <UART_sendByte>
		}
		if(check_byte==open_the_door)
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	e5 56       	subi	r30, 0x65	; 101
    1fea:	ff 4f       	sbci	r31, 0xFF	; 255
    1fec:	80 81       	ld	r24, Z
    1fee:	86 32       	cpi	r24, 0x26	; 38
    1ff0:	09 f0       	breq	.+2      	; 0x1ff4 <main+0x57a>
    1ff2:	44 c4       	rjmp	.+2184   	; 0x287c <main+0xe02>
		{
			DcMotor_Rotate(CW);
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <DcMotor_Rotate>
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	e5 58       	subi	r30, 0x85	; 133
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	90 e8       	ldi	r25, 0x80	; 128
    2004:	ab eb       	ldi	r26, 0xBB	; 187
    2006:	b5 e4       	ldi	r27, 0x45	; 69
    2008:	80 83       	st	Z, r24
    200a:	91 83       	std	Z+1, r25	; 0x01
    200c:	a2 83       	std	Z+2, r26	; 0x02
    200e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2010:	8e 01       	movw	r16, r28
    2012:	09 58       	subi	r16, 0x89	; 137
    2014:	1f 4f       	sbci	r17, 0xFF	; 255
    2016:	fe 01       	movw	r30, r28
    2018:	e5 58       	subi	r30, 0x85	; 133
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	60 81       	ld	r22, Z
    201e:	71 81       	ldd	r23, Z+1	; 0x01
    2020:	82 81       	ldd	r24, Z+2	; 0x02
    2022:	93 81       	ldd	r25, Z+3	; 0x03
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	4a ef       	ldi	r20, 0xFA	; 250
    202a:	54 e4       	ldi	r21, 0x44	; 68
    202c:	0e 94 94 08 	call	0x1128	; 0x1128 <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	f8 01       	movw	r30, r16
    2036:	80 83       	st	Z, r24
    2038:	91 83       	std	Z+1, r25	; 0x01
    203a:	a2 83       	std	Z+2, r26	; 0x02
    203c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    203e:	fe 01       	movw	r30, r28
    2040:	e9 58       	subi	r30, 0x89	; 137
    2042:	ff 4f       	sbci	r31, 0xFF	; 255
    2044:	60 81       	ld	r22, Z
    2046:	71 81       	ldd	r23, Z+1	; 0x01
    2048:	82 81       	ldd	r24, Z+2	; 0x02
    204a:	93 81       	ldd	r25, Z+3	; 0x03
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	40 e8       	ldi	r20, 0x80	; 128
    2052:	5f e3       	ldi	r21, 0x3F	; 63
    2054:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__ltsf2>
    2058:	88 23       	and	r24, r24
    205a:	44 f4       	brge	.+16     	; 0x206c <main+0x5f2>
		__ticks = 1;
    205c:	fe 01       	movw	r30, r28
    205e:	eb 58       	subi	r30, 0x8B	; 139
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	91 83       	std	Z+1, r25	; 0x01
    2068:	80 83       	st	Z, r24
    206a:	64 c0       	rjmp	.+200    	; 0x2134 <main+0x6ba>
	else if (__tmp > 65535)
    206c:	fe 01       	movw	r30, r28
    206e:	e9 58       	subi	r30, 0x89	; 137
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	60 81       	ld	r22, Z
    2074:	71 81       	ldd	r23, Z+1	; 0x01
    2076:	82 81       	ldd	r24, Z+2	; 0x02
    2078:	93 81       	ldd	r25, Z+3	; 0x03
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	3f ef       	ldi	r19, 0xFF	; 255
    207e:	4f e7       	ldi	r20, 0x7F	; 127
    2080:	57 e4       	ldi	r21, 0x47	; 71
    2082:	0e 94 8e 09 	call	0x131c	; 0x131c <__gtsf2>
    2086:	18 16       	cp	r1, r24
    2088:	0c f0       	brlt	.+2      	; 0x208c <main+0x612>
    208a:	43 c0       	rjmp	.+134    	; 0x2112 <main+0x698>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208c:	fe 01       	movw	r30, r28
    208e:	e5 58       	subi	r30, 0x85	; 133
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	60 81       	ld	r22, Z
    2094:	71 81       	ldd	r23, Z+1	; 0x01
    2096:	82 81       	ldd	r24, Z+2	; 0x02
    2098:	93 81       	ldd	r25, Z+3	; 0x03
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e2       	ldi	r20, 0x20	; 32
    20a0:	51 e4       	ldi	r21, 0x41	; 65
    20a2:	0e 94 94 08 	call	0x1128	; 0x1128 <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	8e 01       	movw	r16, r28
    20ac:	0b 58       	subi	r16, 0x8B	; 139
    20ae:	1f 4f       	sbci	r17, 0xFF	; 255
    20b0:	bc 01       	movw	r22, r24
    20b2:	cd 01       	movw	r24, r26
    20b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	f8 01       	movw	r30, r16
    20be:	91 83       	std	Z+1, r25	; 0x01
    20c0:	80 83       	st	Z, r24
    20c2:	1f c0       	rjmp	.+62     	; 0x2102 <main+0x688>
    20c4:	fe 01       	movw	r30, r28
    20c6:	ed 58       	subi	r30, 0x8D	; 141
    20c8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ca:	88 ec       	ldi	r24, 0xC8	; 200
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	91 83       	std	Z+1, r25	; 0x01
    20d0:	80 83       	st	Z, r24
    20d2:	fe 01       	movw	r30, r28
    20d4:	ed 58       	subi	r30, 0x8D	; 141
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	80 81       	ld	r24, Z
    20da:	91 81       	ldd	r25, Z+1	; 0x01
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	f1 f7       	brne	.-4      	; 0x20dc <main+0x662>
    20e0:	fe 01       	movw	r30, r28
    20e2:	ed 58       	subi	r30, 0x8D	; 141
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	91 83       	std	Z+1, r25	; 0x01
    20e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ea:	de 01       	movw	r26, r28
    20ec:	ab 58       	subi	r26, 0x8B	; 139
    20ee:	bf 4f       	sbci	r27, 0xFF	; 255
    20f0:	fe 01       	movw	r30, r28
    20f2:	eb 58       	subi	r30, 0x8B	; 139
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	80 81       	ld	r24, Z
    20f8:	91 81       	ldd	r25, Z+1	; 0x01
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	11 96       	adiw	r26, 0x01	; 1
    20fe:	9c 93       	st	X, r25
    2100:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2102:	fe 01       	movw	r30, r28
    2104:	eb 58       	subi	r30, 0x8B	; 139
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	80 81       	ld	r24, Z
    210a:	91 81       	ldd	r25, Z+1	; 0x01
    210c:	00 97       	sbiw	r24, 0x00	; 0
    210e:	d1 f6       	brne	.-76     	; 0x20c4 <main+0x64a>
    2110:	27 c0       	rjmp	.+78     	; 0x2160 <main+0x6e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2112:	8e 01       	movw	r16, r28
    2114:	0b 58       	subi	r16, 0x8B	; 139
    2116:	1f 4f       	sbci	r17, 0xFF	; 255
    2118:	fe 01       	movw	r30, r28
    211a:	e9 58       	subi	r30, 0x89	; 137
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	60 81       	ld	r22, Z
    2120:	71 81       	ldd	r23, Z+1	; 0x01
    2122:	82 81       	ldd	r24, Z+2	; 0x02
    2124:	93 81       	ldd	r25, Z+3	; 0x03
    2126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	f8 01       	movw	r30, r16
    2130:	91 83       	std	Z+1, r25	; 0x01
    2132:	80 83       	st	Z, r24
    2134:	de 01       	movw	r26, r28
    2136:	af 58       	subi	r26, 0x8F	; 143
    2138:	bf 4f       	sbci	r27, 0xFF	; 255
    213a:	fe 01       	movw	r30, r28
    213c:	eb 58       	subi	r30, 0x8B	; 139
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	80 81       	ld	r24, Z
    2142:	91 81       	ldd	r25, Z+1	; 0x01
    2144:	8d 93       	st	X+, r24
    2146:	9c 93       	st	X, r25
    2148:	fe 01       	movw	r30, r28
    214a:	ef 58       	subi	r30, 0x8F	; 143
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	80 81       	ld	r24, Z
    2150:	91 81       	ldd	r25, Z+1	; 0x01
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	f1 f7       	brne	.-4      	; 0x2152 <main+0x6d8>
    2156:	fe 01       	movw	r30, r28
    2158:	ef 58       	subi	r30, 0x8F	; 143
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	91 83       	std	Z+1, r25	; 0x01
    215e:	80 83       	st	Z, r24
    2160:	fe 01       	movw	r30, r28
    2162:	e3 59       	subi	r30, 0x93	; 147
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	90 e8       	ldi	r25, 0x80	; 128
    216a:	ab eb       	ldi	r26, 0xBB	; 187
    216c:	b5 e4       	ldi	r27, 0x45	; 69
    216e:	80 83       	st	Z, r24
    2170:	91 83       	std	Z+1, r25	; 0x01
    2172:	a2 83       	std	Z+2, r26	; 0x02
    2174:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2176:	8e 01       	movw	r16, r28
    2178:	07 59       	subi	r16, 0x97	; 151
    217a:	1f 4f       	sbci	r17, 0xFF	; 255
    217c:	fe 01       	movw	r30, r28
    217e:	e3 59       	subi	r30, 0x93	; 147
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	60 81       	ld	r22, Z
    2184:	71 81       	ldd	r23, Z+1	; 0x01
    2186:	82 81       	ldd	r24, Z+2	; 0x02
    2188:	93 81       	ldd	r25, Z+3	; 0x03
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	4a ef       	ldi	r20, 0xFA	; 250
    2190:	54 e4       	ldi	r21, 0x44	; 68
    2192:	0e 94 94 08 	call	0x1128	; 0x1128 <__mulsf3>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	f8 01       	movw	r30, r16
    219c:	80 83       	st	Z, r24
    219e:	91 83       	std	Z+1, r25	; 0x01
    21a0:	a2 83       	std	Z+2, r26	; 0x02
    21a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21a4:	fe 01       	movw	r30, r28
    21a6:	e7 59       	subi	r30, 0x97	; 151
    21a8:	ff 4f       	sbci	r31, 0xFF	; 255
    21aa:	60 81       	ld	r22, Z
    21ac:	71 81       	ldd	r23, Z+1	; 0x01
    21ae:	82 81       	ldd	r24, Z+2	; 0x02
    21b0:	93 81       	ldd	r25, Z+3	; 0x03
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	40 e8       	ldi	r20, 0x80	; 128
    21b8:	5f e3       	ldi	r21, 0x3F	; 63
    21ba:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__ltsf2>
    21be:	88 23       	and	r24, r24
    21c0:	44 f4       	brge	.+16     	; 0x21d2 <main+0x758>
		__ticks = 1;
    21c2:	fe 01       	movw	r30, r28
    21c4:	e9 59       	subi	r30, 0x99	; 153
    21c6:	ff 4f       	sbci	r31, 0xFF	; 255
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	91 83       	std	Z+1, r25	; 0x01
    21ce:	80 83       	st	Z, r24
    21d0:	64 c0       	rjmp	.+200    	; 0x229a <main+0x820>
	else if (__tmp > 65535)
    21d2:	fe 01       	movw	r30, r28
    21d4:	e7 59       	subi	r30, 0x97	; 151
    21d6:	ff 4f       	sbci	r31, 0xFF	; 255
    21d8:	60 81       	ld	r22, Z
    21da:	71 81       	ldd	r23, Z+1	; 0x01
    21dc:	82 81       	ldd	r24, Z+2	; 0x02
    21de:	93 81       	ldd	r25, Z+3	; 0x03
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	3f ef       	ldi	r19, 0xFF	; 255
    21e4:	4f e7       	ldi	r20, 0x7F	; 127
    21e6:	57 e4       	ldi	r21, 0x47	; 71
    21e8:	0e 94 8e 09 	call	0x131c	; 0x131c <__gtsf2>
    21ec:	18 16       	cp	r1, r24
    21ee:	0c f0       	brlt	.+2      	; 0x21f2 <main+0x778>
    21f0:	43 c0       	rjmp	.+134    	; 0x2278 <main+0x7fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f2:	fe 01       	movw	r30, r28
    21f4:	e3 59       	subi	r30, 0x93	; 147
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	60 81       	ld	r22, Z
    21fa:	71 81       	ldd	r23, Z+1	; 0x01
    21fc:	82 81       	ldd	r24, Z+2	; 0x02
    21fe:	93 81       	ldd	r25, Z+3	; 0x03
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e2       	ldi	r20, 0x20	; 32
    2206:	51 e4       	ldi	r21, 0x41	; 65
    2208:	0e 94 94 08 	call	0x1128	; 0x1128 <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	8e 01       	movw	r16, r28
    2212:	09 59       	subi	r16, 0x99	; 153
    2214:	1f 4f       	sbci	r17, 0xFF	; 255
    2216:	bc 01       	movw	r22, r24
    2218:	cd 01       	movw	r24, r26
    221a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	f8 01       	movw	r30, r16
    2224:	91 83       	std	Z+1, r25	; 0x01
    2226:	80 83       	st	Z, r24
    2228:	1f c0       	rjmp	.+62     	; 0x2268 <main+0x7ee>
    222a:	fe 01       	movw	r30, r28
    222c:	eb 59       	subi	r30, 0x9B	; 155
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	88 ec       	ldi	r24, 0xC8	; 200
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	91 83       	std	Z+1, r25	; 0x01
    2236:	80 83       	st	Z, r24
    2238:	fe 01       	movw	r30, r28
    223a:	eb 59       	subi	r30, 0x9B	; 155
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	80 81       	ld	r24, Z
    2240:	91 81       	ldd	r25, Z+1	; 0x01
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <main+0x7c8>
    2246:	fe 01       	movw	r30, r28
    2248:	eb 59       	subi	r30, 0x9B	; 155
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	91 83       	std	Z+1, r25	; 0x01
    224e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2250:	de 01       	movw	r26, r28
    2252:	a9 59       	subi	r26, 0x99	; 153
    2254:	bf 4f       	sbci	r27, 0xFF	; 255
    2256:	fe 01       	movw	r30, r28
    2258:	e9 59       	subi	r30, 0x99	; 153
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	80 81       	ld	r24, Z
    225e:	91 81       	ldd	r25, Z+1	; 0x01
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	11 96       	adiw	r26, 0x01	; 1
    2264:	9c 93       	st	X, r25
    2266:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2268:	fe 01       	movw	r30, r28
    226a:	e9 59       	subi	r30, 0x99	; 153
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	80 81       	ld	r24, Z
    2270:	91 81       	ldd	r25, Z+1	; 0x01
    2272:	00 97       	sbiw	r24, 0x00	; 0
    2274:	d1 f6       	brne	.-76     	; 0x222a <main+0x7b0>
    2276:	27 c0       	rjmp	.+78     	; 0x22c6 <main+0x84c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2278:	8e 01       	movw	r16, r28
    227a:	09 59       	subi	r16, 0x99	; 153
    227c:	1f 4f       	sbci	r17, 0xFF	; 255
    227e:	fe 01       	movw	r30, r28
    2280:	e7 59       	subi	r30, 0x97	; 151
    2282:	ff 4f       	sbci	r31, 0xFF	; 255
    2284:	60 81       	ld	r22, Z
    2286:	71 81       	ldd	r23, Z+1	; 0x01
    2288:	82 81       	ldd	r24, Z+2	; 0x02
    228a:	93 81       	ldd	r25, Z+3	; 0x03
    228c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	f8 01       	movw	r30, r16
    2296:	91 83       	std	Z+1, r25	; 0x01
    2298:	80 83       	st	Z, r24
    229a:	de 01       	movw	r26, r28
    229c:	ad 59       	subi	r26, 0x9D	; 157
    229e:	bf 4f       	sbci	r27, 0xFF	; 255
    22a0:	fe 01       	movw	r30, r28
    22a2:	e9 59       	subi	r30, 0x99	; 153
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	80 81       	ld	r24, Z
    22a8:	91 81       	ldd	r25, Z+1	; 0x01
    22aa:	8d 93       	st	X+, r24
    22ac:	9c 93       	st	X, r25
    22ae:	fe 01       	movw	r30, r28
    22b0:	ed 59       	subi	r30, 0x9D	; 157
    22b2:	ff 4f       	sbci	r31, 0xFF	; 255
    22b4:	80 81       	ld	r24, Z
    22b6:	91 81       	ldd	r25, Z+1	; 0x01
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	f1 f7       	brne	.-4      	; 0x22b8 <main+0x83e>
    22bc:	fe 01       	movw	r30, r28
    22be:	ed 59       	subi	r30, 0x9D	; 157
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	91 83       	std	Z+1, r25	; 0x01
    22c4:	80 83       	st	Z, r24
    22c6:	fe 01       	movw	r30, r28
    22c8:	e1 5a       	subi	r30, 0xA1	; 161
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	aa e7       	ldi	r26, 0x7A	; 122
    22d2:	b4 e4       	ldi	r27, 0x44	; 68
    22d4:	80 83       	st	Z, r24
    22d6:	91 83       	std	Z+1, r25	; 0x01
    22d8:	a2 83       	std	Z+2, r26	; 0x02
    22da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22dc:	8e 01       	movw	r16, r28
    22de:	05 5a       	subi	r16, 0xA5	; 165
    22e0:	1f 4f       	sbci	r17, 0xFF	; 255
    22e2:	fe 01       	movw	r30, r28
    22e4:	e1 5a       	subi	r30, 0xA1	; 161
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	60 81       	ld	r22, Z
    22ea:	71 81       	ldd	r23, Z+1	; 0x01
    22ec:	82 81       	ldd	r24, Z+2	; 0x02
    22ee:	93 81       	ldd	r25, Z+3	; 0x03
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	4a ef       	ldi	r20, 0xFA	; 250
    22f6:	54 e4       	ldi	r21, 0x44	; 68
    22f8:	0e 94 94 08 	call	0x1128	; 0x1128 <__mulsf3>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	f8 01       	movw	r30, r16
    2302:	80 83       	st	Z, r24
    2304:	91 83       	std	Z+1, r25	; 0x01
    2306:	a2 83       	std	Z+2, r26	; 0x02
    2308:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    230a:	fe 01       	movw	r30, r28
    230c:	e5 5a       	subi	r30, 0xA5	; 165
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	60 81       	ld	r22, Z
    2312:	71 81       	ldd	r23, Z+1	; 0x01
    2314:	82 81       	ldd	r24, Z+2	; 0x02
    2316:	93 81       	ldd	r25, Z+3	; 0x03
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e8       	ldi	r20, 0x80	; 128
    231e:	5f e3       	ldi	r21, 0x3F	; 63
    2320:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__ltsf2>
    2324:	88 23       	and	r24, r24
    2326:	44 f4       	brge	.+16     	; 0x2338 <main+0x8be>
		__ticks = 1;
    2328:	fe 01       	movw	r30, r28
    232a:	e7 5a       	subi	r30, 0xA7	; 167
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	91 83       	std	Z+1, r25	; 0x01
    2334:	80 83       	st	Z, r24
    2336:	64 c0       	rjmp	.+200    	; 0x2400 <main+0x986>
	else if (__tmp > 65535)
    2338:	fe 01       	movw	r30, r28
    233a:	e5 5a       	subi	r30, 0xA5	; 165
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	60 81       	ld	r22, Z
    2340:	71 81       	ldd	r23, Z+1	; 0x01
    2342:	82 81       	ldd	r24, Z+2	; 0x02
    2344:	93 81       	ldd	r25, Z+3	; 0x03
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	3f ef       	ldi	r19, 0xFF	; 255
    234a:	4f e7       	ldi	r20, 0x7F	; 127
    234c:	57 e4       	ldi	r21, 0x47	; 71
    234e:	0e 94 8e 09 	call	0x131c	; 0x131c <__gtsf2>
    2352:	18 16       	cp	r1, r24
    2354:	0c f0       	brlt	.+2      	; 0x2358 <main+0x8de>
    2356:	43 c0       	rjmp	.+134    	; 0x23de <main+0x964>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2358:	fe 01       	movw	r30, r28
    235a:	e1 5a       	subi	r30, 0xA1	; 161
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	60 81       	ld	r22, Z
    2360:	71 81       	ldd	r23, Z+1	; 0x01
    2362:	82 81       	ldd	r24, Z+2	; 0x02
    2364:	93 81       	ldd	r25, Z+3	; 0x03
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	40 e2       	ldi	r20, 0x20	; 32
    236c:	51 e4       	ldi	r21, 0x41	; 65
    236e:	0e 94 94 08 	call	0x1128	; 0x1128 <__mulsf3>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	8e 01       	movw	r16, r28
    2378:	07 5a       	subi	r16, 0xA7	; 167
    237a:	1f 4f       	sbci	r17, 0xFF	; 255
    237c:	bc 01       	movw	r22, r24
    237e:	cd 01       	movw	r24, r26
    2380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	f8 01       	movw	r30, r16
    238a:	91 83       	std	Z+1, r25	; 0x01
    238c:	80 83       	st	Z, r24
    238e:	1f c0       	rjmp	.+62     	; 0x23ce <main+0x954>
    2390:	fe 01       	movw	r30, r28
    2392:	e9 5a       	subi	r30, 0xA9	; 169
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	88 ec       	ldi	r24, 0xC8	; 200
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	91 83       	std	Z+1, r25	; 0x01
    239c:	80 83       	st	Z, r24
    239e:	fe 01       	movw	r30, r28
    23a0:	e9 5a       	subi	r30, 0xA9	; 169
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	80 81       	ld	r24, Z
    23a6:	91 81       	ldd	r25, Z+1	; 0x01
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	f1 f7       	brne	.-4      	; 0x23a8 <main+0x92e>
    23ac:	fe 01       	movw	r30, r28
    23ae:	e9 5a       	subi	r30, 0xA9	; 169
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	91 83       	std	Z+1, r25	; 0x01
    23b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b6:	de 01       	movw	r26, r28
    23b8:	a7 5a       	subi	r26, 0xA7	; 167
    23ba:	bf 4f       	sbci	r27, 0xFF	; 255
    23bc:	fe 01       	movw	r30, r28
    23be:	e7 5a       	subi	r30, 0xA7	; 167
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	80 81       	ld	r24, Z
    23c4:	91 81       	ldd	r25, Z+1	; 0x01
    23c6:	01 97       	sbiw	r24, 0x01	; 1
    23c8:	11 96       	adiw	r26, 0x01	; 1
    23ca:	9c 93       	st	X, r25
    23cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ce:	fe 01       	movw	r30, r28
    23d0:	e7 5a       	subi	r30, 0xA7	; 167
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	80 81       	ld	r24, Z
    23d6:	91 81       	ldd	r25, Z+1	; 0x01
    23d8:	00 97       	sbiw	r24, 0x00	; 0
    23da:	d1 f6       	brne	.-76     	; 0x2390 <main+0x916>
    23dc:	27 c0       	rjmp	.+78     	; 0x242c <main+0x9b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23de:	8e 01       	movw	r16, r28
    23e0:	07 5a       	subi	r16, 0xA7	; 167
    23e2:	1f 4f       	sbci	r17, 0xFF	; 255
    23e4:	fe 01       	movw	r30, r28
    23e6:	e5 5a       	subi	r30, 0xA5	; 165
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	60 81       	ld	r22, Z
    23ec:	71 81       	ldd	r23, Z+1	; 0x01
    23ee:	82 81       	ldd	r24, Z+2	; 0x02
    23f0:	93 81       	ldd	r25, Z+3	; 0x03
    23f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	f8 01       	movw	r30, r16
    23fc:	91 83       	std	Z+1, r25	; 0x01
    23fe:	80 83       	st	Z, r24
    2400:	de 01       	movw	r26, r28
    2402:	ab 5a       	subi	r26, 0xAB	; 171
    2404:	bf 4f       	sbci	r27, 0xFF	; 255
    2406:	fe 01       	movw	r30, r28
    2408:	e7 5a       	subi	r30, 0xA7	; 167
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	80 81       	ld	r24, Z
    240e:	91 81       	ldd	r25, Z+1	; 0x01
    2410:	8d 93       	st	X+, r24
    2412:	9c 93       	st	X, r25
    2414:	fe 01       	movw	r30, r28
    2416:	eb 5a       	subi	r30, 0xAB	; 171
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	80 81       	ld	r24, Z
    241c:	91 81       	ldd	r25, Z+1	; 0x01
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	f1 f7       	brne	.-4      	; 0x241e <main+0x9a4>
    2422:	fe 01       	movw	r30, r28
    2424:	eb 5a       	subi	r30, 0xAB	; 171
    2426:	ff 4f       	sbci	r31, 0xFF	; 255
    2428:	91 83       	std	Z+1, r25	; 0x01
    242a:	80 83       	st	Z, r24
			_delay_ms(6000);
			_delay_ms(6000);
			_delay_ms(1000);
			DcMotor_Rotate(STOP);
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <DcMotor_Rotate>
    2432:	fe 01       	movw	r30, r28
    2434:	ef 5a       	subi	r30, 0xAF	; 175
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e8       	ldi	r25, 0x80	; 128
    243c:	ab e3       	ldi	r26, 0x3B	; 59
    243e:	b5 e4       	ldi	r27, 0x45	; 69
    2440:	80 83       	st	Z, r24
    2442:	91 83       	std	Z+1, r25	; 0x01
    2444:	a2 83       	std	Z+2, r26	; 0x02
    2446:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2448:	8e 01       	movw	r16, r28
    244a:	03 5b       	subi	r16, 0xB3	; 179
    244c:	1f 4f       	sbci	r17, 0xFF	; 255
    244e:	fe 01       	movw	r30, r28
    2450:	ef 5a       	subi	r30, 0xAF	; 175
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	60 81       	ld	r22, Z
    2456:	71 81       	ldd	r23, Z+1	; 0x01
    2458:	82 81       	ldd	r24, Z+2	; 0x02
    245a:	93 81       	ldd	r25, Z+3	; 0x03
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	4a ef       	ldi	r20, 0xFA	; 250
    2462:	54 e4       	ldi	r21, 0x44	; 68
    2464:	0e 94 94 08 	call	0x1128	; 0x1128 <__mulsf3>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	f8 01       	movw	r30, r16
    246e:	80 83       	st	Z, r24
    2470:	91 83       	std	Z+1, r25	; 0x01
    2472:	a2 83       	std	Z+2, r26	; 0x02
    2474:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2476:	fe 01       	movw	r30, r28
    2478:	e3 5b       	subi	r30, 0xB3	; 179
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	60 81       	ld	r22, Z
    247e:	71 81       	ldd	r23, Z+1	; 0x01
    2480:	82 81       	ldd	r24, Z+2	; 0x02
    2482:	93 81       	ldd	r25, Z+3	; 0x03
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e8       	ldi	r20, 0x80	; 128
    248a:	5f e3       	ldi	r21, 0x3F	; 63
    248c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__ltsf2>
    2490:	88 23       	and	r24, r24
    2492:	44 f4       	brge	.+16     	; 0x24a4 <main+0xa2a>
		__ticks = 1;
    2494:	fe 01       	movw	r30, r28
    2496:	e5 5b       	subi	r30, 0xB5	; 181
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	91 83       	std	Z+1, r25	; 0x01
    24a0:	80 83       	st	Z, r24
    24a2:	64 c0       	rjmp	.+200    	; 0x256c <main+0xaf2>
	else if (__tmp > 65535)
    24a4:	fe 01       	movw	r30, r28
    24a6:	e3 5b       	subi	r30, 0xB3	; 179
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	60 81       	ld	r22, Z
    24ac:	71 81       	ldd	r23, Z+1	; 0x01
    24ae:	82 81       	ldd	r24, Z+2	; 0x02
    24b0:	93 81       	ldd	r25, Z+3	; 0x03
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	3f ef       	ldi	r19, 0xFF	; 255
    24b6:	4f e7       	ldi	r20, 0x7F	; 127
    24b8:	57 e4       	ldi	r21, 0x47	; 71
    24ba:	0e 94 8e 09 	call	0x131c	; 0x131c <__gtsf2>
    24be:	18 16       	cp	r1, r24
    24c0:	0c f0       	brlt	.+2      	; 0x24c4 <main+0xa4a>
    24c2:	43 c0       	rjmp	.+134    	; 0x254a <main+0xad0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c4:	fe 01       	movw	r30, r28
    24c6:	ef 5a       	subi	r30, 0xAF	; 175
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	60 81       	ld	r22, Z
    24cc:	71 81       	ldd	r23, Z+1	; 0x01
    24ce:	82 81       	ldd	r24, Z+2	; 0x02
    24d0:	93 81       	ldd	r25, Z+3	; 0x03
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e2       	ldi	r20, 0x20	; 32
    24d8:	51 e4       	ldi	r21, 0x41	; 65
    24da:	0e 94 94 08 	call	0x1128	; 0x1128 <__mulsf3>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	8e 01       	movw	r16, r28
    24e4:	05 5b       	subi	r16, 0xB5	; 181
    24e6:	1f 4f       	sbci	r17, 0xFF	; 255
    24e8:	bc 01       	movw	r22, r24
    24ea:	cd 01       	movw	r24, r26
    24ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	f8 01       	movw	r30, r16
    24f6:	91 83       	std	Z+1, r25	; 0x01
    24f8:	80 83       	st	Z, r24
    24fa:	1f c0       	rjmp	.+62     	; 0x253a <main+0xac0>
    24fc:	fe 01       	movw	r30, r28
    24fe:	e7 5b       	subi	r30, 0xB7	; 183
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	88 ec       	ldi	r24, 0xC8	; 200
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	91 83       	std	Z+1, r25	; 0x01
    2508:	80 83       	st	Z, r24
    250a:	fe 01       	movw	r30, r28
    250c:	e7 5b       	subi	r30, 0xB7	; 183
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	80 81       	ld	r24, Z
    2512:	91 81       	ldd	r25, Z+1	; 0x01
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <main+0xa9a>
    2518:	fe 01       	movw	r30, r28
    251a:	e7 5b       	subi	r30, 0xB7	; 183
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	91 83       	std	Z+1, r25	; 0x01
    2520:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2522:	de 01       	movw	r26, r28
    2524:	a5 5b       	subi	r26, 0xB5	; 181
    2526:	bf 4f       	sbci	r27, 0xFF	; 255
    2528:	fe 01       	movw	r30, r28
    252a:	e5 5b       	subi	r30, 0xB5	; 181
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	80 81       	ld	r24, Z
    2530:	91 81       	ldd	r25, Z+1	; 0x01
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	11 96       	adiw	r26, 0x01	; 1
    2536:	9c 93       	st	X, r25
    2538:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    253a:	fe 01       	movw	r30, r28
    253c:	e5 5b       	subi	r30, 0xB5	; 181
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	80 81       	ld	r24, Z
    2542:	91 81       	ldd	r25, Z+1	; 0x01
    2544:	00 97       	sbiw	r24, 0x00	; 0
    2546:	d1 f6       	brne	.-76     	; 0x24fc <main+0xa82>
    2548:	27 c0       	rjmp	.+78     	; 0x2598 <main+0xb1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254a:	8e 01       	movw	r16, r28
    254c:	05 5b       	subi	r16, 0xB5	; 181
    254e:	1f 4f       	sbci	r17, 0xFF	; 255
    2550:	fe 01       	movw	r30, r28
    2552:	e3 5b       	subi	r30, 0xB3	; 179
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	60 81       	ld	r22, Z
    2558:	71 81       	ldd	r23, Z+1	; 0x01
    255a:	82 81       	ldd	r24, Z+2	; 0x02
    255c:	93 81       	ldd	r25, Z+3	; 0x03
    255e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	f8 01       	movw	r30, r16
    2568:	91 83       	std	Z+1, r25	; 0x01
    256a:	80 83       	st	Z, r24
    256c:	de 01       	movw	r26, r28
    256e:	a9 5b       	subi	r26, 0xB9	; 185
    2570:	bf 4f       	sbci	r27, 0xFF	; 255
    2572:	fe 01       	movw	r30, r28
    2574:	e5 5b       	subi	r30, 0xB5	; 181
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	80 81       	ld	r24, Z
    257a:	91 81       	ldd	r25, Z+1	; 0x01
    257c:	8d 93       	st	X+, r24
    257e:	9c 93       	st	X, r25
    2580:	fe 01       	movw	r30, r28
    2582:	e9 5b       	subi	r30, 0xB9	; 185
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	80 81       	ld	r24, Z
    2588:	91 81       	ldd	r25, Z+1	; 0x01
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	f1 f7       	brne	.-4      	; 0x258a <main+0xb10>
    258e:	fe 01       	movw	r30, r28
    2590:	e9 5b       	subi	r30, 0xB9	; 185
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	91 83       	std	Z+1, r25	; 0x01
    2596:	80 83       	st	Z, r24
			_delay_ms(3000);
			DcMotor_Rotate(CCW);
    2598:	82 e0       	ldi	r24, 0x02	; 2
    259a:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <DcMotor_Rotate>
    259e:	fe 01       	movw	r30, r28
    25a0:	ed 5b       	subi	r30, 0xBD	; 189
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	90 e8       	ldi	r25, 0x80	; 128
    25a8:	ab eb       	ldi	r26, 0xBB	; 187
    25aa:	b5 e4       	ldi	r27, 0x45	; 69
    25ac:	80 83       	st	Z, r24
    25ae:	91 83       	std	Z+1, r25	; 0x01
    25b0:	a2 83       	std	Z+2, r26	; 0x02
    25b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b4:	8e 01       	movw	r16, r28
    25b6:	01 5c       	subi	r16, 0xC1	; 193
    25b8:	1f 4f       	sbci	r17, 0xFF	; 255
    25ba:	fe 01       	movw	r30, r28
    25bc:	ed 5b       	subi	r30, 0xBD	; 189
    25be:	ff 4f       	sbci	r31, 0xFF	; 255
    25c0:	60 81       	ld	r22, Z
    25c2:	71 81       	ldd	r23, Z+1	; 0x01
    25c4:	82 81       	ldd	r24, Z+2	; 0x02
    25c6:	93 81       	ldd	r25, Z+3	; 0x03
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	4a ef       	ldi	r20, 0xFA	; 250
    25ce:	54 e4       	ldi	r21, 0x44	; 68
    25d0:	0e 94 94 08 	call	0x1128	; 0x1128 <__mulsf3>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	f8 01       	movw	r30, r16
    25da:	80 83       	st	Z, r24
    25dc:	91 83       	std	Z+1, r25	; 0x01
    25de:	a2 83       	std	Z+2, r26	; 0x02
    25e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25e2:	fe 01       	movw	r30, r28
    25e4:	ff 96       	adiw	r30, 0x3f	; 63
    25e6:	60 81       	ld	r22, Z
    25e8:	71 81       	ldd	r23, Z+1	; 0x01
    25ea:	82 81       	ldd	r24, Z+2	; 0x02
    25ec:	93 81       	ldd	r25, Z+3	; 0x03
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	40 e8       	ldi	r20, 0x80	; 128
    25f4:	5f e3       	ldi	r21, 0x3F	; 63
    25f6:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__ltsf2>
    25fa:	88 23       	and	r24, r24
    25fc:	2c f4       	brge	.+10     	; 0x2608 <main+0xb8e>
		__ticks = 1;
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	9e af       	std	Y+62, r25	; 0x3e
    2604:	8d af       	std	Y+61, r24	; 0x3d
    2606:	46 c0       	rjmp	.+140    	; 0x2694 <main+0xc1a>
	else if (__tmp > 65535)
    2608:	fe 01       	movw	r30, r28
    260a:	ff 96       	adiw	r30, 0x3f	; 63
    260c:	60 81       	ld	r22, Z
    260e:	71 81       	ldd	r23, Z+1	; 0x01
    2610:	82 81       	ldd	r24, Z+2	; 0x02
    2612:	93 81       	ldd	r25, Z+3	; 0x03
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	3f ef       	ldi	r19, 0xFF	; 255
    2618:	4f e7       	ldi	r20, 0x7F	; 127
    261a:	57 e4       	ldi	r21, 0x47	; 71
    261c:	0e 94 8e 09 	call	0x131c	; 0x131c <__gtsf2>
    2620:	18 16       	cp	r1, r24
    2622:	64 f5       	brge	.+88     	; 0x267c <main+0xc02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2624:	fe 01       	movw	r30, r28
    2626:	ed 5b       	subi	r30, 0xBD	; 189
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	60 81       	ld	r22, Z
    262c:	71 81       	ldd	r23, Z+1	; 0x01
    262e:	82 81       	ldd	r24, Z+2	; 0x02
    2630:	93 81       	ldd	r25, Z+3	; 0x03
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	40 e2       	ldi	r20, 0x20	; 32
    2638:	51 e4       	ldi	r21, 0x41	; 65
    263a:	0e 94 94 08 	call	0x1128	; 0x1128 <__mulsf3>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	bc 01       	movw	r22, r24
    2644:	cd 01       	movw	r24, r26
    2646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	9e af       	std	Y+62, r25	; 0x3e
    2650:	8d af       	std	Y+61, r24	; 0x3d
    2652:	0f c0       	rjmp	.+30     	; 0x2672 <main+0xbf8>
    2654:	88 ec       	ldi	r24, 0xC8	; 200
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	9c af       	std	Y+60, r25	; 0x3c
    265a:	8b af       	std	Y+59, r24	; 0x3b
    265c:	8b ad       	ldd	r24, Y+59	; 0x3b
    265e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	f1 f7       	brne	.-4      	; 0x2660 <main+0xbe6>
    2664:	9c af       	std	Y+60, r25	; 0x3c
    2666:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2668:	8d ad       	ldd	r24, Y+61	; 0x3d
    266a:	9e ad       	ldd	r25, Y+62	; 0x3e
    266c:	01 97       	sbiw	r24, 0x01	; 1
    266e:	9e af       	std	Y+62, r25	; 0x3e
    2670:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2672:	8d ad       	ldd	r24, Y+61	; 0x3d
    2674:	9e ad       	ldd	r25, Y+62	; 0x3e
    2676:	00 97       	sbiw	r24, 0x00	; 0
    2678:	69 f7       	brne	.-38     	; 0x2654 <main+0xbda>
    267a:	16 c0       	rjmp	.+44     	; 0x26a8 <main+0xc2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    267c:	fe 01       	movw	r30, r28
    267e:	ff 96       	adiw	r30, 0x3f	; 63
    2680:	60 81       	ld	r22, Z
    2682:	71 81       	ldd	r23, Z+1	; 0x01
    2684:	82 81       	ldd	r24, Z+2	; 0x02
    2686:	93 81       	ldd	r25, Z+3	; 0x03
    2688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	9e af       	std	Y+62, r25	; 0x3e
    2692:	8d af       	std	Y+61, r24	; 0x3d
    2694:	8d ad       	ldd	r24, Y+61	; 0x3d
    2696:	9e ad       	ldd	r25, Y+62	; 0x3e
    2698:	9a af       	std	Y+58, r25	; 0x3a
    269a:	89 af       	std	Y+57, r24	; 0x39
    269c:	89 ad       	ldd	r24, Y+57	; 0x39
    269e:	9a ad       	ldd	r25, Y+58	; 0x3a
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <main+0xc26>
    26a4:	9a af       	std	Y+58, r25	; 0x3a
    26a6:	89 af       	std	Y+57, r24	; 0x39
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	90 e8       	ldi	r25, 0x80	; 128
    26ac:	ab eb       	ldi	r26, 0xBB	; 187
    26ae:	b5 e4       	ldi	r27, 0x45	; 69
    26b0:	8d ab       	std	Y+53, r24	; 0x35
    26b2:	9e ab       	std	Y+54, r25	; 0x36
    26b4:	af ab       	std	Y+55, r26	; 0x37
    26b6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b8:	6d a9       	ldd	r22, Y+53	; 0x35
    26ba:	7e a9       	ldd	r23, Y+54	; 0x36
    26bc:	8f a9       	ldd	r24, Y+55	; 0x37
    26be:	98 ad       	ldd	r25, Y+56	; 0x38
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	4a ef       	ldi	r20, 0xFA	; 250
    26c6:	54 e4       	ldi	r21, 0x44	; 68
    26c8:	0e 94 94 08 	call	0x1128	; 0x1128 <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	89 ab       	std	Y+49, r24	; 0x31
    26d2:	9a ab       	std	Y+50, r25	; 0x32
    26d4:	ab ab       	std	Y+51, r26	; 0x33
    26d6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26d8:	69 a9       	ldd	r22, Y+49	; 0x31
    26da:	7a a9       	ldd	r23, Y+50	; 0x32
    26dc:	8b a9       	ldd	r24, Y+51	; 0x33
    26de:	9c a9       	ldd	r25, Y+52	; 0x34
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e8       	ldi	r20, 0x80	; 128
    26e6:	5f e3       	ldi	r21, 0x3F	; 63
    26e8:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__ltsf2>
    26ec:	88 23       	and	r24, r24
    26ee:	2c f4       	brge	.+10     	; 0x26fa <main+0xc80>
		__ticks = 1;
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	98 ab       	std	Y+48, r25	; 0x30
    26f6:	8f a7       	std	Y+47, r24	; 0x2f
    26f8:	3f c0       	rjmp	.+126    	; 0x2778 <main+0xcfe>
	else if (__tmp > 65535)
    26fa:	69 a9       	ldd	r22, Y+49	; 0x31
    26fc:	7a a9       	ldd	r23, Y+50	; 0x32
    26fe:	8b a9       	ldd	r24, Y+51	; 0x33
    2700:	9c a9       	ldd	r25, Y+52	; 0x34
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	3f ef       	ldi	r19, 0xFF	; 255
    2706:	4f e7       	ldi	r20, 0x7F	; 127
    2708:	57 e4       	ldi	r21, 0x47	; 71
    270a:	0e 94 8e 09 	call	0x131c	; 0x131c <__gtsf2>
    270e:	18 16       	cp	r1, r24
    2710:	4c f5       	brge	.+82     	; 0x2764 <main+0xcea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2712:	6d a9       	ldd	r22, Y+53	; 0x35
    2714:	7e a9       	ldd	r23, Y+54	; 0x36
    2716:	8f a9       	ldd	r24, Y+55	; 0x37
    2718:	98 ad       	ldd	r25, Y+56	; 0x38
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e2       	ldi	r20, 0x20	; 32
    2720:	51 e4       	ldi	r21, 0x41	; 65
    2722:	0e 94 94 08 	call	0x1128	; 0x1128 <__mulsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	bc 01       	movw	r22, r24
    272c:	cd 01       	movw	r24, r26
    272e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	98 ab       	std	Y+48, r25	; 0x30
    2738:	8f a7       	std	Y+47, r24	; 0x2f
    273a:	0f c0       	rjmp	.+30     	; 0x275a <main+0xce0>
    273c:	88 ec       	ldi	r24, 0xC8	; 200
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	9e a7       	std	Y+46, r25	; 0x2e
    2742:	8d a7       	std	Y+45, r24	; 0x2d
    2744:	8d a5       	ldd	r24, Y+45	; 0x2d
    2746:	9e a5       	ldd	r25, Y+46	; 0x2e
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	f1 f7       	brne	.-4      	; 0x2748 <main+0xcce>
    274c:	9e a7       	std	Y+46, r25	; 0x2e
    274e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2750:	8f a5       	ldd	r24, Y+47	; 0x2f
    2752:	98 a9       	ldd	r25, Y+48	; 0x30
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	98 ab       	std	Y+48, r25	; 0x30
    2758:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    275a:	8f a5       	ldd	r24, Y+47	; 0x2f
    275c:	98 a9       	ldd	r25, Y+48	; 0x30
    275e:	00 97       	sbiw	r24, 0x00	; 0
    2760:	69 f7       	brne	.-38     	; 0x273c <main+0xcc2>
    2762:	14 c0       	rjmp	.+40     	; 0x278c <main+0xd12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2764:	69 a9       	ldd	r22, Y+49	; 0x31
    2766:	7a a9       	ldd	r23, Y+50	; 0x32
    2768:	8b a9       	ldd	r24, Y+51	; 0x33
    276a:	9c a9       	ldd	r25, Y+52	; 0x34
    276c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	98 ab       	std	Y+48, r25	; 0x30
    2776:	8f a7       	std	Y+47, r24	; 0x2f
    2778:	8f a5       	ldd	r24, Y+47	; 0x2f
    277a:	98 a9       	ldd	r25, Y+48	; 0x30
    277c:	9c a7       	std	Y+44, r25	; 0x2c
    277e:	8b a7       	std	Y+43, r24	; 0x2b
    2780:	8b a5       	ldd	r24, Y+43	; 0x2b
    2782:	9c a5       	ldd	r25, Y+44	; 0x2c
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <main+0xd0a>
    2788:	9c a7       	std	Y+44, r25	; 0x2c
    278a:	8b a7       	std	Y+43, r24	; 0x2b
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	aa e7       	ldi	r26, 0x7A	; 122
    2792:	b4 e4       	ldi	r27, 0x44	; 68
    2794:	8f a3       	std	Y+39, r24	; 0x27
    2796:	98 a7       	std	Y+40, r25	; 0x28
    2798:	a9 a7       	std	Y+41, r26	; 0x29
    279a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    279c:	6f a1       	ldd	r22, Y+39	; 0x27
    279e:	78 a5       	ldd	r23, Y+40	; 0x28
    27a0:	89 a5       	ldd	r24, Y+41	; 0x29
    27a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	4a ef       	ldi	r20, 0xFA	; 250
    27aa:	54 e4       	ldi	r21, 0x44	; 68
    27ac:	0e 94 94 08 	call	0x1128	; 0x1128 <__mulsf3>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	8b a3       	std	Y+35, r24	; 0x23
    27b6:	9c a3       	std	Y+36, r25	; 0x24
    27b8:	ad a3       	std	Y+37, r26	; 0x25
    27ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27bc:	6b a1       	ldd	r22, Y+35	; 0x23
    27be:	7c a1       	ldd	r23, Y+36	; 0x24
    27c0:	8d a1       	ldd	r24, Y+37	; 0x25
    27c2:	9e a1       	ldd	r25, Y+38	; 0x26
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	40 e8       	ldi	r20, 0x80	; 128
    27ca:	5f e3       	ldi	r21, 0x3F	; 63
    27cc:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__ltsf2>
    27d0:	88 23       	and	r24, r24
    27d2:	2c f4       	brge	.+10     	; 0x27de <main+0xd64>
		__ticks = 1;
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	9a a3       	std	Y+34, r25	; 0x22
    27da:	89 a3       	std	Y+33, r24	; 0x21
    27dc:	3f c0       	rjmp	.+126    	; 0x285c <main+0xde2>
	else if (__tmp > 65535)
    27de:	6b a1       	ldd	r22, Y+35	; 0x23
    27e0:	7c a1       	ldd	r23, Y+36	; 0x24
    27e2:	8d a1       	ldd	r24, Y+37	; 0x25
    27e4:	9e a1       	ldd	r25, Y+38	; 0x26
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	3f ef       	ldi	r19, 0xFF	; 255
    27ea:	4f e7       	ldi	r20, 0x7F	; 127
    27ec:	57 e4       	ldi	r21, 0x47	; 71
    27ee:	0e 94 8e 09 	call	0x131c	; 0x131c <__gtsf2>
    27f2:	18 16       	cp	r1, r24
    27f4:	4c f5       	brge	.+82     	; 0x2848 <main+0xdce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f6:	6f a1       	ldd	r22, Y+39	; 0x27
    27f8:	78 a5       	ldd	r23, Y+40	; 0x28
    27fa:	89 a5       	ldd	r24, Y+41	; 0x29
    27fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	40 e2       	ldi	r20, 0x20	; 32
    2804:	51 e4       	ldi	r21, 0x41	; 65
    2806:	0e 94 94 08 	call	0x1128	; 0x1128 <__mulsf3>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	bc 01       	movw	r22, r24
    2810:	cd 01       	movw	r24, r26
    2812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	9a a3       	std	Y+34, r25	; 0x22
    281c:	89 a3       	std	Y+33, r24	; 0x21
    281e:	0f c0       	rjmp	.+30     	; 0x283e <main+0xdc4>
    2820:	88 ec       	ldi	r24, 0xC8	; 200
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	98 a3       	std	Y+32, r25	; 0x20
    2826:	8f 8f       	std	Y+31, r24	; 0x1f
    2828:	8f 8d       	ldd	r24, Y+31	; 0x1f
    282a:	98 a1       	ldd	r25, Y+32	; 0x20
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	f1 f7       	brne	.-4      	; 0x282c <main+0xdb2>
    2830:	98 a3       	std	Y+32, r25	; 0x20
    2832:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2834:	89 a1       	ldd	r24, Y+33	; 0x21
    2836:	9a a1       	ldd	r25, Y+34	; 0x22
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	9a a3       	std	Y+34, r25	; 0x22
    283c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283e:	89 a1       	ldd	r24, Y+33	; 0x21
    2840:	9a a1       	ldd	r25, Y+34	; 0x22
    2842:	00 97       	sbiw	r24, 0x00	; 0
    2844:	69 f7       	brne	.-38     	; 0x2820 <main+0xda6>
    2846:	14 c0       	rjmp	.+40     	; 0x2870 <main+0xdf6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2848:	6b a1       	ldd	r22, Y+35	; 0x23
    284a:	7c a1       	ldd	r23, Y+36	; 0x24
    284c:	8d a1       	ldd	r24, Y+37	; 0x25
    284e:	9e a1       	ldd	r25, Y+38	; 0x26
    2850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	9a a3       	std	Y+34, r25	; 0x22
    285a:	89 a3       	std	Y+33, r24	; 0x21
    285c:	89 a1       	ldd	r24, Y+33	; 0x21
    285e:	9a a1       	ldd	r25, Y+34	; 0x22
    2860:	9e 8f       	std	Y+30, r25	; 0x1e
    2862:	8d 8f       	std	Y+29, r24	; 0x1d
    2864:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2866:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2868:	01 97       	sbiw	r24, 0x01	; 1
    286a:	f1 f7       	brne	.-4      	; 0x2868 <main+0xdee>
    286c:	9e 8f       	std	Y+30, r25	; 0x1e
    286e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(6000);
			_delay_ms(6000);
			_delay_ms(1000);
			DcMotor_Rotate(STOP);
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <DcMotor_Rotate>
			UART_sendByte(doors_opened_and_closed);
    2876:	87 e2       	ldi	r24, 0x27	; 39
    2878:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <UART_sendByte>
		}
		/*---------------------------------------------------------------------------------------*/
		if(check_byte==are_you_ready_to_sound_alarm)
    287c:	fe 01       	movw	r30, r28
    287e:	e5 56       	subi	r30, 0x65	; 101
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	80 81       	ld	r24, Z
    2884:	85 36       	cpi	r24, 0x65	; 101
    2886:	19 f4       	brne	.+6      	; 0x288e <main+0xe14>
		{
			UART_sendByte(ready_to_sound_alarm);
    2888:	86 e6       	ldi	r24, 0x66	; 102
    288a:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <UART_sendByte>
		}

		if(check_byte==sound_the_alarm)
    288e:	fe 01       	movw	r30, r28
    2890:	e5 56       	subi	r30, 0x65	; 101
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	80 81       	ld	r24, Z
    2896:	87 36       	cpi	r24, 0x67	; 103
    2898:	09 f0       	breq	.+2      	; 0x289c <main+0xe22>
    289a:	8e c0       	rjmp	.+284    	; 0x29b8 <main+0xf3e>
		{
			BUZZER_on();
    289c:	0e 94 24 0c 	call	0x1848	; 0x1848 <BUZZER_on>
			for(i=0;i<60;i++)
    28a0:	fe 01       	movw	r30, r28
    28a2:	e4 56       	subi	r30, 0x64	; 100
    28a4:	ff 4f       	sbci	r31, 0xFF	; 255
    28a6:	10 82       	st	Z, r1
    28a8:	7b c0       	rjmp	.+246    	; 0x29a0 <main+0xf26>
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	aa e7       	ldi	r26, 0x7A	; 122
    28b0:	b4 e4       	ldi	r27, 0x44	; 68
    28b2:	89 8f       	std	Y+25, r24	; 0x19
    28b4:	9a 8f       	std	Y+26, r25	; 0x1a
    28b6:	ab 8f       	std	Y+27, r26	; 0x1b
    28b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ba:	69 8d       	ldd	r22, Y+25	; 0x19
    28bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	4a ef       	ldi	r20, 0xFA	; 250
    28c8:	54 e4       	ldi	r21, 0x44	; 68
    28ca:	0e 94 94 08 	call	0x1128	; 0x1128 <__mulsf3>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	8d 8b       	std	Y+21, r24	; 0x15
    28d4:	9e 8b       	std	Y+22, r25	; 0x16
    28d6:	af 8b       	std	Y+23, r26	; 0x17
    28d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28da:	6d 89       	ldd	r22, Y+21	; 0x15
    28dc:	7e 89       	ldd	r23, Y+22	; 0x16
    28de:	8f 89       	ldd	r24, Y+23	; 0x17
    28e0:	98 8d       	ldd	r25, Y+24	; 0x18
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e8       	ldi	r20, 0x80	; 128
    28e8:	5f e3       	ldi	r21, 0x3F	; 63
    28ea:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__ltsf2>
    28ee:	88 23       	and	r24, r24
    28f0:	2c f4       	brge	.+10     	; 0x28fc <main+0xe82>
		__ticks = 1;
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	9c 8b       	std	Y+20, r25	; 0x14
    28f8:	8b 8b       	std	Y+19, r24	; 0x13
    28fa:	3f c0       	rjmp	.+126    	; 0x297a <main+0xf00>
	else if (__tmp > 65535)
    28fc:	6d 89       	ldd	r22, Y+21	; 0x15
    28fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2900:	8f 89       	ldd	r24, Y+23	; 0x17
    2902:	98 8d       	ldd	r25, Y+24	; 0x18
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	3f ef       	ldi	r19, 0xFF	; 255
    2908:	4f e7       	ldi	r20, 0x7F	; 127
    290a:	57 e4       	ldi	r21, 0x47	; 71
    290c:	0e 94 8e 09 	call	0x131c	; 0x131c <__gtsf2>
    2910:	18 16       	cp	r1, r24
    2912:	4c f5       	brge	.+82     	; 0x2966 <main+0xeec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2914:	69 8d       	ldd	r22, Y+25	; 0x19
    2916:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2918:	8b 8d       	ldd	r24, Y+27	; 0x1b
    291a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	40 e2       	ldi	r20, 0x20	; 32
    2922:	51 e4       	ldi	r21, 0x41	; 65
    2924:	0e 94 94 08 	call	0x1128	; 0x1128 <__mulsf3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	bc 01       	movw	r22, r24
    292e:	cd 01       	movw	r24, r26
    2930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	9c 8b       	std	Y+20, r25	; 0x14
    293a:	8b 8b       	std	Y+19, r24	; 0x13
    293c:	0f c0       	rjmp	.+30     	; 0x295c <main+0xee2>
    293e:	88 ec       	ldi	r24, 0xC8	; 200
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	9a 8b       	std	Y+18, r25	; 0x12
    2944:	89 8b       	std	Y+17, r24	; 0x11
    2946:	89 89       	ldd	r24, Y+17	; 0x11
    2948:	9a 89       	ldd	r25, Y+18	; 0x12
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	f1 f7       	brne	.-4      	; 0x294a <main+0xed0>
    294e:	9a 8b       	std	Y+18, r25	; 0x12
    2950:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2952:	8b 89       	ldd	r24, Y+19	; 0x13
    2954:	9c 89       	ldd	r25, Y+20	; 0x14
    2956:	01 97       	sbiw	r24, 0x01	; 1
    2958:	9c 8b       	std	Y+20, r25	; 0x14
    295a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295c:	8b 89       	ldd	r24, Y+19	; 0x13
    295e:	9c 89       	ldd	r25, Y+20	; 0x14
    2960:	00 97       	sbiw	r24, 0x00	; 0
    2962:	69 f7       	brne	.-38     	; 0x293e <main+0xec4>
    2964:	14 c0       	rjmp	.+40     	; 0x298e <main+0xf14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2966:	6d 89       	ldd	r22, Y+21	; 0x15
    2968:	7e 89       	ldd	r23, Y+22	; 0x16
    296a:	8f 89       	ldd	r24, Y+23	; 0x17
    296c:	98 8d       	ldd	r25, Y+24	; 0x18
    296e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	9c 8b       	std	Y+20, r25	; 0x14
    2978:	8b 8b       	std	Y+19, r24	; 0x13
    297a:	8b 89       	ldd	r24, Y+19	; 0x13
    297c:	9c 89       	ldd	r25, Y+20	; 0x14
    297e:	98 8b       	std	Y+16, r25	; 0x10
    2980:	8f 87       	std	Y+15, r24	; 0x0f
    2982:	8f 85       	ldd	r24, Y+15	; 0x0f
    2984:	98 89       	ldd	r25, Y+16	; 0x10
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	f1 f7       	brne	.-4      	; 0x2986 <main+0xf0c>
    298a:	98 8b       	std	Y+16, r25	; 0x10
    298c:	8f 87       	std	Y+15, r24	; 0x0f
    298e:	de 01       	movw	r26, r28
    2990:	a4 56       	subi	r26, 0x64	; 100
    2992:	bf 4f       	sbci	r27, 0xFF	; 255
    2994:	fe 01       	movw	r30, r28
    2996:	e4 56       	subi	r30, 0x64	; 100
    2998:	ff 4f       	sbci	r31, 0xFF	; 255
    299a:	80 81       	ld	r24, Z
    299c:	8f 5f       	subi	r24, 0xFF	; 255
    299e:	8c 93       	st	X, r24
    29a0:	fe 01       	movw	r30, r28
    29a2:	e4 56       	subi	r30, 0x64	; 100
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	80 81       	ld	r24, Z
    29a8:	8c 33       	cpi	r24, 0x3C	; 60
    29aa:	08 f4       	brcc	.+2      	; 0x29ae <main+0xf34>
    29ac:	7e cf       	rjmp	.-260    	; 0x28aa <main+0xe30>
			{
				_delay_ms(1000);

			}
			BUZZER_off();
    29ae:	0e 94 30 0c 	call	0x1860	; 0x1860 <BUZZER_off>
			UART_sendByte(buzzer_ended);
    29b2:	88 e6       	ldi	r24, 0x68	; 104
    29b4:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <UART_sendByte>
		}
/*---------------------------------------------------------------------------------------*/
		if(check_byte==are_you_ready_to_change_password)
    29b8:	fe 01       	movw	r30, r28
    29ba:	e5 56       	subi	r30, 0x65	; 101
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	80 81       	ld	r24, Z
    29c0:	89 36       	cpi	r24, 0x69	; 105
    29c2:	09 f0       	breq	.+2      	; 0x29c6 <main+0xf4c>
    29c4:	d6 c8       	rjmp	.-3668   	; 0x1b72 <main+0xf8>
		{
			for(i=0;i<4;i++)
    29c6:	fe 01       	movw	r30, r28
    29c8:	e4 56       	subi	r30, 0x64	; 100
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	10 82       	st	Z, r1
    29ce:	9a c0       	rjmp	.+308    	; 0x2b04 <main+0x108a>
			{
				EEPROM_readByte(adresses[i],&password_check[i]);
    29d0:	fe 01       	movw	r30, r28
    29d2:	e4 56       	subi	r30, 0x64	; 100
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	80 81       	ld	r24, Z
    29d8:	88 2f       	mov	r24, r24
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	9e 01       	movw	r18, r28
    29de:	23 55       	subi	r18, 0x53	; 83
    29e0:	3f 4f       	sbci	r19, 0xFF	; 255
    29e2:	88 0f       	add	r24, r24
    29e4:	99 1f       	adc	r25, r25
    29e6:	f9 01       	movw	r30, r18
    29e8:	e8 0f       	add	r30, r24
    29ea:	f9 1f       	adc	r31, r25
    29ec:	40 81       	ld	r20, Z
    29ee:	51 81       	ldd	r21, Z+1	; 0x01
    29f0:	fe 01       	movw	r30, r28
    29f2:	e4 56       	subi	r30, 0x64	; 100
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	80 81       	ld	r24, Z
    29f8:	88 2f       	mov	r24, r24
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	9e 01       	movw	r18, r28
    29fe:	2b 55       	subi	r18, 0x5B	; 91
    2a00:	3f 4f       	sbci	r19, 0xFF	; 255
    2a02:	28 0f       	add	r18, r24
    2a04:	39 1f       	adc	r19, r25
    2a06:	ca 01       	movw	r24, r20
    2a08:	b9 01       	movw	r22, r18
    2a0a:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <EEPROM_readByte>
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	a0 e2       	ldi	r26, 0x20	; 32
    2a14:	b1 e4       	ldi	r27, 0x41	; 65
    2a16:	8b 87       	std	Y+11, r24	; 0x0b
    2a18:	9c 87       	std	Y+12, r25	; 0x0c
    2a1a:	ad 87       	std	Y+13, r26	; 0x0d
    2a1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	4a ef       	ldi	r20, 0xFA	; 250
    2a2c:	54 e4       	ldi	r21, 0x44	; 68
    2a2e:	0e 94 94 08 	call	0x1128	; 0x1128 <__mulsf3>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	8f 83       	std	Y+7, r24	; 0x07
    2a38:	98 87       	std	Y+8, r25	; 0x08
    2a3a:	a9 87       	std	Y+9, r26	; 0x09
    2a3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a40:	78 85       	ldd	r23, Y+8	; 0x08
    2a42:	89 85       	ldd	r24, Y+9	; 0x09
    2a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	40 e8       	ldi	r20, 0x80	; 128
    2a4c:	5f e3       	ldi	r21, 0x3F	; 63
    2a4e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__ltsf2>
    2a52:	88 23       	and	r24, r24
    2a54:	2c f4       	brge	.+10     	; 0x2a60 <main+0xfe6>
		__ticks = 1;
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	9e 83       	std	Y+6, r25	; 0x06
    2a5c:	8d 83       	std	Y+5, r24	; 0x05
    2a5e:	3f c0       	rjmp	.+126    	; 0x2ade <main+0x1064>
	else if (__tmp > 65535)
    2a60:	6f 81       	ldd	r22, Y+7	; 0x07
    2a62:	78 85       	ldd	r23, Y+8	; 0x08
    2a64:	89 85       	ldd	r24, Y+9	; 0x09
    2a66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	3f ef       	ldi	r19, 0xFF	; 255
    2a6c:	4f e7       	ldi	r20, 0x7F	; 127
    2a6e:	57 e4       	ldi	r21, 0x47	; 71
    2a70:	0e 94 8e 09 	call	0x131c	; 0x131c <__gtsf2>
    2a74:	18 16       	cp	r1, r24
    2a76:	4c f5       	brge	.+82     	; 0x2aca <main+0x1050>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	40 e2       	ldi	r20, 0x20	; 32
    2a86:	51 e4       	ldi	r21, 0x41	; 65
    2a88:	0e 94 94 08 	call	0x1128	; 0x1128 <__mulsf3>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	bc 01       	movw	r22, r24
    2a92:	cd 01       	movw	r24, r26
    2a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	9e 83       	std	Y+6, r25	; 0x06
    2a9e:	8d 83       	std	Y+5, r24	; 0x05
    2aa0:	0f c0       	rjmp	.+30     	; 0x2ac0 <main+0x1046>
    2aa2:	88 ec       	ldi	r24, 0xC8	; 200
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	9c 83       	std	Y+4, r25	; 0x04
    2aa8:	8b 83       	std	Y+3, r24	; 0x03
    2aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2aac:	9c 81       	ldd	r25, Y+4	; 0x04
    2aae:	01 97       	sbiw	r24, 0x01	; 1
    2ab0:	f1 f7       	brne	.-4      	; 0x2aae <main+0x1034>
    2ab2:	9c 83       	std	Y+4, r25	; 0x04
    2ab4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aba:	01 97       	sbiw	r24, 0x01	; 1
    2abc:	9e 83       	std	Y+6, r25	; 0x06
    2abe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac4:	00 97       	sbiw	r24, 0x00	; 0
    2ac6:	69 f7       	brne	.-38     	; 0x2aa2 <main+0x1028>
    2ac8:	14 c0       	rjmp	.+40     	; 0x2af2 <main+0x1078>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aca:	6f 81       	ldd	r22, Y+7	; 0x07
    2acc:	78 85       	ldd	r23, Y+8	; 0x08
    2ace:	89 85       	ldd	r24, Y+9	; 0x09
    2ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	9e 83       	std	Y+6, r25	; 0x06
    2adc:	8d 83       	std	Y+5, r24	; 0x05
    2ade:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae2:	9a 83       	std	Y+2, r25	; 0x02
    2ae4:	89 83       	std	Y+1, r24	; 0x01
    2ae6:	89 81       	ldd	r24, Y+1	; 0x01
    2ae8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	f1 f7       	brne	.-4      	; 0x2aea <main+0x1070>
    2aee:	9a 83       	std	Y+2, r25	; 0x02
    2af0:	89 83       	std	Y+1, r24	; 0x01
			UART_sendByte(buzzer_ended);
		}
/*---------------------------------------------------------------------------------------*/
		if(check_byte==are_you_ready_to_change_password)
		{
			for(i=0;i<4;i++)
    2af2:	de 01       	movw	r26, r28
    2af4:	a4 56       	subi	r26, 0x64	; 100
    2af6:	bf 4f       	sbci	r27, 0xFF	; 255
    2af8:	fe 01       	movw	r30, r28
    2afa:	e4 56       	subi	r30, 0x64	; 100
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	80 81       	ld	r24, Z
    2b00:	8f 5f       	subi	r24, 0xFF	; 255
    2b02:	8c 93       	st	X, r24
    2b04:	fe 01       	movw	r30, r28
    2b06:	e4 56       	subi	r30, 0x64	; 100
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	80 81       	ld	r24, Z
    2b0c:	84 30       	cpi	r24, 0x04	; 4
    2b0e:	08 f4       	brcc	.+2      	; 0x2b12 <main+0x1098>
    2b10:	5f cf       	rjmp	.-322    	; 0x29d0 <main+0xf56>
			{
				EEPROM_readByte(adresses[i],&password_check[i]);
				_delay_ms(10);
			}
			UART_sendByte(ready_to_change_password);
    2b12:	8a e6       	ldi	r24, 0x6A	; 106
    2b14:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <UART_sendByte>
			UART_receiveString(password);
    2b18:	ce 01       	movw	r24, r28
    2b1a:	83 56       	subi	r24, 0x63	; 99
    2b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b1e:	0e 94 75 1d 	call	0x3aea	; 0x3aea <UART_receiveString>
			for(i=0;i<4;i++)
    2b22:	fe 01       	movw	r30, r28
    2b24:	e4 56       	subi	r30, 0x64	; 100
    2b26:	ff 4f       	sbci	r31, 0xFF	; 255
    2b28:	10 82       	st	Z, r1
    2b2a:	33 c0       	rjmp	.+102    	; 0x2b92 <main+0x1118>
			{
				if(password[i]!=password_check[i])
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	e4 56       	subi	r30, 0x64	; 100
    2b30:	ff 4f       	sbci	r31, 0xFF	; 255
    2b32:	80 81       	ld	r24, Z
    2b34:	28 2f       	mov	r18, r24
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	ce 01       	movw	r24, r28
    2b3a:	83 56       	subi	r24, 0x63	; 99
    2b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b3e:	fc 01       	movw	r30, r24
    2b40:	e2 0f       	add	r30, r18
    2b42:	f3 1f       	adc	r31, r19
    2b44:	40 81       	ld	r20, Z
    2b46:	fe 01       	movw	r30, r28
    2b48:	e4 56       	subi	r30, 0x64	; 100
    2b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4c:	80 81       	ld	r24, Z
    2b4e:	28 2f       	mov	r18, r24
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	ce 01       	movw	r24, r28
    2b54:	8b 55       	subi	r24, 0x5B	; 91
    2b56:	9f 4f       	sbci	r25, 0xFF	; 255
    2b58:	fc 01       	movw	r30, r24
    2b5a:	e2 0f       	add	r30, r18
    2b5c:	f3 1f       	adc	r31, r19
    2b5e:	80 81       	ld	r24, Z
    2b60:	48 17       	cp	r20, r24
    2b62:	29 f0       	breq	.+10     	; 0x2b6e <main+0x10f4>
				{
					UART_sendByte(unconfirmed);
    2b64:	83 e2       	ldi	r24, 0x23	; 35
    2b66:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <UART_sendByte>
    2b6a:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <main+0xf8>
					break;
				}
				else
				{
					if(i==3)
    2b6e:	fe 01       	movw	r30, r28
    2b70:	e4 56       	subi	r30, 0x64	; 100
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	80 81       	ld	r24, Z
    2b76:	83 30       	cpi	r24, 0x03	; 3
    2b78:	19 f4       	brne	.+6      	; 0x2b80 <main+0x1106>
					{
						UART_sendByte(confirmed);
    2b7a:	82 e2       	ldi	r24, 0x22	; 34
    2b7c:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <UART_sendByte>
				EEPROM_readByte(adresses[i],&password_check[i]);
				_delay_ms(10);
			}
			UART_sendByte(ready_to_change_password);
			UART_receiveString(password);
			for(i=0;i<4;i++)
    2b80:	de 01       	movw	r26, r28
    2b82:	a4 56       	subi	r26, 0x64	; 100
    2b84:	bf 4f       	sbci	r27, 0xFF	; 255
    2b86:	fe 01       	movw	r30, r28
    2b88:	e4 56       	subi	r30, 0x64	; 100
    2b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8c:	80 81       	ld	r24, Z
    2b8e:	8f 5f       	subi	r24, 0xFF	; 255
    2b90:	8c 93       	st	X, r24
    2b92:	fe 01       	movw	r30, r28
    2b94:	e4 56       	subi	r30, 0x64	; 100
    2b96:	ff 4f       	sbci	r31, 0xFF	; 255
    2b98:	80 81       	ld	r24, Z
    2b9a:	84 30       	cpi	r24, 0x04	; 4
    2b9c:	38 f2       	brcs	.-114    	; 0x2b2c <main+0x10b2>
    2b9e:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <main+0xf8>

00002ba2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2ba2:	df 93       	push	r29
    2ba4:	cf 93       	push	r28
    2ba6:	00 d0       	rcall	.+0      	; 0x2ba8 <GPIO_setupPinDirection+0x6>
    2ba8:	00 d0       	rcall	.+0      	; 0x2baa <GPIO_setupPinDirection+0x8>
    2baa:	0f 92       	push	r0
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
    2bb0:	89 83       	std	Y+1, r24	; 0x01
    2bb2:	6a 83       	std	Y+2, r22	; 0x02
    2bb4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb8:	88 30       	cpi	r24, 0x08	; 8
    2bba:	08 f0       	brcs	.+2      	; 0x2bbe <GPIO_setupPinDirection+0x1c>
    2bbc:	d5 c0       	rjmp	.+426    	; 0x2d68 <GPIO_setupPinDirection+0x1c6>
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	84 30       	cpi	r24, 0x04	; 4
    2bc2:	08 f0       	brcs	.+2      	; 0x2bc6 <GPIO_setupPinDirection+0x24>
    2bc4:	d1 c0       	rjmp	.+418    	; 0x2d68 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2bc6:	89 81       	ldd	r24, Y+1	; 0x01
    2bc8:	28 2f       	mov	r18, r24
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	3d 83       	std	Y+5, r19	; 0x05
    2bce:	2c 83       	std	Y+4, r18	; 0x04
    2bd0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bd2:	9d 81       	ldd	r25, Y+5	; 0x05
    2bd4:	81 30       	cpi	r24, 0x01	; 1
    2bd6:	91 05       	cpc	r25, r1
    2bd8:	09 f4       	brne	.+2      	; 0x2bdc <GPIO_setupPinDirection+0x3a>
    2bda:	43 c0       	rjmp	.+134    	; 0x2c62 <GPIO_setupPinDirection+0xc0>
    2bdc:	2c 81       	ldd	r18, Y+4	; 0x04
    2bde:	3d 81       	ldd	r19, Y+5	; 0x05
    2be0:	22 30       	cpi	r18, 0x02	; 2
    2be2:	31 05       	cpc	r19, r1
    2be4:	2c f4       	brge	.+10     	; 0x2bf0 <GPIO_setupPinDirection+0x4e>
    2be6:	8c 81       	ldd	r24, Y+4	; 0x04
    2be8:	9d 81       	ldd	r25, Y+5	; 0x05
    2bea:	00 97       	sbiw	r24, 0x00	; 0
    2bec:	71 f0       	breq	.+28     	; 0x2c0a <GPIO_setupPinDirection+0x68>
    2bee:	bc c0       	rjmp	.+376    	; 0x2d68 <GPIO_setupPinDirection+0x1c6>
    2bf0:	2c 81       	ldd	r18, Y+4	; 0x04
    2bf2:	3d 81       	ldd	r19, Y+5	; 0x05
    2bf4:	22 30       	cpi	r18, 0x02	; 2
    2bf6:	31 05       	cpc	r19, r1
    2bf8:	09 f4       	brne	.+2      	; 0x2bfc <GPIO_setupPinDirection+0x5a>
    2bfa:	5f c0       	rjmp	.+190    	; 0x2cba <GPIO_setupPinDirection+0x118>
    2bfc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bfe:	9d 81       	ldd	r25, Y+5	; 0x05
    2c00:	83 30       	cpi	r24, 0x03	; 3
    2c02:	91 05       	cpc	r25, r1
    2c04:	09 f4       	brne	.+2      	; 0x2c08 <GPIO_setupPinDirection+0x66>
    2c06:	85 c0       	rjmp	.+266    	; 0x2d12 <GPIO_setupPinDirection+0x170>
    2c08:	af c0       	rjmp	.+350    	; 0x2d68 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0c:	81 30       	cpi	r24, 0x01	; 1
    2c0e:	a1 f4       	brne	.+40     	; 0x2c38 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2c10:	aa e3       	ldi	r26, 0x3A	; 58
    2c12:	b0 e0       	ldi	r27, 0x00	; 0
    2c14:	ea e3       	ldi	r30, 0x3A	; 58
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	80 81       	ld	r24, Z
    2c1a:	48 2f       	mov	r20, r24
    2c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1e:	28 2f       	mov	r18, r24
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	02 2e       	mov	r0, r18
    2c28:	02 c0       	rjmp	.+4      	; 0x2c2e <GPIO_setupPinDirection+0x8c>
    2c2a:	88 0f       	add	r24, r24
    2c2c:	99 1f       	adc	r25, r25
    2c2e:	0a 94       	dec	r0
    2c30:	e2 f7       	brpl	.-8      	; 0x2c2a <GPIO_setupPinDirection+0x88>
    2c32:	84 2b       	or	r24, r20
    2c34:	8c 93       	st	X, r24
    2c36:	98 c0       	rjmp	.+304    	; 0x2d68 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2c38:	aa e3       	ldi	r26, 0x3A	; 58
    2c3a:	b0 e0       	ldi	r27, 0x00	; 0
    2c3c:	ea e3       	ldi	r30, 0x3A	; 58
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	80 81       	ld	r24, Z
    2c42:	48 2f       	mov	r20, r24
    2c44:	8a 81       	ldd	r24, Y+2	; 0x02
    2c46:	28 2f       	mov	r18, r24
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	02 2e       	mov	r0, r18
    2c50:	02 c0       	rjmp	.+4      	; 0x2c56 <GPIO_setupPinDirection+0xb4>
    2c52:	88 0f       	add	r24, r24
    2c54:	99 1f       	adc	r25, r25
    2c56:	0a 94       	dec	r0
    2c58:	e2 f7       	brpl	.-8      	; 0x2c52 <GPIO_setupPinDirection+0xb0>
    2c5a:	80 95       	com	r24
    2c5c:	84 23       	and	r24, r20
    2c5e:	8c 93       	st	X, r24
    2c60:	83 c0       	rjmp	.+262    	; 0x2d68 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2c62:	8b 81       	ldd	r24, Y+3	; 0x03
    2c64:	81 30       	cpi	r24, 0x01	; 1
    2c66:	a1 f4       	brne	.+40     	; 0x2c90 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2c68:	a7 e3       	ldi	r26, 0x37	; 55
    2c6a:	b0 e0       	ldi	r27, 0x00	; 0
    2c6c:	e7 e3       	ldi	r30, 0x37	; 55
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	80 81       	ld	r24, Z
    2c72:	48 2f       	mov	r20, r24
    2c74:	8a 81       	ldd	r24, Y+2	; 0x02
    2c76:	28 2f       	mov	r18, r24
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	02 2e       	mov	r0, r18
    2c80:	02 c0       	rjmp	.+4      	; 0x2c86 <GPIO_setupPinDirection+0xe4>
    2c82:	88 0f       	add	r24, r24
    2c84:	99 1f       	adc	r25, r25
    2c86:	0a 94       	dec	r0
    2c88:	e2 f7       	brpl	.-8      	; 0x2c82 <GPIO_setupPinDirection+0xe0>
    2c8a:	84 2b       	or	r24, r20
    2c8c:	8c 93       	st	X, r24
    2c8e:	6c c0       	rjmp	.+216    	; 0x2d68 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2c90:	a7 e3       	ldi	r26, 0x37	; 55
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	e7 e3       	ldi	r30, 0x37	; 55
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	48 2f       	mov	r20, r24
    2c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9e:	28 2f       	mov	r18, r24
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	02 2e       	mov	r0, r18
    2ca8:	02 c0       	rjmp	.+4      	; 0x2cae <GPIO_setupPinDirection+0x10c>
    2caa:	88 0f       	add	r24, r24
    2cac:	99 1f       	adc	r25, r25
    2cae:	0a 94       	dec	r0
    2cb0:	e2 f7       	brpl	.-8      	; 0x2caa <GPIO_setupPinDirection+0x108>
    2cb2:	80 95       	com	r24
    2cb4:	84 23       	and	r24, r20
    2cb6:	8c 93       	st	X, r24
    2cb8:	57 c0       	rjmp	.+174    	; 0x2d68 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2cba:	8b 81       	ldd	r24, Y+3	; 0x03
    2cbc:	81 30       	cpi	r24, 0x01	; 1
    2cbe:	a1 f4       	brne	.+40     	; 0x2ce8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2cc0:	a4 e3       	ldi	r26, 0x34	; 52
    2cc2:	b0 e0       	ldi	r27, 0x00	; 0
    2cc4:	e4 e3       	ldi	r30, 0x34	; 52
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	80 81       	ld	r24, Z
    2cca:	48 2f       	mov	r20, r24
    2ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cce:	28 2f       	mov	r18, r24
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	81 e0       	ldi	r24, 0x01	; 1
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	02 2e       	mov	r0, r18
    2cd8:	02 c0       	rjmp	.+4      	; 0x2cde <GPIO_setupPinDirection+0x13c>
    2cda:	88 0f       	add	r24, r24
    2cdc:	99 1f       	adc	r25, r25
    2cde:	0a 94       	dec	r0
    2ce0:	e2 f7       	brpl	.-8      	; 0x2cda <GPIO_setupPinDirection+0x138>
    2ce2:	84 2b       	or	r24, r20
    2ce4:	8c 93       	st	X, r24
    2ce6:	40 c0       	rjmp	.+128    	; 0x2d68 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2ce8:	a4 e3       	ldi	r26, 0x34	; 52
    2cea:	b0 e0       	ldi	r27, 0x00	; 0
    2cec:	e4 e3       	ldi	r30, 0x34	; 52
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	80 81       	ld	r24, Z
    2cf2:	48 2f       	mov	r20, r24
    2cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf6:	28 2f       	mov	r18, r24
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	02 2e       	mov	r0, r18
    2d00:	02 c0       	rjmp	.+4      	; 0x2d06 <GPIO_setupPinDirection+0x164>
    2d02:	88 0f       	add	r24, r24
    2d04:	99 1f       	adc	r25, r25
    2d06:	0a 94       	dec	r0
    2d08:	e2 f7       	brpl	.-8      	; 0x2d02 <GPIO_setupPinDirection+0x160>
    2d0a:	80 95       	com	r24
    2d0c:	84 23       	and	r24, r20
    2d0e:	8c 93       	st	X, r24
    2d10:	2b c0       	rjmp	.+86     	; 0x2d68 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2d12:	8b 81       	ldd	r24, Y+3	; 0x03
    2d14:	81 30       	cpi	r24, 0x01	; 1
    2d16:	a1 f4       	brne	.+40     	; 0x2d40 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2d18:	a1 e3       	ldi	r26, 0x31	; 49
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	e1 e3       	ldi	r30, 0x31	; 49
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	80 81       	ld	r24, Z
    2d22:	48 2f       	mov	r20, r24
    2d24:	8a 81       	ldd	r24, Y+2	; 0x02
    2d26:	28 2f       	mov	r18, r24
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	02 2e       	mov	r0, r18
    2d30:	02 c0       	rjmp	.+4      	; 0x2d36 <GPIO_setupPinDirection+0x194>
    2d32:	88 0f       	add	r24, r24
    2d34:	99 1f       	adc	r25, r25
    2d36:	0a 94       	dec	r0
    2d38:	e2 f7       	brpl	.-8      	; 0x2d32 <GPIO_setupPinDirection+0x190>
    2d3a:	84 2b       	or	r24, r20
    2d3c:	8c 93       	st	X, r24
    2d3e:	14 c0       	rjmp	.+40     	; 0x2d68 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2d40:	a1 e3       	ldi	r26, 0x31	; 49
    2d42:	b0 e0       	ldi	r27, 0x00	; 0
    2d44:	e1 e3       	ldi	r30, 0x31	; 49
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	80 81       	ld	r24, Z
    2d4a:	48 2f       	mov	r20, r24
    2d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4e:	28 2f       	mov	r18, r24
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	02 2e       	mov	r0, r18
    2d58:	02 c0       	rjmp	.+4      	; 0x2d5e <GPIO_setupPinDirection+0x1bc>
    2d5a:	88 0f       	add	r24, r24
    2d5c:	99 1f       	adc	r25, r25
    2d5e:	0a 94       	dec	r0
    2d60:	e2 f7       	brpl	.-8      	; 0x2d5a <GPIO_setupPinDirection+0x1b8>
    2d62:	80 95       	com	r24
    2d64:	84 23       	and	r24, r20
    2d66:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2d68:	0f 90       	pop	r0
    2d6a:	0f 90       	pop	r0
    2d6c:	0f 90       	pop	r0
    2d6e:	0f 90       	pop	r0
    2d70:	0f 90       	pop	r0
    2d72:	cf 91       	pop	r28
    2d74:	df 91       	pop	r29
    2d76:	08 95       	ret

00002d78 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2d78:	df 93       	push	r29
    2d7a:	cf 93       	push	r28
    2d7c:	00 d0       	rcall	.+0      	; 0x2d7e <GPIO_writePin+0x6>
    2d7e:	00 d0       	rcall	.+0      	; 0x2d80 <GPIO_writePin+0x8>
    2d80:	0f 92       	push	r0
    2d82:	cd b7       	in	r28, 0x3d	; 61
    2d84:	de b7       	in	r29, 0x3e	; 62
    2d86:	89 83       	std	Y+1, r24	; 0x01
    2d88:	6a 83       	std	Y+2, r22	; 0x02
    2d8a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8e:	88 30       	cpi	r24, 0x08	; 8
    2d90:	08 f0       	brcs	.+2      	; 0x2d94 <GPIO_writePin+0x1c>
    2d92:	d5 c0       	rjmp	.+426    	; 0x2f3e <GPIO_writePin+0x1c6>
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
    2d96:	84 30       	cpi	r24, 0x04	; 4
    2d98:	08 f0       	brcs	.+2      	; 0x2d9c <GPIO_writePin+0x24>
    2d9a:	d1 c0       	rjmp	.+418    	; 0x2f3e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2d9c:	89 81       	ldd	r24, Y+1	; 0x01
    2d9e:	28 2f       	mov	r18, r24
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	3d 83       	std	Y+5, r19	; 0x05
    2da4:	2c 83       	std	Y+4, r18	; 0x04
    2da6:	8c 81       	ldd	r24, Y+4	; 0x04
    2da8:	9d 81       	ldd	r25, Y+5	; 0x05
    2daa:	81 30       	cpi	r24, 0x01	; 1
    2dac:	91 05       	cpc	r25, r1
    2dae:	09 f4       	brne	.+2      	; 0x2db2 <GPIO_writePin+0x3a>
    2db0:	43 c0       	rjmp	.+134    	; 0x2e38 <GPIO_writePin+0xc0>
    2db2:	2c 81       	ldd	r18, Y+4	; 0x04
    2db4:	3d 81       	ldd	r19, Y+5	; 0x05
    2db6:	22 30       	cpi	r18, 0x02	; 2
    2db8:	31 05       	cpc	r19, r1
    2dba:	2c f4       	brge	.+10     	; 0x2dc6 <GPIO_writePin+0x4e>
    2dbc:	8c 81       	ldd	r24, Y+4	; 0x04
    2dbe:	9d 81       	ldd	r25, Y+5	; 0x05
    2dc0:	00 97       	sbiw	r24, 0x00	; 0
    2dc2:	71 f0       	breq	.+28     	; 0x2de0 <GPIO_writePin+0x68>
    2dc4:	bc c0       	rjmp	.+376    	; 0x2f3e <GPIO_writePin+0x1c6>
    2dc6:	2c 81       	ldd	r18, Y+4	; 0x04
    2dc8:	3d 81       	ldd	r19, Y+5	; 0x05
    2dca:	22 30       	cpi	r18, 0x02	; 2
    2dcc:	31 05       	cpc	r19, r1
    2dce:	09 f4       	brne	.+2      	; 0x2dd2 <GPIO_writePin+0x5a>
    2dd0:	5f c0       	rjmp	.+190    	; 0x2e90 <GPIO_writePin+0x118>
    2dd2:	8c 81       	ldd	r24, Y+4	; 0x04
    2dd4:	9d 81       	ldd	r25, Y+5	; 0x05
    2dd6:	83 30       	cpi	r24, 0x03	; 3
    2dd8:	91 05       	cpc	r25, r1
    2dda:	09 f4       	brne	.+2      	; 0x2dde <GPIO_writePin+0x66>
    2ddc:	85 c0       	rjmp	.+266    	; 0x2ee8 <GPIO_writePin+0x170>
    2dde:	af c0       	rjmp	.+350    	; 0x2f3e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2de0:	8b 81       	ldd	r24, Y+3	; 0x03
    2de2:	81 30       	cpi	r24, 0x01	; 1
    2de4:	a1 f4       	brne	.+40     	; 0x2e0e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2de6:	ab e3       	ldi	r26, 0x3B	; 59
    2de8:	b0 e0       	ldi	r27, 0x00	; 0
    2dea:	eb e3       	ldi	r30, 0x3B	; 59
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	80 81       	ld	r24, Z
    2df0:	48 2f       	mov	r20, r24
    2df2:	8a 81       	ldd	r24, Y+2	; 0x02
    2df4:	28 2f       	mov	r18, r24
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	02 2e       	mov	r0, r18
    2dfe:	02 c0       	rjmp	.+4      	; 0x2e04 <GPIO_writePin+0x8c>
    2e00:	88 0f       	add	r24, r24
    2e02:	99 1f       	adc	r25, r25
    2e04:	0a 94       	dec	r0
    2e06:	e2 f7       	brpl	.-8      	; 0x2e00 <GPIO_writePin+0x88>
    2e08:	84 2b       	or	r24, r20
    2e0a:	8c 93       	st	X, r24
    2e0c:	98 c0       	rjmp	.+304    	; 0x2f3e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2e0e:	ab e3       	ldi	r26, 0x3B	; 59
    2e10:	b0 e0       	ldi	r27, 0x00	; 0
    2e12:	eb e3       	ldi	r30, 0x3B	; 59
    2e14:	f0 e0       	ldi	r31, 0x00	; 0
    2e16:	80 81       	ld	r24, Z
    2e18:	48 2f       	mov	r20, r24
    2e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1c:	28 2f       	mov	r18, r24
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	02 2e       	mov	r0, r18
    2e26:	02 c0       	rjmp	.+4      	; 0x2e2c <GPIO_writePin+0xb4>
    2e28:	88 0f       	add	r24, r24
    2e2a:	99 1f       	adc	r25, r25
    2e2c:	0a 94       	dec	r0
    2e2e:	e2 f7       	brpl	.-8      	; 0x2e28 <GPIO_writePin+0xb0>
    2e30:	80 95       	com	r24
    2e32:	84 23       	and	r24, r20
    2e34:	8c 93       	st	X, r24
    2e36:	83 c0       	rjmp	.+262    	; 0x2f3e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2e38:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3a:	81 30       	cpi	r24, 0x01	; 1
    2e3c:	a1 f4       	brne	.+40     	; 0x2e66 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2e3e:	a8 e3       	ldi	r26, 0x38	; 56
    2e40:	b0 e0       	ldi	r27, 0x00	; 0
    2e42:	e8 e3       	ldi	r30, 0x38	; 56
    2e44:	f0 e0       	ldi	r31, 0x00	; 0
    2e46:	80 81       	ld	r24, Z
    2e48:	48 2f       	mov	r20, r24
    2e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4c:	28 2f       	mov	r18, r24
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	02 2e       	mov	r0, r18
    2e56:	02 c0       	rjmp	.+4      	; 0x2e5c <GPIO_writePin+0xe4>
    2e58:	88 0f       	add	r24, r24
    2e5a:	99 1f       	adc	r25, r25
    2e5c:	0a 94       	dec	r0
    2e5e:	e2 f7       	brpl	.-8      	; 0x2e58 <GPIO_writePin+0xe0>
    2e60:	84 2b       	or	r24, r20
    2e62:	8c 93       	st	X, r24
    2e64:	6c c0       	rjmp	.+216    	; 0x2f3e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2e66:	a8 e3       	ldi	r26, 0x38	; 56
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	e8 e3       	ldi	r30, 0x38	; 56
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	48 2f       	mov	r20, r24
    2e72:	8a 81       	ldd	r24, Y+2	; 0x02
    2e74:	28 2f       	mov	r18, r24
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	02 2e       	mov	r0, r18
    2e7e:	02 c0       	rjmp	.+4      	; 0x2e84 <GPIO_writePin+0x10c>
    2e80:	88 0f       	add	r24, r24
    2e82:	99 1f       	adc	r25, r25
    2e84:	0a 94       	dec	r0
    2e86:	e2 f7       	brpl	.-8      	; 0x2e80 <GPIO_writePin+0x108>
    2e88:	80 95       	com	r24
    2e8a:	84 23       	and	r24, r20
    2e8c:	8c 93       	st	X, r24
    2e8e:	57 c0       	rjmp	.+174    	; 0x2f3e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2e90:	8b 81       	ldd	r24, Y+3	; 0x03
    2e92:	81 30       	cpi	r24, 0x01	; 1
    2e94:	a1 f4       	brne	.+40     	; 0x2ebe <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2e96:	a5 e3       	ldi	r26, 0x35	; 53
    2e98:	b0 e0       	ldi	r27, 0x00	; 0
    2e9a:	e5 e3       	ldi	r30, 0x35	; 53
    2e9c:	f0 e0       	ldi	r31, 0x00	; 0
    2e9e:	80 81       	ld	r24, Z
    2ea0:	48 2f       	mov	r20, r24
    2ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea4:	28 2f       	mov	r18, r24
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	02 2e       	mov	r0, r18
    2eae:	02 c0       	rjmp	.+4      	; 0x2eb4 <GPIO_writePin+0x13c>
    2eb0:	88 0f       	add	r24, r24
    2eb2:	99 1f       	adc	r25, r25
    2eb4:	0a 94       	dec	r0
    2eb6:	e2 f7       	brpl	.-8      	; 0x2eb0 <GPIO_writePin+0x138>
    2eb8:	84 2b       	or	r24, r20
    2eba:	8c 93       	st	X, r24
    2ebc:	40 c0       	rjmp	.+128    	; 0x2f3e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2ebe:	a5 e3       	ldi	r26, 0x35	; 53
    2ec0:	b0 e0       	ldi	r27, 0x00	; 0
    2ec2:	e5 e3       	ldi	r30, 0x35	; 53
    2ec4:	f0 e0       	ldi	r31, 0x00	; 0
    2ec6:	80 81       	ld	r24, Z
    2ec8:	48 2f       	mov	r20, r24
    2eca:	8a 81       	ldd	r24, Y+2	; 0x02
    2ecc:	28 2f       	mov	r18, r24
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	02 2e       	mov	r0, r18
    2ed6:	02 c0       	rjmp	.+4      	; 0x2edc <GPIO_writePin+0x164>
    2ed8:	88 0f       	add	r24, r24
    2eda:	99 1f       	adc	r25, r25
    2edc:	0a 94       	dec	r0
    2ede:	e2 f7       	brpl	.-8      	; 0x2ed8 <GPIO_writePin+0x160>
    2ee0:	80 95       	com	r24
    2ee2:	84 23       	and	r24, r20
    2ee4:	8c 93       	st	X, r24
    2ee6:	2b c0       	rjmp	.+86     	; 0x2f3e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eea:	81 30       	cpi	r24, 0x01	; 1
    2eec:	a1 f4       	brne	.+40     	; 0x2f16 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2eee:	a2 e3       	ldi	r26, 0x32	; 50
    2ef0:	b0 e0       	ldi	r27, 0x00	; 0
    2ef2:	e2 e3       	ldi	r30, 0x32	; 50
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	80 81       	ld	r24, Z
    2ef8:	48 2f       	mov	r20, r24
    2efa:	8a 81       	ldd	r24, Y+2	; 0x02
    2efc:	28 2f       	mov	r18, r24
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	02 2e       	mov	r0, r18
    2f06:	02 c0       	rjmp	.+4      	; 0x2f0c <GPIO_writePin+0x194>
    2f08:	88 0f       	add	r24, r24
    2f0a:	99 1f       	adc	r25, r25
    2f0c:	0a 94       	dec	r0
    2f0e:	e2 f7       	brpl	.-8      	; 0x2f08 <GPIO_writePin+0x190>
    2f10:	84 2b       	or	r24, r20
    2f12:	8c 93       	st	X, r24
    2f14:	14 c0       	rjmp	.+40     	; 0x2f3e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2f16:	a2 e3       	ldi	r26, 0x32	; 50
    2f18:	b0 e0       	ldi	r27, 0x00	; 0
    2f1a:	e2 e3       	ldi	r30, 0x32	; 50
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	80 81       	ld	r24, Z
    2f20:	48 2f       	mov	r20, r24
    2f22:	8a 81       	ldd	r24, Y+2	; 0x02
    2f24:	28 2f       	mov	r18, r24
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	81 e0       	ldi	r24, 0x01	; 1
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	02 2e       	mov	r0, r18
    2f2e:	02 c0       	rjmp	.+4      	; 0x2f34 <GPIO_writePin+0x1bc>
    2f30:	88 0f       	add	r24, r24
    2f32:	99 1f       	adc	r25, r25
    2f34:	0a 94       	dec	r0
    2f36:	e2 f7       	brpl	.-8      	; 0x2f30 <GPIO_writePin+0x1b8>
    2f38:	80 95       	com	r24
    2f3a:	84 23       	and	r24, r20
    2f3c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2f3e:	0f 90       	pop	r0
    2f40:	0f 90       	pop	r0
    2f42:	0f 90       	pop	r0
    2f44:	0f 90       	pop	r0
    2f46:	0f 90       	pop	r0
    2f48:	cf 91       	pop	r28
    2f4a:	df 91       	pop	r29
    2f4c:	08 95       	ret

00002f4e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2f4e:	df 93       	push	r29
    2f50:	cf 93       	push	r28
    2f52:	00 d0       	rcall	.+0      	; 0x2f54 <GPIO_readPin+0x6>
    2f54:	00 d0       	rcall	.+0      	; 0x2f56 <GPIO_readPin+0x8>
    2f56:	0f 92       	push	r0
    2f58:	cd b7       	in	r28, 0x3d	; 61
    2f5a:	de b7       	in	r29, 0x3e	; 62
    2f5c:	8a 83       	std	Y+2, r24	; 0x02
    2f5e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2f60:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2f62:	8b 81       	ldd	r24, Y+3	; 0x03
    2f64:	88 30       	cpi	r24, 0x08	; 8
    2f66:	08 f0       	brcs	.+2      	; 0x2f6a <GPIO_readPin+0x1c>
    2f68:	84 c0       	rjmp	.+264    	; 0x3072 <GPIO_readPin+0x124>
    2f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6c:	84 30       	cpi	r24, 0x04	; 4
    2f6e:	08 f0       	brcs	.+2      	; 0x2f72 <GPIO_readPin+0x24>
    2f70:	80 c0       	rjmp	.+256    	; 0x3072 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2f72:	8a 81       	ldd	r24, Y+2	; 0x02
    2f74:	28 2f       	mov	r18, r24
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	3d 83       	std	Y+5, r19	; 0x05
    2f7a:	2c 83       	std	Y+4, r18	; 0x04
    2f7c:	4c 81       	ldd	r20, Y+4	; 0x04
    2f7e:	5d 81       	ldd	r21, Y+5	; 0x05
    2f80:	41 30       	cpi	r20, 0x01	; 1
    2f82:	51 05       	cpc	r21, r1
    2f84:	79 f1       	breq	.+94     	; 0x2fe4 <GPIO_readPin+0x96>
    2f86:	8c 81       	ldd	r24, Y+4	; 0x04
    2f88:	9d 81       	ldd	r25, Y+5	; 0x05
    2f8a:	82 30       	cpi	r24, 0x02	; 2
    2f8c:	91 05       	cpc	r25, r1
    2f8e:	34 f4       	brge	.+12     	; 0x2f9c <GPIO_readPin+0x4e>
    2f90:	2c 81       	ldd	r18, Y+4	; 0x04
    2f92:	3d 81       	ldd	r19, Y+5	; 0x05
    2f94:	21 15       	cp	r18, r1
    2f96:	31 05       	cpc	r19, r1
    2f98:	69 f0       	breq	.+26     	; 0x2fb4 <GPIO_readPin+0x66>
    2f9a:	6b c0       	rjmp	.+214    	; 0x3072 <GPIO_readPin+0x124>
    2f9c:	4c 81       	ldd	r20, Y+4	; 0x04
    2f9e:	5d 81       	ldd	r21, Y+5	; 0x05
    2fa0:	42 30       	cpi	r20, 0x02	; 2
    2fa2:	51 05       	cpc	r21, r1
    2fa4:	b9 f1       	breq	.+110    	; 0x3014 <GPIO_readPin+0xc6>
    2fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    2fa8:	9d 81       	ldd	r25, Y+5	; 0x05
    2faa:	83 30       	cpi	r24, 0x03	; 3
    2fac:	91 05       	cpc	r25, r1
    2fae:	09 f4       	brne	.+2      	; 0x2fb2 <GPIO_readPin+0x64>
    2fb0:	49 c0       	rjmp	.+146    	; 0x3044 <GPIO_readPin+0xf6>
    2fb2:	5f c0       	rjmp	.+190    	; 0x3072 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2fb4:	e9 e3       	ldi	r30, 0x39	; 57
    2fb6:	f0 e0       	ldi	r31, 0x00	; 0
    2fb8:	80 81       	ld	r24, Z
    2fba:	28 2f       	mov	r18, r24
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc0:	88 2f       	mov	r24, r24
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	a9 01       	movw	r20, r18
    2fc6:	02 c0       	rjmp	.+4      	; 0x2fcc <GPIO_readPin+0x7e>
    2fc8:	55 95       	asr	r21
    2fca:	47 95       	ror	r20
    2fcc:	8a 95       	dec	r24
    2fce:	e2 f7       	brpl	.-8      	; 0x2fc8 <GPIO_readPin+0x7a>
    2fd0:	ca 01       	movw	r24, r20
    2fd2:	81 70       	andi	r24, 0x01	; 1
    2fd4:	90 70       	andi	r25, 0x00	; 0
    2fd6:	88 23       	and	r24, r24
    2fd8:	19 f0       	breq	.+6      	; 0x2fe0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	89 83       	std	Y+1, r24	; 0x01
    2fde:	49 c0       	rjmp	.+146    	; 0x3072 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2fe0:	19 82       	std	Y+1, r1	; 0x01
    2fe2:	47 c0       	rjmp	.+142    	; 0x3072 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2fe4:	e6 e3       	ldi	r30, 0x36	; 54
    2fe6:	f0 e0       	ldi	r31, 0x00	; 0
    2fe8:	80 81       	ld	r24, Z
    2fea:	28 2f       	mov	r18, r24
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff0:	88 2f       	mov	r24, r24
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	a9 01       	movw	r20, r18
    2ff6:	02 c0       	rjmp	.+4      	; 0x2ffc <GPIO_readPin+0xae>
    2ff8:	55 95       	asr	r21
    2ffa:	47 95       	ror	r20
    2ffc:	8a 95       	dec	r24
    2ffe:	e2 f7       	brpl	.-8      	; 0x2ff8 <GPIO_readPin+0xaa>
    3000:	ca 01       	movw	r24, r20
    3002:	81 70       	andi	r24, 0x01	; 1
    3004:	90 70       	andi	r25, 0x00	; 0
    3006:	88 23       	and	r24, r24
    3008:	19 f0       	breq	.+6      	; 0x3010 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	89 83       	std	Y+1, r24	; 0x01
    300e:	31 c0       	rjmp	.+98     	; 0x3072 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    3010:	19 82       	std	Y+1, r1	; 0x01
    3012:	2f c0       	rjmp	.+94     	; 0x3072 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    3014:	e3 e3       	ldi	r30, 0x33	; 51
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	80 81       	ld	r24, Z
    301a:	28 2f       	mov	r18, r24
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	8b 81       	ldd	r24, Y+3	; 0x03
    3020:	88 2f       	mov	r24, r24
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	a9 01       	movw	r20, r18
    3026:	02 c0       	rjmp	.+4      	; 0x302c <GPIO_readPin+0xde>
    3028:	55 95       	asr	r21
    302a:	47 95       	ror	r20
    302c:	8a 95       	dec	r24
    302e:	e2 f7       	brpl	.-8      	; 0x3028 <GPIO_readPin+0xda>
    3030:	ca 01       	movw	r24, r20
    3032:	81 70       	andi	r24, 0x01	; 1
    3034:	90 70       	andi	r25, 0x00	; 0
    3036:	88 23       	and	r24, r24
    3038:	19 f0       	breq	.+6      	; 0x3040 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	89 83       	std	Y+1, r24	; 0x01
    303e:	19 c0       	rjmp	.+50     	; 0x3072 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    3040:	19 82       	std	Y+1, r1	; 0x01
    3042:	17 c0       	rjmp	.+46     	; 0x3072 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    3044:	e0 e3       	ldi	r30, 0x30	; 48
    3046:	f0 e0       	ldi	r31, 0x00	; 0
    3048:	80 81       	ld	r24, Z
    304a:	28 2f       	mov	r18, r24
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	8b 81       	ldd	r24, Y+3	; 0x03
    3050:	88 2f       	mov	r24, r24
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	a9 01       	movw	r20, r18
    3056:	02 c0       	rjmp	.+4      	; 0x305c <GPIO_readPin+0x10e>
    3058:	55 95       	asr	r21
    305a:	47 95       	ror	r20
    305c:	8a 95       	dec	r24
    305e:	e2 f7       	brpl	.-8      	; 0x3058 <GPIO_readPin+0x10a>
    3060:	ca 01       	movw	r24, r20
    3062:	81 70       	andi	r24, 0x01	; 1
    3064:	90 70       	andi	r25, 0x00	; 0
    3066:	88 23       	and	r24, r24
    3068:	19 f0       	breq	.+6      	; 0x3070 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	89 83       	std	Y+1, r24	; 0x01
    306e:	01 c0       	rjmp	.+2      	; 0x3072 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    3070:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    3072:	89 81       	ldd	r24, Y+1	; 0x01
}
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	0f 90       	pop	r0
    307c:	0f 90       	pop	r0
    307e:	cf 91       	pop	r28
    3080:	df 91       	pop	r29
    3082:	08 95       	ret

00003084 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    3084:	df 93       	push	r29
    3086:	cf 93       	push	r28
    3088:	00 d0       	rcall	.+0      	; 0x308a <GPIO_setupPortDirection+0x6>
    308a:	00 d0       	rcall	.+0      	; 0x308c <GPIO_setupPortDirection+0x8>
    308c:	cd b7       	in	r28, 0x3d	; 61
    308e:	de b7       	in	r29, 0x3e	; 62
    3090:	89 83       	std	Y+1, r24	; 0x01
    3092:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    3094:	89 81       	ldd	r24, Y+1	; 0x01
    3096:	84 30       	cpi	r24, 0x04	; 4
    3098:	90 f5       	brcc	.+100    	; 0x30fe <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    309a:	89 81       	ldd	r24, Y+1	; 0x01
    309c:	28 2f       	mov	r18, r24
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	3c 83       	std	Y+4, r19	; 0x04
    30a2:	2b 83       	std	Y+3, r18	; 0x03
    30a4:	8b 81       	ldd	r24, Y+3	; 0x03
    30a6:	9c 81       	ldd	r25, Y+4	; 0x04
    30a8:	81 30       	cpi	r24, 0x01	; 1
    30aa:	91 05       	cpc	r25, r1
    30ac:	d1 f0       	breq	.+52     	; 0x30e2 <GPIO_setupPortDirection+0x5e>
    30ae:	2b 81       	ldd	r18, Y+3	; 0x03
    30b0:	3c 81       	ldd	r19, Y+4	; 0x04
    30b2:	22 30       	cpi	r18, 0x02	; 2
    30b4:	31 05       	cpc	r19, r1
    30b6:	2c f4       	brge	.+10     	; 0x30c2 <GPIO_setupPortDirection+0x3e>
    30b8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ba:	9c 81       	ldd	r25, Y+4	; 0x04
    30bc:	00 97       	sbiw	r24, 0x00	; 0
    30be:	61 f0       	breq	.+24     	; 0x30d8 <GPIO_setupPortDirection+0x54>
    30c0:	1e c0       	rjmp	.+60     	; 0x30fe <GPIO_setupPortDirection+0x7a>
    30c2:	2b 81       	ldd	r18, Y+3	; 0x03
    30c4:	3c 81       	ldd	r19, Y+4	; 0x04
    30c6:	22 30       	cpi	r18, 0x02	; 2
    30c8:	31 05       	cpc	r19, r1
    30ca:	81 f0       	breq	.+32     	; 0x30ec <GPIO_setupPortDirection+0x68>
    30cc:	8b 81       	ldd	r24, Y+3	; 0x03
    30ce:	9c 81       	ldd	r25, Y+4	; 0x04
    30d0:	83 30       	cpi	r24, 0x03	; 3
    30d2:	91 05       	cpc	r25, r1
    30d4:	81 f0       	breq	.+32     	; 0x30f6 <GPIO_setupPortDirection+0x72>
    30d6:	13 c0       	rjmp	.+38     	; 0x30fe <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    30d8:	ea e3       	ldi	r30, 0x3A	; 58
    30da:	f0 e0       	ldi	r31, 0x00	; 0
    30dc:	8a 81       	ldd	r24, Y+2	; 0x02
    30de:	80 83       	st	Z, r24
    30e0:	0e c0       	rjmp	.+28     	; 0x30fe <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    30e2:	e7 e3       	ldi	r30, 0x37	; 55
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	8a 81       	ldd	r24, Y+2	; 0x02
    30e8:	80 83       	st	Z, r24
    30ea:	09 c0       	rjmp	.+18     	; 0x30fe <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    30ec:	e4 e3       	ldi	r30, 0x34	; 52
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	8a 81       	ldd	r24, Y+2	; 0x02
    30f2:	80 83       	st	Z, r24
    30f4:	04 c0       	rjmp	.+8      	; 0x30fe <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    30f6:	e1 e3       	ldi	r30, 0x31	; 49
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	8a 81       	ldd	r24, Y+2	; 0x02
    30fc:	80 83       	st	Z, r24
			break;
		}
	}
}
    30fe:	0f 90       	pop	r0
    3100:	0f 90       	pop	r0
    3102:	0f 90       	pop	r0
    3104:	0f 90       	pop	r0
    3106:	cf 91       	pop	r28
    3108:	df 91       	pop	r29
    310a:	08 95       	ret

0000310c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    310c:	df 93       	push	r29
    310e:	cf 93       	push	r28
    3110:	00 d0       	rcall	.+0      	; 0x3112 <GPIO_writePort+0x6>
    3112:	00 d0       	rcall	.+0      	; 0x3114 <GPIO_writePort+0x8>
    3114:	cd b7       	in	r28, 0x3d	; 61
    3116:	de b7       	in	r29, 0x3e	; 62
    3118:	89 83       	std	Y+1, r24	; 0x01
    311a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    311c:	89 81       	ldd	r24, Y+1	; 0x01
    311e:	84 30       	cpi	r24, 0x04	; 4
    3120:	90 f5       	brcc	.+100    	; 0x3186 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    3122:	89 81       	ldd	r24, Y+1	; 0x01
    3124:	28 2f       	mov	r18, r24
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	3c 83       	std	Y+4, r19	; 0x04
    312a:	2b 83       	std	Y+3, r18	; 0x03
    312c:	8b 81       	ldd	r24, Y+3	; 0x03
    312e:	9c 81       	ldd	r25, Y+4	; 0x04
    3130:	81 30       	cpi	r24, 0x01	; 1
    3132:	91 05       	cpc	r25, r1
    3134:	d1 f0       	breq	.+52     	; 0x316a <GPIO_writePort+0x5e>
    3136:	2b 81       	ldd	r18, Y+3	; 0x03
    3138:	3c 81       	ldd	r19, Y+4	; 0x04
    313a:	22 30       	cpi	r18, 0x02	; 2
    313c:	31 05       	cpc	r19, r1
    313e:	2c f4       	brge	.+10     	; 0x314a <GPIO_writePort+0x3e>
    3140:	8b 81       	ldd	r24, Y+3	; 0x03
    3142:	9c 81       	ldd	r25, Y+4	; 0x04
    3144:	00 97       	sbiw	r24, 0x00	; 0
    3146:	61 f0       	breq	.+24     	; 0x3160 <GPIO_writePort+0x54>
    3148:	1e c0       	rjmp	.+60     	; 0x3186 <GPIO_writePort+0x7a>
    314a:	2b 81       	ldd	r18, Y+3	; 0x03
    314c:	3c 81       	ldd	r19, Y+4	; 0x04
    314e:	22 30       	cpi	r18, 0x02	; 2
    3150:	31 05       	cpc	r19, r1
    3152:	81 f0       	breq	.+32     	; 0x3174 <GPIO_writePort+0x68>
    3154:	8b 81       	ldd	r24, Y+3	; 0x03
    3156:	9c 81       	ldd	r25, Y+4	; 0x04
    3158:	83 30       	cpi	r24, 0x03	; 3
    315a:	91 05       	cpc	r25, r1
    315c:	81 f0       	breq	.+32     	; 0x317e <GPIO_writePort+0x72>
    315e:	13 c0       	rjmp	.+38     	; 0x3186 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    3160:	eb e3       	ldi	r30, 0x3B	; 59
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	8a 81       	ldd	r24, Y+2	; 0x02
    3166:	80 83       	st	Z, r24
    3168:	0e c0       	rjmp	.+28     	; 0x3186 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    316a:	e8 e3       	ldi	r30, 0x38	; 56
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	8a 81       	ldd	r24, Y+2	; 0x02
    3170:	80 83       	st	Z, r24
    3172:	09 c0       	rjmp	.+18     	; 0x3186 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    3174:	e5 e3       	ldi	r30, 0x35	; 53
    3176:	f0 e0       	ldi	r31, 0x00	; 0
    3178:	8a 81       	ldd	r24, Y+2	; 0x02
    317a:	80 83       	st	Z, r24
    317c:	04 c0       	rjmp	.+8      	; 0x3186 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    317e:	e2 e3       	ldi	r30, 0x32	; 50
    3180:	f0 e0       	ldi	r31, 0x00	; 0
    3182:	8a 81       	ldd	r24, Y+2	; 0x02
    3184:	80 83       	st	Z, r24
			break;
		}
	}
}
    3186:	0f 90       	pop	r0
    3188:	0f 90       	pop	r0
    318a:	0f 90       	pop	r0
    318c:	0f 90       	pop	r0
    318e:	cf 91       	pop	r28
    3190:	df 91       	pop	r29
    3192:	08 95       	ret

00003194 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    3194:	df 93       	push	r29
    3196:	cf 93       	push	r28
    3198:	00 d0       	rcall	.+0      	; 0x319a <GPIO_readPort+0x6>
    319a:	00 d0       	rcall	.+0      	; 0x319c <GPIO_readPort+0x8>
    319c:	cd b7       	in	r28, 0x3d	; 61
    319e:	de b7       	in	r29, 0x3e	; 62
    31a0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    31a2:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    31a4:	8a 81       	ldd	r24, Y+2	; 0x02
    31a6:	84 30       	cpi	r24, 0x04	; 4
    31a8:	90 f5       	brcc	.+100    	; 0x320e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    31aa:	8a 81       	ldd	r24, Y+2	; 0x02
    31ac:	28 2f       	mov	r18, r24
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	3c 83       	std	Y+4, r19	; 0x04
    31b2:	2b 83       	std	Y+3, r18	; 0x03
    31b4:	8b 81       	ldd	r24, Y+3	; 0x03
    31b6:	9c 81       	ldd	r25, Y+4	; 0x04
    31b8:	81 30       	cpi	r24, 0x01	; 1
    31ba:	91 05       	cpc	r25, r1
    31bc:	d1 f0       	breq	.+52     	; 0x31f2 <GPIO_readPort+0x5e>
    31be:	2b 81       	ldd	r18, Y+3	; 0x03
    31c0:	3c 81       	ldd	r19, Y+4	; 0x04
    31c2:	22 30       	cpi	r18, 0x02	; 2
    31c4:	31 05       	cpc	r19, r1
    31c6:	2c f4       	brge	.+10     	; 0x31d2 <GPIO_readPort+0x3e>
    31c8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ca:	9c 81       	ldd	r25, Y+4	; 0x04
    31cc:	00 97       	sbiw	r24, 0x00	; 0
    31ce:	61 f0       	breq	.+24     	; 0x31e8 <GPIO_readPort+0x54>
    31d0:	1e c0       	rjmp	.+60     	; 0x320e <GPIO_readPort+0x7a>
    31d2:	2b 81       	ldd	r18, Y+3	; 0x03
    31d4:	3c 81       	ldd	r19, Y+4	; 0x04
    31d6:	22 30       	cpi	r18, 0x02	; 2
    31d8:	31 05       	cpc	r19, r1
    31da:	81 f0       	breq	.+32     	; 0x31fc <GPIO_readPort+0x68>
    31dc:	8b 81       	ldd	r24, Y+3	; 0x03
    31de:	9c 81       	ldd	r25, Y+4	; 0x04
    31e0:	83 30       	cpi	r24, 0x03	; 3
    31e2:	91 05       	cpc	r25, r1
    31e4:	81 f0       	breq	.+32     	; 0x3206 <GPIO_readPort+0x72>
    31e6:	13 c0       	rjmp	.+38     	; 0x320e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    31e8:	e9 e3       	ldi	r30, 0x39	; 57
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	80 81       	ld	r24, Z
    31ee:	89 83       	std	Y+1, r24	; 0x01
    31f0:	0e c0       	rjmp	.+28     	; 0x320e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    31f2:	e6 e3       	ldi	r30, 0x36	; 54
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	80 81       	ld	r24, Z
    31f8:	89 83       	std	Y+1, r24	; 0x01
    31fa:	09 c0       	rjmp	.+18     	; 0x320e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    31fc:	e3 e3       	ldi	r30, 0x33	; 51
    31fe:	f0 e0       	ldi	r31, 0x00	; 0
    3200:	80 81       	ld	r24, Z
    3202:	89 83       	std	Y+1, r24	; 0x01
    3204:	04 c0       	rjmp	.+8      	; 0x320e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    3206:	e0 e3       	ldi	r30, 0x30	; 48
    3208:	f0 e0       	ldi	r31, 0x00	; 0
    320a:	80 81       	ld	r24, Z
    320c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    320e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3210:	0f 90       	pop	r0
    3212:	0f 90       	pop	r0
    3214:	0f 90       	pop	r0
    3216:	0f 90       	pop	r0
    3218:	cf 91       	pop	r28
    321a:	df 91       	pop	r29
    321c:	08 95       	ret

0000321e <__vector_9>:
static volatile void (*g_callBackPtr)(void) = NULL_PTR;
uint8 volatile static num_of_calls_needed=0;
uint8 volatile counter =0;

ISR(TIMER0_OVF_vect)
{
    321e:	1f 92       	push	r1
    3220:	0f 92       	push	r0
    3222:	0f b6       	in	r0, 0x3f	; 63
    3224:	0f 92       	push	r0
    3226:	11 24       	eor	r1, r1
    3228:	2f 93       	push	r18
    322a:	3f 93       	push	r19
    322c:	4f 93       	push	r20
    322e:	5f 93       	push	r21
    3230:	6f 93       	push	r22
    3232:	7f 93       	push	r23
    3234:	8f 93       	push	r24
    3236:	9f 93       	push	r25
    3238:	af 93       	push	r26
    323a:	bf 93       	push	r27
    323c:	ef 93       	push	r30
    323e:	ff 93       	push	r31
    3240:	df 93       	push	r29
    3242:	cf 93       	push	r28
    3244:	cd b7       	in	r28, 0x3d	; 61
    3246:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr != NULL_PTR&&counter<num_of_calls_needed)
    3248:	80 91 70 01 	lds	r24, 0x0170
    324c:	90 91 71 01 	lds	r25, 0x0171
    3250:	00 97       	sbiw	r24, 0x00	; 0
    3252:	59 f0       	breq	.+22     	; 0x326a <__vector_9+0x4c>
    3254:	90 91 73 01 	lds	r25, 0x0173
    3258:	80 91 72 01 	lds	r24, 0x0172
    325c:	98 17       	cp	r25, r24
    325e:	28 f4       	brcc	.+10     	; 0x326a <__vector_9+0x4c>
		{
			counter++;
    3260:	80 91 73 01 	lds	r24, 0x0173
    3264:	8f 5f       	subi	r24, 0xFF	; 255
    3266:	80 93 73 01 	sts	0x0173, r24

		}
	if(counter==(num_of_calls_needed))
    326a:	90 91 73 01 	lds	r25, 0x0173
    326e:	80 91 72 01 	lds	r24, 0x0172
    3272:	98 17       	cp	r25, r24
    3274:	39 f4       	brne	.+14     	; 0x3284 <__vector_9+0x66>
	{
		/* Call the Call Back function in the application after the time is reached */
		(*g_callBackPtr)();
    3276:	e0 91 70 01 	lds	r30, 0x0170
    327a:	f0 91 71 01 	lds	r31, 0x0171
    327e:	09 95       	icall
		counter=0;
    3280:	10 92 73 01 	sts	0x0173, r1

	}

}
    3284:	cf 91       	pop	r28
    3286:	df 91       	pop	r29
    3288:	ff 91       	pop	r31
    328a:	ef 91       	pop	r30
    328c:	bf 91       	pop	r27
    328e:	af 91       	pop	r26
    3290:	9f 91       	pop	r25
    3292:	8f 91       	pop	r24
    3294:	7f 91       	pop	r23
    3296:	6f 91       	pop	r22
    3298:	5f 91       	pop	r21
    329a:	4f 91       	pop	r20
    329c:	3f 91       	pop	r19
    329e:	2f 91       	pop	r18
    32a0:	0f 90       	pop	r0
    32a2:	0f be       	out	0x3f, r0	; 63
    32a4:	0f 90       	pop	r0
    32a6:	1f 90       	pop	r1
    32a8:	18 95       	reti

000032aa <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    32aa:	1f 92       	push	r1
    32ac:	0f 92       	push	r0
    32ae:	0f b6       	in	r0, 0x3f	; 63
    32b0:	0f 92       	push	r0
    32b2:	11 24       	eor	r1, r1
    32b4:	2f 93       	push	r18
    32b6:	3f 93       	push	r19
    32b8:	4f 93       	push	r20
    32ba:	5f 93       	push	r21
    32bc:	6f 93       	push	r22
    32be:	7f 93       	push	r23
    32c0:	8f 93       	push	r24
    32c2:	9f 93       	push	r25
    32c4:	af 93       	push	r26
    32c6:	bf 93       	push	r27
    32c8:	ef 93       	push	r30
    32ca:	ff 93       	push	r31
    32cc:	df 93       	push	r29
    32ce:	cf 93       	push	r28
    32d0:	cd b7       	in	r28, 0x3d	; 61
    32d2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR&&counter<num_of_calls_needed)
    32d4:	80 91 70 01 	lds	r24, 0x0170
    32d8:	90 91 71 01 	lds	r25, 0x0171
    32dc:	00 97       	sbiw	r24, 0x00	; 0
    32de:	59 f0       	breq	.+22     	; 0x32f6 <__vector_19+0x4c>
    32e0:	90 91 73 01 	lds	r25, 0x0173
    32e4:	80 91 72 01 	lds	r24, 0x0172
    32e8:	98 17       	cp	r25, r24
    32ea:	28 f4       	brcc	.+10     	; 0x32f6 <__vector_19+0x4c>
			{
				counter++;
    32ec:	80 91 73 01 	lds	r24, 0x0173
    32f0:	8f 5f       	subi	r24, 0xFF	; 255
    32f2:	80 93 73 01 	sts	0x0173, r24


			}
		if(counter==(num_of_calls_needed))
    32f6:	90 91 73 01 	lds	r25, 0x0173
    32fa:	80 91 72 01 	lds	r24, 0x0172
    32fe:	98 17       	cp	r25, r24
    3300:	39 f4       	brne	.+14     	; 0x3310 <__vector_19+0x66>
		{
			/* Call the Call Back function in the application after the time is reached */
			(*g_callBackPtr)();
    3302:	e0 91 70 01 	lds	r30, 0x0170
    3306:	f0 91 71 01 	lds	r31, 0x0171
    330a:	09 95       	icall
			counter=0;
    330c:	10 92 73 01 	sts	0x0173, r1

		}
}
    3310:	cf 91       	pop	r28
    3312:	df 91       	pop	r29
    3314:	ff 91       	pop	r31
    3316:	ef 91       	pop	r30
    3318:	bf 91       	pop	r27
    331a:	af 91       	pop	r26
    331c:	9f 91       	pop	r25
    331e:	8f 91       	pop	r24
    3320:	7f 91       	pop	r23
    3322:	6f 91       	pop	r22
    3324:	5f 91       	pop	r21
    3326:	4f 91       	pop	r20
    3328:	3f 91       	pop	r19
    332a:	2f 91       	pop	r18
    332c:	0f 90       	pop	r0
    332e:	0f be       	out	0x3f, r0	; 63
    3330:	0f 90       	pop	r0
    3332:	1f 90       	pop	r1
    3334:	18 95       	reti

00003336 <TIMER0_init>:

void TIMER0_init(TIMER0_mode mode_op)
{
    3336:	df 93       	push	r29
    3338:	cf 93       	push	r28
    333a:	0f 92       	push	r0
    333c:	cd b7       	in	r28, 0x3d	; 61
    333e:	de b7       	in	r29, 0x3e	; 62
    3340:	89 83       	std	Y+1, r24	; 0x01
	SREG=(1<<7);
    3342:	ef e5       	ldi	r30, 0x5F	; 95
    3344:	f0 e0       	ldi	r31, 0x00	; 0
    3346:	80 e8       	ldi	r24, 0x80	; 128
    3348:	80 83       	st	Z, r24
	TCCR0=0;
    334a:	e3 e5       	ldi	r30, 0x53	; 83
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	10 82       	st	Z, r1
	TCCR0=(1<<FOC0);
    3350:	e3 e5       	ldi	r30, 0x53	; 83
    3352:	f0 e0       	ldi	r31, 0x00	; 0
    3354:	80 e8       	ldi	r24, 0x80	; 128
    3356:	80 83       	st	Z, r24
	if((mode_op)==CTC)
    3358:	89 81       	ldd	r24, Y+1	; 0x01
    335a:	88 30       	cpi	r24, 0x08	; 8
    335c:	b9 f4       	brne	.+46     	; 0x338c <TIMER0_init+0x56>
	{
		TIMSK=(TIMSK&0xFC)|(1<<OCIE0);
    335e:	a9 e5       	ldi	r26, 0x59	; 89
    3360:	b0 e0       	ldi	r27, 0x00	; 0
    3362:	e9 e5       	ldi	r30, 0x59	; 89
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	80 81       	ld	r24, Z
    3368:	8c 7f       	andi	r24, 0xFC	; 252
    336a:	82 60       	ori	r24, 0x02	; 2
    336c:	8c 93       	st	X, r24
		TCCR0|=(1<<WGM01);
    336e:	a3 e5       	ldi	r26, 0x53	; 83
    3370:	b0 e0       	ldi	r27, 0x00	; 0
    3372:	e3 e5       	ldi	r30, 0x53	; 83
    3374:	f0 e0       	ldi	r31, 0x00	; 0
    3376:	80 81       	ld	r24, Z
    3378:	88 60       	ori	r24, 0x08	; 8
    337a:	8c 93       	st	X, r24
		TCCR0=(TCCR0&0x8F);
    337c:	a3 e5       	ldi	r26, 0x53	; 83
    337e:	b0 e0       	ldi	r27, 0x00	; 0
    3380:	e3 e5       	ldi	r30, 0x53	; 83
    3382:	f0 e0       	ldi	r31, 0x00	; 0
    3384:	80 81       	ld	r24, Z
    3386:	8f 78       	andi	r24, 0x8F	; 143
    3388:	8c 93       	st	X, r24
    338a:	1c c0       	rjmp	.+56     	; 0x33c4 <TIMER0_init+0x8e>

	}
	else
	{
		TIMSK=(TIMSK&0xFC)|(1<<TOIE0);
    338c:	a9 e5       	ldi	r26, 0x59	; 89
    338e:	b0 e0       	ldi	r27, 0x00	; 0
    3390:	e9 e5       	ldi	r30, 0x59	; 89
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	80 81       	ld	r24, Z
    3396:	8c 7f       	andi	r24, 0xFC	; 252
    3398:	81 60       	ori	r24, 0x01	; 1
    339a:	8c 93       	st	X, r24
		TCCR0&=~(1<<WGM01);
    339c:	a3 e5       	ldi	r26, 0x53	; 83
    339e:	b0 e0       	ldi	r27, 0x00	; 0
    33a0:	e3 e5       	ldi	r30, 0x53	; 83
    33a2:	f0 e0       	ldi	r31, 0x00	; 0
    33a4:	80 81       	ld	r24, Z
    33a6:	87 7f       	andi	r24, 0xF7	; 247
    33a8:	8c 93       	st	X, r24
		TCCR0&=~(1<<WGM00);
    33aa:	a3 e5       	ldi	r26, 0x53	; 83
    33ac:	b0 e0       	ldi	r27, 0x00	; 0
    33ae:	e3 e5       	ldi	r30, 0x53	; 83
    33b0:	f0 e0       	ldi	r31, 0x00	; 0
    33b2:	80 81       	ld	r24, Z
    33b4:	8f 7b       	andi	r24, 0xBF	; 191
    33b6:	8c 93       	st	X, r24
		TCCR0|=(NORMAL<<3);
    33b8:	a3 e5       	ldi	r26, 0x53	; 83
    33ba:	b0 e0       	ldi	r27, 0x00	; 0
    33bc:	e3 e5       	ldi	r30, 0x53	; 83
    33be:	f0 e0       	ldi	r31, 0x00	; 0
    33c0:	80 81       	ld	r24, Z
    33c2:	8c 93       	st	X, r24
	}

	TCNT0=0;
    33c4:	e2 e5       	ldi	r30, 0x52	; 82
    33c6:	f0 e0       	ldi	r31, 0x00	; 0
    33c8:	10 82       	st	Z, r1
	OCR0=0;
    33ca:	ec e5       	ldi	r30, 0x5C	; 92
    33cc:	f0 e0       	ldi	r31, 0x00	; 0
    33ce:	10 82       	st	Z, r1
}
    33d0:	0f 90       	pop	r0
    33d2:	cf 91       	pop	r28
    33d4:	df 91       	pop	r29
    33d6:	08 95       	ret

000033d8 <TIMER0_countMilliSeconds_overflow>:

void TIMER0_countMilliSeconds_overflow(uint16 ms,uint16 prescaler)
{
    33d8:	af 92       	push	r10
    33da:	bf 92       	push	r11
    33dc:	cf 92       	push	r12
    33de:	df 92       	push	r13
    33e0:	ef 92       	push	r14
    33e2:	ff 92       	push	r15
    33e4:	0f 93       	push	r16
    33e6:	1f 93       	push	r17
    33e8:	df 93       	push	r29
    33ea:	cf 93       	push	r28
    33ec:	cd b7       	in	r28, 0x3d	; 61
    33ee:	de b7       	in	r29, 0x3e	; 62
    33f0:	2e 97       	sbiw	r28, 0x0e	; 14
    33f2:	0f b6       	in	r0, 0x3f	; 63
    33f4:	f8 94       	cli
    33f6:	de bf       	out	0x3e, r29	; 62
    33f8:	0f be       	out	0x3f, r0	; 63
    33fa:	cd bf       	out	0x3d, r28	; 61
    33fc:	9a 87       	std	Y+10, r25	; 0x0a
    33fe:	89 87       	std	Y+9, r24	; 0x09
    3400:	7c 87       	std	Y+12, r23	; 0x0c
    3402:	6b 87       	std	Y+11, r22	; 0x0b

	uint64 num_of_ticks;
	num_of_ticks=(ms*F_CPUU/1000)/(prescaler);
    3404:	89 85       	ldd	r24, Y+9	; 0x09
    3406:	9a 85       	ldd	r25, Y+10	; 0x0a
    3408:	cc 01       	movw	r24, r24
    340a:	a0 e0       	ldi	r26, 0x00	; 0
    340c:	b0 e0       	ldi	r27, 0x00	; 0
    340e:	20 e0       	ldi	r18, 0x00	; 0
    3410:	32 e1       	ldi	r19, 0x12	; 18
    3412:	4a e7       	ldi	r20, 0x7A	; 122
    3414:	50 e0       	ldi	r21, 0x00	; 0
    3416:	bc 01       	movw	r22, r24
    3418:	cd 01       	movw	r24, r26
    341a:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__mulsi3>
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22
    3422:	28 ee       	ldi	r18, 0xE8	; 232
    3424:	33 e0       	ldi	r19, 0x03	; 3
    3426:	40 e0       	ldi	r20, 0x00	; 0
    3428:	50 e0       	ldi	r21, 0x00	; 0
    342a:	bc 01       	movw	r22, r24
    342c:	cd 01       	movw	r24, r26
    342e:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__divmodsi4>
    3432:	da 01       	movw	r26, r20
    3434:	c9 01       	movw	r24, r18
    3436:	7c 01       	movw	r14, r24
    3438:	8d 01       	movw	r16, r26
    343a:	8b 85       	ldd	r24, Y+11	; 0x0b
    343c:	9c 85       	ldd	r25, Y+12	; 0x0c
    343e:	9c 01       	movw	r18, r24
    3440:	40 e0       	ldi	r20, 0x00	; 0
    3442:	50 e0       	ldi	r21, 0x00	; 0
    3444:	c8 01       	movw	r24, r16
    3446:	b7 01       	movw	r22, r14
    3448:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__divmodsi4>
    344c:	da 01       	movw	r26, r20
    344e:	c9 01       	movw	r24, r18
    3450:	89 83       	std	Y+1, r24	; 0x01
    3452:	9a 83       	std	Y+2, r25	; 0x02
    3454:	ab 83       	std	Y+3, r26	; 0x03
    3456:	bc 83       	std	Y+4, r27	; 0x04
    3458:	bb 0f       	add	r27, r27
    345a:	88 0b       	sbc	r24, r24
    345c:	98 2f       	mov	r25, r24
    345e:	dc 01       	movw	r26, r24
    3460:	8d 83       	std	Y+5, r24	; 0x05
    3462:	8e 83       	std	Y+6, r24	; 0x06
    3464:	8f 83       	std	Y+7, r24	; 0x07
    3466:	88 87       	std	Y+8, r24	; 0x08
	if (num_of_ticks<255)
    3468:	88 85       	ldd	r24, Y+8	; 0x08
    346a:	88 23       	and	r24, r24
    346c:	99 f5       	brne	.+102    	; 0x34d4 <TIMER0_countMilliSeconds_overflow+0xfc>
    346e:	88 85       	ldd	r24, Y+8	; 0x08
    3470:	88 23       	and	r24, r24
    3472:	39 f5       	brne	.+78     	; 0x34c2 <TIMER0_countMilliSeconds_overflow+0xea>
    3474:	8f 81       	ldd	r24, Y+7	; 0x07
    3476:	88 23       	and	r24, r24
    3478:	69 f5       	brne	.+90     	; 0x34d4 <TIMER0_countMilliSeconds_overflow+0xfc>
    347a:	8f 81       	ldd	r24, Y+7	; 0x07
    347c:	88 23       	and	r24, r24
    347e:	09 f5       	brne	.+66     	; 0x34c2 <TIMER0_countMilliSeconds_overflow+0xea>
    3480:	8e 81       	ldd	r24, Y+6	; 0x06
    3482:	88 23       	and	r24, r24
    3484:	39 f5       	brne	.+78     	; 0x34d4 <TIMER0_countMilliSeconds_overflow+0xfc>
    3486:	8e 81       	ldd	r24, Y+6	; 0x06
    3488:	88 23       	and	r24, r24
    348a:	d9 f4       	brne	.+54     	; 0x34c2 <TIMER0_countMilliSeconds_overflow+0xea>
    348c:	8d 81       	ldd	r24, Y+5	; 0x05
    348e:	88 23       	and	r24, r24
    3490:	09 f5       	brne	.+66     	; 0x34d4 <TIMER0_countMilliSeconds_overflow+0xfc>
    3492:	8d 81       	ldd	r24, Y+5	; 0x05
    3494:	88 23       	and	r24, r24
    3496:	a9 f4       	brne	.+42     	; 0x34c2 <TIMER0_countMilliSeconds_overflow+0xea>
    3498:	8c 81       	ldd	r24, Y+4	; 0x04
    349a:	88 23       	and	r24, r24
    349c:	d9 f4       	brne	.+54     	; 0x34d4 <TIMER0_countMilliSeconds_overflow+0xfc>
    349e:	8c 81       	ldd	r24, Y+4	; 0x04
    34a0:	88 23       	and	r24, r24
    34a2:	79 f4       	brne	.+30     	; 0x34c2 <TIMER0_countMilliSeconds_overflow+0xea>
    34a4:	8b 81       	ldd	r24, Y+3	; 0x03
    34a6:	88 23       	and	r24, r24
    34a8:	a9 f4       	brne	.+42     	; 0x34d4 <TIMER0_countMilliSeconds_overflow+0xfc>
    34aa:	8b 81       	ldd	r24, Y+3	; 0x03
    34ac:	88 23       	and	r24, r24
    34ae:	49 f4       	brne	.+18     	; 0x34c2 <TIMER0_countMilliSeconds_overflow+0xea>
    34b0:	8a 81       	ldd	r24, Y+2	; 0x02
    34b2:	88 23       	and	r24, r24
    34b4:	79 f4       	brne	.+30     	; 0x34d4 <TIMER0_countMilliSeconds_overflow+0xfc>
    34b6:	8a 81       	ldd	r24, Y+2	; 0x02
    34b8:	88 23       	and	r24, r24
    34ba:	19 f4       	brne	.+6      	; 0x34c2 <TIMER0_countMilliSeconds_overflow+0xea>
    34bc:	89 81       	ldd	r24, Y+1	; 0x01
    34be:	8f 3f       	cpi	r24, 0xFF	; 255
    34c0:	48 f4       	brcc	.+18     	; 0x34d4 <TIMER0_countMilliSeconds_overflow+0xfc>
	{
		TCNT0=255-num_of_ticks;
    34c2:	e2 e5       	ldi	r30, 0x52	; 82
    34c4:	f0 e0       	ldi	r31, 0x00	; 0
    34c6:	89 81       	ldd	r24, Y+1	; 0x01
    34c8:	80 95       	com	r24
    34ca:	80 83       	st	Z, r24
		num_of_calls_needed=1;
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	80 93 72 01 	sts	0x0172, r24
    34d2:	31 c0       	rjmp	.+98     	; 0x3536 <TIMER0_countMilliSeconds_overflow+0x15e>
	}
	else
	{
		TCNT0=0;
    34d4:	e2 e5       	ldi	r30, 0x52	; 82
    34d6:	f0 e0       	ldi	r31, 0x00	; 0
    34d8:	10 82       	st	Z, r1
		num_of_calls_needed=num_of_ticks/255;
    34da:	a9 80       	ldd	r10, Y+1	; 0x01
    34dc:	ba 80       	ldd	r11, Y+2	; 0x02
    34de:	cb 80       	ldd	r12, Y+3	; 0x03
    34e0:	dc 80       	ldd	r13, Y+4	; 0x04
    34e2:	ed 80       	ldd	r14, Y+5	; 0x05
    34e4:	fe 80       	ldd	r15, Y+6	; 0x06
    34e6:	0f 81       	ldd	r16, Y+7	; 0x07
    34e8:	18 85       	ldd	r17, Y+8	; 0x08
    34ea:	2a 2d       	mov	r18, r10
    34ec:	3b 2d       	mov	r19, r11
    34ee:	4c 2d       	mov	r20, r12
    34f0:	5d 2d       	mov	r21, r13
    34f2:	6e 2d       	mov	r22, r14
    34f4:	7f 2d       	mov	r23, r15
    34f6:	80 2f       	mov	r24, r16
    34f8:	91 2f       	mov	r25, r17
    34fa:	aa 24       	eor	r10, r10
    34fc:	aa 94       	dec	r10
    34fe:	bb 24       	eor	r11, r11
    3500:	cc 24       	eor	r12, r12
    3502:	dd 24       	eor	r13, r13
    3504:	ee 24       	eor	r14, r14
    3506:	ff 24       	eor	r15, r15
    3508:	00 e0       	ldi	r16, 0x00	; 0
    350a:	10 e0       	ldi	r17, 0x00	; 0
    350c:	0e 94 75 00 	call	0xea	; 0xea <__udivdi3>
    3510:	a2 2e       	mov	r10, r18
    3512:	b3 2e       	mov	r11, r19
    3514:	c4 2e       	mov	r12, r20
    3516:	d5 2e       	mov	r13, r21
    3518:	e6 2e       	mov	r14, r22
    351a:	f7 2e       	mov	r15, r23
    351c:	08 2f       	mov	r16, r24
    351e:	19 2f       	mov	r17, r25
    3520:	2a 2d       	mov	r18, r10
    3522:	3b 2d       	mov	r19, r11
    3524:	4c 2d       	mov	r20, r12
    3526:	5d 2d       	mov	r21, r13
    3528:	6e 2d       	mov	r22, r14
    352a:	7f 2d       	mov	r23, r15
    352c:	80 2f       	mov	r24, r16
    352e:	91 2f       	mov	r25, r17
    3530:	82 2f       	mov	r24, r18
    3532:	80 93 72 01 	sts	0x0172, r24

	}
	switch(prescaler)
    3536:	8b 85       	ldd	r24, Y+11	; 0x0b
    3538:	9c 85       	ldd	r25, Y+12	; 0x0c
    353a:	9e 87       	std	Y+14, r25	; 0x0e
    353c:	8d 87       	std	Y+13, r24	; 0x0d
    353e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3540:	9e 85       	ldd	r25, Y+14	; 0x0e
    3542:	88 30       	cpi	r24, 0x08	; 8
    3544:	91 05       	cpc	r25, r1
    3546:	09 f4       	brne	.+2      	; 0x354a <TIMER0_countMilliSeconds_overflow+0x172>
    3548:	3d c0       	rjmp	.+122    	; 0x35c4 <TIMER0_countMilliSeconds_overflow+0x1ec>
    354a:	8d 85       	ldd	r24, Y+13	; 0x0d
    354c:	9e 85       	ldd	r25, Y+14	; 0x0e
    354e:	89 30       	cpi	r24, 0x09	; 9
    3550:	91 05       	cpc	r25, r1
    3552:	58 f4       	brcc	.+22     	; 0x356a <TIMER0_countMilliSeconds_overflow+0x192>
    3554:	8d 85       	ldd	r24, Y+13	; 0x0d
    3556:	9e 85       	ldd	r25, Y+14	; 0x0e
    3558:	00 97       	sbiw	r24, 0x00	; 0
    355a:	09 f4       	brne	.+2      	; 0x355e <TIMER0_countMilliSeconds_overflow+0x186>
    355c:	45 c0       	rjmp	.+138    	; 0x35e8 <TIMER0_countMilliSeconds_overflow+0x210>
    355e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3560:	9e 85       	ldd	r25, Y+14	; 0x0e
    3562:	81 30       	cpi	r24, 0x01	; 1
    3564:	91 05       	cpc	r25, r1
    3566:	b9 f1       	breq	.+110    	; 0x35d6 <TIMER0_countMilliSeconds_overflow+0x1fe>
    3568:	46 c0       	rjmp	.+140    	; 0x35f6 <TIMER0_countMilliSeconds_overflow+0x21e>
    356a:	8d 85       	ldd	r24, Y+13	; 0x0d
    356c:	9e 85       	ldd	r25, Y+14	; 0x0e
    356e:	21 e0       	ldi	r18, 0x01	; 1
    3570:	80 30       	cpi	r24, 0x00	; 0
    3572:	92 07       	cpc	r25, r18
    3574:	a9 f0       	breq	.+42     	; 0x35a0 <TIMER0_countMilliSeconds_overflow+0x1c8>
    3576:	8d 85       	ldd	r24, Y+13	; 0x0d
    3578:	9e 85       	ldd	r25, Y+14	; 0x0e
    357a:	24 e0       	ldi	r18, 0x04	; 4
    357c:	80 30       	cpi	r24, 0x00	; 0
    357e:	92 07       	cpc	r25, r18
    3580:	31 f0       	breq	.+12     	; 0x358e <TIMER0_countMilliSeconds_overflow+0x1b6>
    3582:	8d 85       	ldd	r24, Y+13	; 0x0d
    3584:	9e 85       	ldd	r25, Y+14	; 0x0e
    3586:	80 34       	cpi	r24, 0x40	; 64
    3588:	91 05       	cpc	r25, r1
    358a:	99 f0       	breq	.+38     	; 0x35b2 <TIMER0_countMilliSeconds_overflow+0x1da>
    358c:	34 c0       	rjmp	.+104    	; 0x35f6 <TIMER0_countMilliSeconds_overflow+0x21e>
	{
	case FCPU_1024:
		TCCR0=(TCCR0&0xF8)|(SYS_1024);
    358e:	a3 e5       	ldi	r26, 0x53	; 83
    3590:	b0 e0       	ldi	r27, 0x00	; 0
    3592:	e3 e5       	ldi	r30, 0x53	; 83
    3594:	f0 e0       	ldi	r31, 0x00	; 0
    3596:	80 81       	ld	r24, Z
    3598:	88 7f       	andi	r24, 0xF8	; 248
    359a:	85 60       	ori	r24, 0x05	; 5
    359c:	8c 93       	st	X, r24
    359e:	2b c0       	rjmp	.+86     	; 0x35f6 <TIMER0_countMilliSeconds_overflow+0x21e>
		break;
	case FCPU_256:
		TCCR0=(TCCR0&0xF8)|(SYS_256);
    35a0:	a3 e5       	ldi	r26, 0x53	; 83
    35a2:	b0 e0       	ldi	r27, 0x00	; 0
    35a4:	e3 e5       	ldi	r30, 0x53	; 83
    35a6:	f0 e0       	ldi	r31, 0x00	; 0
    35a8:	80 81       	ld	r24, Z
    35aa:	88 7f       	andi	r24, 0xF8	; 248
    35ac:	84 60       	ori	r24, 0x04	; 4
    35ae:	8c 93       	st	X, r24
    35b0:	22 c0       	rjmp	.+68     	; 0x35f6 <TIMER0_countMilliSeconds_overflow+0x21e>
		break;
	case FCPU_64:
		TCCR0=(TCCR0&0xF8)|(SYS_64);
    35b2:	a3 e5       	ldi	r26, 0x53	; 83
    35b4:	b0 e0       	ldi	r27, 0x00	; 0
    35b6:	e3 e5       	ldi	r30, 0x53	; 83
    35b8:	f0 e0       	ldi	r31, 0x00	; 0
    35ba:	80 81       	ld	r24, Z
    35bc:	88 7f       	andi	r24, 0xF8	; 248
    35be:	83 60       	ori	r24, 0x03	; 3
    35c0:	8c 93       	st	X, r24
    35c2:	19 c0       	rjmp	.+50     	; 0x35f6 <TIMER0_countMilliSeconds_overflow+0x21e>
		break;
	case FCPU_8:
		TCCR0=(TCCR0&0xF8)|(SYS_8);
    35c4:	a3 e5       	ldi	r26, 0x53	; 83
    35c6:	b0 e0       	ldi	r27, 0x00	; 0
    35c8:	e3 e5       	ldi	r30, 0x53	; 83
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	80 81       	ld	r24, Z
    35ce:	88 7f       	andi	r24, 0xF8	; 248
    35d0:	82 60       	ori	r24, 0x02	; 2
    35d2:	8c 93       	st	X, r24
    35d4:	10 c0       	rjmp	.+32     	; 0x35f6 <TIMER0_countMilliSeconds_overflow+0x21e>
		break;
	case FCPU_CLK:
		TCCR0=(TCCR0&0xF8)|(SYS_CLK);
    35d6:	a3 e5       	ldi	r26, 0x53	; 83
    35d8:	b0 e0       	ldi	r27, 0x00	; 0
    35da:	e3 e5       	ldi	r30, 0x53	; 83
    35dc:	f0 e0       	ldi	r31, 0x00	; 0
    35de:	80 81       	ld	r24, Z
    35e0:	88 7f       	andi	r24, 0xF8	; 248
    35e2:	81 60       	ori	r24, 0x01	; 1
    35e4:	8c 93       	st	X, r24
    35e6:	07 c0       	rjmp	.+14     	; 0x35f6 <TIMER0_countMilliSeconds_overflow+0x21e>
		break;
	case	NO_CLK:
		TCCR0=(TCCR0&0xF8)|(NO_CLK);
    35e8:	a3 e5       	ldi	r26, 0x53	; 83
    35ea:	b0 e0       	ldi	r27, 0x00	; 0
    35ec:	e3 e5       	ldi	r30, 0x53	; 83
    35ee:	f0 e0       	ldi	r31, 0x00	; 0
    35f0:	80 81       	ld	r24, Z
    35f2:	88 7f       	andi	r24, 0xF8	; 248
    35f4:	8c 93       	st	X, r24
		break;
	}


}
    35f6:	2e 96       	adiw	r28, 0x0e	; 14
    35f8:	0f b6       	in	r0, 0x3f	; 63
    35fa:	f8 94       	cli
    35fc:	de bf       	out	0x3e, r29	; 62
    35fe:	0f be       	out	0x3f, r0	; 63
    3600:	cd bf       	out	0x3d, r28	; 61
    3602:	cf 91       	pop	r28
    3604:	df 91       	pop	r29
    3606:	1f 91       	pop	r17
    3608:	0f 91       	pop	r16
    360a:	ff 90       	pop	r15
    360c:	ef 90       	pop	r14
    360e:	df 90       	pop	r13
    3610:	cf 90       	pop	r12
    3612:	bf 90       	pop	r11
    3614:	af 90       	pop	r10
    3616:	08 95       	ret

00003618 <TIMER0_countMilliSeconds_ctc>:
void TIMER0_countMilliSeconds_ctc(uint16 ms,uint16 prescaler)
{
    3618:	af 92       	push	r10
    361a:	bf 92       	push	r11
    361c:	cf 92       	push	r12
    361e:	df 92       	push	r13
    3620:	ef 92       	push	r14
    3622:	ff 92       	push	r15
    3624:	0f 93       	push	r16
    3626:	1f 93       	push	r17
    3628:	df 93       	push	r29
    362a:	cf 93       	push	r28
    362c:	cd b7       	in	r28, 0x3d	; 61
    362e:	de b7       	in	r29, 0x3e	; 62
    3630:	2f 97       	sbiw	r28, 0x0f	; 15
    3632:	0f b6       	in	r0, 0x3f	; 63
    3634:	f8 94       	cli
    3636:	de bf       	out	0x3e, r29	; 62
    3638:	0f be       	out	0x3f, r0	; 63
    363a:	cd bf       	out	0x3d, r28	; 61
    363c:	9a 87       	std	Y+10, r25	; 0x0a
    363e:	89 87       	std	Y+9, r24	; 0x09
    3640:	7c 87       	std	Y+12, r23	; 0x0c
    3642:	6b 87       	std	Y+11, r22	; 0x0b

		uint64 num_of_ticks;
		num_of_ticks=(ms*(F_CPUU/1000))/(prescaler);
    3644:	89 85       	ldd	r24, Y+9	; 0x09
    3646:	9a 85       	ldd	r25, Y+10	; 0x0a
    3648:	cc 01       	movw	r24, r24
    364a:	a0 e0       	ldi	r26, 0x00	; 0
    364c:	b0 e0       	ldi	r27, 0x00	; 0
    364e:	20 e4       	ldi	r18, 0x40	; 64
    3650:	3f e1       	ldi	r19, 0x1F	; 31
    3652:	40 e0       	ldi	r20, 0x00	; 0
    3654:	50 e0       	ldi	r21, 0x00	; 0
    3656:	bc 01       	movw	r22, r24
    3658:	cd 01       	movw	r24, r26
    365a:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__mulsi3>
    365e:	7b 01       	movw	r14, r22
    3660:	8c 01       	movw	r16, r24
    3662:	8b 85       	ldd	r24, Y+11	; 0x0b
    3664:	9c 85       	ldd	r25, Y+12	; 0x0c
    3666:	9c 01       	movw	r18, r24
    3668:	40 e0       	ldi	r20, 0x00	; 0
    366a:	50 e0       	ldi	r21, 0x00	; 0
    366c:	c8 01       	movw	r24, r16
    366e:	b7 01       	movw	r22, r14
    3670:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__divmodsi4>
    3674:	da 01       	movw	r26, r20
    3676:	c9 01       	movw	r24, r18
    3678:	89 83       	std	Y+1, r24	; 0x01
    367a:	9a 83       	std	Y+2, r25	; 0x02
    367c:	ab 83       	std	Y+3, r26	; 0x03
    367e:	bc 83       	std	Y+4, r27	; 0x04
    3680:	bb 0f       	add	r27, r27
    3682:	88 0b       	sbc	r24, r24
    3684:	98 2f       	mov	r25, r24
    3686:	dc 01       	movw	r26, r24
    3688:	8d 83       	std	Y+5, r24	; 0x05
    368a:	8e 83       	std	Y+6, r24	; 0x06
    368c:	8f 83       	std	Y+7, r24	; 0x07
    368e:	88 87       	std	Y+8, r24	; 0x08
		if (num_of_ticks<=255)
    3690:	88 85       	ldd	r24, Y+8	; 0x08
    3692:	88 23       	and	r24, r24
    3694:	81 f5       	brne	.+96     	; 0x36f6 <TIMER0_countMilliSeconds_ctc+0xde>
    3696:	88 85       	ldd	r24, Y+8	; 0x08
    3698:	88 23       	and	r24, r24
    369a:	11 f5       	brne	.+68     	; 0x36e0 <TIMER0_countMilliSeconds_ctc+0xc8>
    369c:	8f 81       	ldd	r24, Y+7	; 0x07
    369e:	88 23       	and	r24, r24
    36a0:	51 f5       	brne	.+84     	; 0x36f6 <TIMER0_countMilliSeconds_ctc+0xde>
    36a2:	8f 81       	ldd	r24, Y+7	; 0x07
    36a4:	88 23       	and	r24, r24
    36a6:	e1 f4       	brne	.+56     	; 0x36e0 <TIMER0_countMilliSeconds_ctc+0xc8>
    36a8:	8e 81       	ldd	r24, Y+6	; 0x06
    36aa:	88 23       	and	r24, r24
    36ac:	21 f5       	brne	.+72     	; 0x36f6 <TIMER0_countMilliSeconds_ctc+0xde>
    36ae:	8e 81       	ldd	r24, Y+6	; 0x06
    36b0:	88 23       	and	r24, r24
    36b2:	b1 f4       	brne	.+44     	; 0x36e0 <TIMER0_countMilliSeconds_ctc+0xc8>
    36b4:	8d 81       	ldd	r24, Y+5	; 0x05
    36b6:	88 23       	and	r24, r24
    36b8:	f1 f4       	brne	.+60     	; 0x36f6 <TIMER0_countMilliSeconds_ctc+0xde>
    36ba:	8d 81       	ldd	r24, Y+5	; 0x05
    36bc:	88 23       	and	r24, r24
    36be:	81 f4       	brne	.+32     	; 0x36e0 <TIMER0_countMilliSeconds_ctc+0xc8>
    36c0:	8c 81       	ldd	r24, Y+4	; 0x04
    36c2:	88 23       	and	r24, r24
    36c4:	c1 f4       	brne	.+48     	; 0x36f6 <TIMER0_countMilliSeconds_ctc+0xde>
    36c6:	8c 81       	ldd	r24, Y+4	; 0x04
    36c8:	88 23       	and	r24, r24
    36ca:	51 f4       	brne	.+20     	; 0x36e0 <TIMER0_countMilliSeconds_ctc+0xc8>
    36cc:	8b 81       	ldd	r24, Y+3	; 0x03
    36ce:	88 23       	and	r24, r24
    36d0:	91 f4       	brne	.+36     	; 0x36f6 <TIMER0_countMilliSeconds_ctc+0xde>
    36d2:	8b 81       	ldd	r24, Y+3	; 0x03
    36d4:	88 23       	and	r24, r24
    36d6:	21 f4       	brne	.+8      	; 0x36e0 <TIMER0_countMilliSeconds_ctc+0xc8>
    36d8:	8a 81       	ldd	r24, Y+2	; 0x02
    36da:	88 23       	and	r24, r24
    36dc:	61 f4       	brne	.+24     	; 0x36f6 <TIMER0_countMilliSeconds_ctc+0xde>
    36de:	2a 81       	ldd	r18, Y+2	; 0x02
		{
			TCNT0=0;
    36e0:	e2 e5       	ldi	r30, 0x52	; 82
    36e2:	f0 e0       	ldi	r31, 0x00	; 0
    36e4:	10 82       	st	Z, r1
			OCR0=num_of_ticks;
    36e6:	ec e5       	ldi	r30, 0x5C	; 92
    36e8:	f0 e0       	ldi	r31, 0x00	; 0
    36ea:	89 81       	ldd	r24, Y+1	; 0x01
    36ec:	80 83       	st	Z, r24
			num_of_calls_needed=1;
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	80 93 72 01 	sts	0x0172, r24
    36f4:	35 c0       	rjmp	.+106    	; 0x3760 <TIMER0_countMilliSeconds_ctc+0x148>
		}
		else
		{
			TCNT0=0;
    36f6:	e2 e5       	ldi	r30, 0x52	; 82
    36f8:	f0 e0       	ldi	r31, 0x00	; 0
    36fa:	10 82       	st	Z, r1
			OCR0=255;
    36fc:	ec e5       	ldi	r30, 0x5C	; 92
    36fe:	f0 e0       	ldi	r31, 0x00	; 0
    3700:	8f ef       	ldi	r24, 0xFF	; 255
    3702:	80 83       	st	Z, r24
			num_of_calls_needed=(num_of_ticks/255);
    3704:	a9 80       	ldd	r10, Y+1	; 0x01
    3706:	ba 80       	ldd	r11, Y+2	; 0x02
    3708:	cb 80       	ldd	r12, Y+3	; 0x03
    370a:	dc 80       	ldd	r13, Y+4	; 0x04
    370c:	ed 80       	ldd	r14, Y+5	; 0x05
    370e:	fe 80       	ldd	r15, Y+6	; 0x06
    3710:	0f 81       	ldd	r16, Y+7	; 0x07
    3712:	18 85       	ldd	r17, Y+8	; 0x08
    3714:	2a 2d       	mov	r18, r10
    3716:	3b 2d       	mov	r19, r11
    3718:	4c 2d       	mov	r20, r12
    371a:	5d 2d       	mov	r21, r13
    371c:	6e 2d       	mov	r22, r14
    371e:	7f 2d       	mov	r23, r15
    3720:	80 2f       	mov	r24, r16
    3722:	91 2f       	mov	r25, r17
    3724:	aa 24       	eor	r10, r10
    3726:	aa 94       	dec	r10
    3728:	bb 24       	eor	r11, r11
    372a:	cc 24       	eor	r12, r12
    372c:	dd 24       	eor	r13, r13
    372e:	ee 24       	eor	r14, r14
    3730:	ff 24       	eor	r15, r15
    3732:	00 e0       	ldi	r16, 0x00	; 0
    3734:	10 e0       	ldi	r17, 0x00	; 0
    3736:	0e 94 75 00 	call	0xea	; 0xea <__udivdi3>
    373a:	a2 2e       	mov	r10, r18
    373c:	b3 2e       	mov	r11, r19
    373e:	c4 2e       	mov	r12, r20
    3740:	d5 2e       	mov	r13, r21
    3742:	e6 2e       	mov	r14, r22
    3744:	f7 2e       	mov	r15, r23
    3746:	08 2f       	mov	r16, r24
    3748:	19 2f       	mov	r17, r25
    374a:	2a 2d       	mov	r18, r10
    374c:	3b 2d       	mov	r19, r11
    374e:	4c 2d       	mov	r20, r12
    3750:	5d 2d       	mov	r21, r13
    3752:	6e 2d       	mov	r22, r14
    3754:	7f 2d       	mov	r23, r15
    3756:	80 2f       	mov	r24, r16
    3758:	91 2f       	mov	r25, r17
    375a:	82 2f       	mov	r24, r18
    375c:	80 93 72 01 	sts	0x0172, r24
		}
		switch(prescaler)
    3760:	8b 85       	ldd	r24, Y+11	; 0x0b
    3762:	9c 85       	ldd	r25, Y+12	; 0x0c
    3764:	9f 87       	std	Y+15, r25	; 0x0f
    3766:	8e 87       	std	Y+14, r24	; 0x0e
    3768:	8e 85       	ldd	r24, Y+14	; 0x0e
    376a:	9f 85       	ldd	r25, Y+15	; 0x0f
    376c:	88 30       	cpi	r24, 0x08	; 8
    376e:	91 05       	cpc	r25, r1
    3770:	09 f4       	brne	.+2      	; 0x3774 <TIMER0_countMilliSeconds_ctc+0x15c>
    3772:	3d c0       	rjmp	.+122    	; 0x37ee <TIMER0_countMilliSeconds_ctc+0x1d6>
    3774:	8e 85       	ldd	r24, Y+14	; 0x0e
    3776:	9f 85       	ldd	r25, Y+15	; 0x0f
    3778:	89 30       	cpi	r24, 0x09	; 9
    377a:	91 05       	cpc	r25, r1
    377c:	58 f4       	brcc	.+22     	; 0x3794 <TIMER0_countMilliSeconds_ctc+0x17c>
    377e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3780:	9f 85       	ldd	r25, Y+15	; 0x0f
    3782:	00 97       	sbiw	r24, 0x00	; 0
    3784:	09 f4       	brne	.+2      	; 0x3788 <TIMER0_countMilliSeconds_ctc+0x170>
    3786:	45 c0       	rjmp	.+138    	; 0x3812 <TIMER0_countMilliSeconds_ctc+0x1fa>
    3788:	8e 85       	ldd	r24, Y+14	; 0x0e
    378a:	9f 85       	ldd	r25, Y+15	; 0x0f
    378c:	81 30       	cpi	r24, 0x01	; 1
    378e:	91 05       	cpc	r25, r1
    3790:	b9 f1       	breq	.+110    	; 0x3800 <TIMER0_countMilliSeconds_ctc+0x1e8>
    3792:	46 c0       	rjmp	.+140    	; 0x3820 <TIMER0_countMilliSeconds_ctc+0x208>
    3794:	8e 85       	ldd	r24, Y+14	; 0x0e
    3796:	9f 85       	ldd	r25, Y+15	; 0x0f
    3798:	21 e0       	ldi	r18, 0x01	; 1
    379a:	80 30       	cpi	r24, 0x00	; 0
    379c:	92 07       	cpc	r25, r18
    379e:	a9 f0       	breq	.+42     	; 0x37ca <TIMER0_countMilliSeconds_ctc+0x1b2>
    37a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    37a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    37a4:	24 e0       	ldi	r18, 0x04	; 4
    37a6:	80 30       	cpi	r24, 0x00	; 0
    37a8:	92 07       	cpc	r25, r18
    37aa:	31 f0       	breq	.+12     	; 0x37b8 <TIMER0_countMilliSeconds_ctc+0x1a0>
    37ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    37ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    37b0:	80 34       	cpi	r24, 0x40	; 64
    37b2:	91 05       	cpc	r25, r1
    37b4:	99 f0       	breq	.+38     	; 0x37dc <TIMER0_countMilliSeconds_ctc+0x1c4>
    37b6:	34 c0       	rjmp	.+104    	; 0x3820 <TIMER0_countMilliSeconds_ctc+0x208>
			{
			case FCPU_1024:
				TCCR0=(TCCR0&0xF8)|(SYS_1024);
    37b8:	a3 e5       	ldi	r26, 0x53	; 83
    37ba:	b0 e0       	ldi	r27, 0x00	; 0
    37bc:	e3 e5       	ldi	r30, 0x53	; 83
    37be:	f0 e0       	ldi	r31, 0x00	; 0
    37c0:	80 81       	ld	r24, Z
    37c2:	88 7f       	andi	r24, 0xF8	; 248
    37c4:	85 60       	ori	r24, 0x05	; 5
    37c6:	8c 93       	st	X, r24
    37c8:	2b c0       	rjmp	.+86     	; 0x3820 <TIMER0_countMilliSeconds_ctc+0x208>
				break;
			case FCPU_256:
				TCCR0=(TCCR0&0xF8)|(SYS_256);
    37ca:	a3 e5       	ldi	r26, 0x53	; 83
    37cc:	b0 e0       	ldi	r27, 0x00	; 0
    37ce:	e3 e5       	ldi	r30, 0x53	; 83
    37d0:	f0 e0       	ldi	r31, 0x00	; 0
    37d2:	80 81       	ld	r24, Z
    37d4:	88 7f       	andi	r24, 0xF8	; 248
    37d6:	84 60       	ori	r24, 0x04	; 4
    37d8:	8c 93       	st	X, r24
    37da:	22 c0       	rjmp	.+68     	; 0x3820 <TIMER0_countMilliSeconds_ctc+0x208>
				break;
			case FCPU_64:
				TCCR0=(TCCR0&0xF8)|(SYS_64);
    37dc:	a3 e5       	ldi	r26, 0x53	; 83
    37de:	b0 e0       	ldi	r27, 0x00	; 0
    37e0:	e3 e5       	ldi	r30, 0x53	; 83
    37e2:	f0 e0       	ldi	r31, 0x00	; 0
    37e4:	80 81       	ld	r24, Z
    37e6:	88 7f       	andi	r24, 0xF8	; 248
    37e8:	83 60       	ori	r24, 0x03	; 3
    37ea:	8c 93       	st	X, r24
    37ec:	19 c0       	rjmp	.+50     	; 0x3820 <TIMER0_countMilliSeconds_ctc+0x208>
				break;
			case FCPU_8:
				TCCR0=(TCCR0&0xF8)|(SYS_8);
    37ee:	a3 e5       	ldi	r26, 0x53	; 83
    37f0:	b0 e0       	ldi	r27, 0x00	; 0
    37f2:	e3 e5       	ldi	r30, 0x53	; 83
    37f4:	f0 e0       	ldi	r31, 0x00	; 0
    37f6:	80 81       	ld	r24, Z
    37f8:	88 7f       	andi	r24, 0xF8	; 248
    37fa:	82 60       	ori	r24, 0x02	; 2
    37fc:	8c 93       	st	X, r24
    37fe:	10 c0       	rjmp	.+32     	; 0x3820 <TIMER0_countMilliSeconds_ctc+0x208>
				break;
			case FCPU_CLK:
				TCCR0=(TCCR0&0xF8)|(SYS_CLK);
    3800:	a3 e5       	ldi	r26, 0x53	; 83
    3802:	b0 e0       	ldi	r27, 0x00	; 0
    3804:	e3 e5       	ldi	r30, 0x53	; 83
    3806:	f0 e0       	ldi	r31, 0x00	; 0
    3808:	80 81       	ld	r24, Z
    380a:	88 7f       	andi	r24, 0xF8	; 248
    380c:	81 60       	ori	r24, 0x01	; 1
    380e:	8c 93       	st	X, r24
    3810:	07 c0       	rjmp	.+14     	; 0x3820 <TIMER0_countMilliSeconds_ctc+0x208>
				break;
			case	NO_CLK:
				TCCR0=(TCCR0&0xF8)|(NO_CLK);
    3812:	a3 e5       	ldi	r26, 0x53	; 83
    3814:	b0 e0       	ldi	r27, 0x00	; 0
    3816:	e3 e5       	ldi	r30, 0x53	; 83
    3818:	f0 e0       	ldi	r31, 0x00	; 0
    381a:	80 81       	ld	r24, Z
    381c:	88 7f       	andi	r24, 0xF8	; 248
    381e:	8c 93       	st	X, r24
				break;

			}

}
    3820:	2f 96       	adiw	r28, 0x0f	; 15
    3822:	0f b6       	in	r0, 0x3f	; 63
    3824:	f8 94       	cli
    3826:	de bf       	out	0x3e, r29	; 62
    3828:	0f be       	out	0x3f, r0	; 63
    382a:	cd bf       	out	0x3d, r28	; 61
    382c:	cf 91       	pop	r28
    382e:	df 91       	pop	r29
    3830:	1f 91       	pop	r17
    3832:	0f 91       	pop	r16
    3834:	ff 90       	pop	r15
    3836:	ef 90       	pop	r14
    3838:	df 90       	pop	r13
    383a:	cf 90       	pop	r12
    383c:	bf 90       	pop	r11
    383e:	af 90       	pop	r10
    3840:	08 95       	ret

00003842 <TIMER0_setCallBack>:


void TIMER0_setCallBack(void(*ptr_fun)(void))
{
    3842:	df 93       	push	r29
    3844:	cf 93       	push	r28
    3846:	00 d0       	rcall	.+0      	; 0x3848 <TIMER0_setCallBack+0x6>
    3848:	cd b7       	in	r28, 0x3d	; 61
    384a:	de b7       	in	r29, 0x3e	; 62
    384c:	9a 83       	std	Y+2, r25	; 0x02
    384e:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=ptr_fun;
    3850:	89 81       	ldd	r24, Y+1	; 0x01
    3852:	9a 81       	ldd	r25, Y+2	; 0x02
    3854:	90 93 71 01 	sts	0x0171, r25
    3858:	80 93 70 01 	sts	0x0170, r24
}
    385c:	0f 90       	pop	r0
    385e:	0f 90       	pop	r0
    3860:	cf 91       	pop	r28
    3862:	df 91       	pop	r29
    3864:	08 95       	ret

00003866 <TWI_init>:
#include "common_macros.h"
#include <avr/io.h>


void TWI_init(uint8 configurations)
{
    3866:	df 93       	push	r29
    3868:	cf 93       	push	r28
    386a:	0f 92       	push	r0
    386c:	cd b7       	in	r28, 0x3d	; 61
    386e:	de b7       	in	r29, 0x3e	; 62
    3870:	89 83       	std	Y+1, r24	; 0x01

#if(F_CPUU==8000000)
	if (configurations==BAUD_400Kb)
    3872:	89 81       	ldd	r24, Y+1	; 0x01
    3874:	81 30       	cpi	r24, 0x01	; 1
    3876:	41 f4       	brne	.+16     	; 0x3888 <TWI_init+0x22>
	{
		TWBR=0x02;
    3878:	e0 e2       	ldi	r30, 0x20	; 32
    387a:	f0 e0       	ldi	r31, 0x00	; 0
    387c:	82 e0       	ldi	r24, 0x02	; 2
    387e:	80 83       	st	Z, r24
		TWSR=0x00;
    3880:	e1 e2       	ldi	r30, 0x21	; 33
    3882:	f0 e0       	ldi	r31, 0x00	; 0
    3884:	10 82       	st	Z, r1
    3886:	0a c0       	rjmp	.+20     	; 0x389c <TWI_init+0x36>
	}
	else if(configurations==BAUD_100Kb)
    3888:	89 81       	ldd	r24, Y+1	; 0x01
    388a:	88 23       	and	r24, r24
    388c:	39 f4       	brne	.+14     	; 0x389c <TWI_init+0x36>
	{
		TWBR=32;
    388e:	e0 e2       	ldi	r30, 0x20	; 32
    3890:	f0 e0       	ldi	r31, 0x00	; 0
    3892:	80 e2       	ldi	r24, 0x20	; 32
    3894:	80 83       	st	Z, r24
		TWSR=0;
    3896:	e1 e2       	ldi	r30, 0x21	; 33
    3898:	f0 e0       	ldi	r31, 0x00	; 0
    389a:	10 82       	st	Z, r1
		}


#endif
	
    TWAR = 0b00000010; // my address = 0x01 :)
    389c:	e2 e2       	ldi	r30, 0x22	; 34
    389e:	f0 e0       	ldi	r31, 0x00	; 0
    38a0:	82 e0       	ldi	r24, 0x02	; 2
    38a2:	80 83       	st	Z, r24

    TWCR = (1<<TWEN); /* enable TWI */
    38a4:	e6 e5       	ldi	r30, 0x56	; 86
    38a6:	f0 e0       	ldi	r31, 0x00	; 0
    38a8:	84 e0       	ldi	r24, 0x04	; 4
    38aa:	80 83       	st	Z, r24
}
    38ac:	0f 90       	pop	r0
    38ae:	cf 91       	pop	r28
    38b0:	df 91       	pop	r29
    38b2:	08 95       	ret

000038b4 <TWI_start>:

void TWI_start(void)
{
    38b4:	df 93       	push	r29
    38b6:	cf 93       	push	r28
    38b8:	cd b7       	in	r28, 0x3d	; 61
    38ba:	de b7       	in	r29, 0x3e	; 62
	 /*
		 * Clear the TWINT flag before sending the start bit TWINT=1
		 * send the start bit by TWSTA=1
		 * Enable TWI Module TWEN=1
		 */
	    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    38bc:	e6 e5       	ldi	r30, 0x56	; 86
    38be:	f0 e0       	ldi	r31, 0x00	; 0
    38c0:	84 ea       	ldi	r24, 0xA4	; 164
    38c2:	80 83       	st	Z, r24

	    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	    while(BIT_IS_CLEAR(TWCR,TWINT));
    38c4:	e6 e5       	ldi	r30, 0x56	; 86
    38c6:	f0 e0       	ldi	r31, 0x00	; 0
    38c8:	80 81       	ld	r24, Z
    38ca:	88 23       	and	r24, r24
    38cc:	dc f7       	brge	.-10     	; 0x38c4 <TWI_start+0x10>

}
    38ce:	cf 91       	pop	r28
    38d0:	df 91       	pop	r29
    38d2:	08 95       	ret

000038d4 <TWI_stop>:

void TWI_stop(void)
{
    38d4:	df 93       	push	r29
    38d6:	cf 93       	push	r28
    38d8:	cd b7       	in	r28, 0x3d	; 61
    38da:	de b7       	in	r29, 0x3e	; 62

	 TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    38dc:	e6 e5       	ldi	r30, 0x56	; 86
    38de:	f0 e0       	ldi	r31, 0x00	; 0
    38e0:	84 e9       	ldi	r24, 0x94	; 148
    38e2:	80 83       	st	Z, r24

}
    38e4:	cf 91       	pop	r28
    38e6:	df 91       	pop	r29
    38e8:	08 95       	ret

000038ea <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    38ea:	df 93       	push	r29
    38ec:	cf 93       	push	r28
    38ee:	0f 92       	push	r0
    38f0:	cd b7       	in	r28, 0x3d	; 61
    38f2:	de b7       	in	r29, 0x3e	; 62
    38f4:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
    TWDR = data;
    38f6:	e3 e2       	ldi	r30, 0x23	; 35
    38f8:	f0 e0       	ldi	r31, 0x00	; 0
    38fa:	89 81       	ldd	r24, Y+1	; 0x01
    38fc:	80 83       	st	Z, r24
	    /*
		 * Clear the TWINT flag before sending the data TWINT=1
		 * Enable TWI Module TWEN=1
		 */
	    TWCR = (1 << TWINT) | (1 << TWEN);
    38fe:	e6 e5       	ldi	r30, 0x56	; 86
    3900:	f0 e0       	ldi	r31, 0x00	; 0
    3902:	84 e8       	ldi	r24, 0x84	; 132
    3904:	80 83       	st	Z, r24
	    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	    while(BIT_IS_CLEAR(TWCR,TWINT));
    3906:	e6 e5       	ldi	r30, 0x56	; 86
    3908:	f0 e0       	ldi	r31, 0x00	; 0
    390a:	80 81       	ld	r24, Z
    390c:	88 23       	and	r24, r24
    390e:	dc f7       	brge	.-10     	; 0x3906 <TWI_writeByte+0x1c>
}
    3910:	0f 90       	pop	r0
    3912:	cf 91       	pop	r28
    3914:	df 91       	pop	r29
    3916:	08 95       	ret

00003918 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    3918:	df 93       	push	r29
    391a:	cf 93       	push	r28
    391c:	cd b7       	in	r28, 0x3d	; 61
    391e:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    3920:	e6 e5       	ldi	r30, 0x56	; 86
    3922:	f0 e0       	ldi	r31, 0x00	; 0
    3924:	84 ec       	ldi	r24, 0xC4	; 196
    3926:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    3928:	e6 e5       	ldi	r30, 0x56	; 86
    392a:	f0 e0       	ldi	r31, 0x00	; 0
    392c:	80 81       	ld	r24, Z
    392e:	88 23       	and	r24, r24
    3930:	dc f7       	brge	.-10     	; 0x3928 <TWI_readByteWithACK+0x10>
	/* Read Data */
	return TWDR;
    3932:	e3 e2       	ldi	r30, 0x23	; 35
    3934:	f0 e0       	ldi	r31, 0x00	; 0
    3936:	80 81       	ld	r24, Z

}
    3938:	cf 91       	pop	r28
    393a:	df 91       	pop	r29
    393c:	08 95       	ret

0000393e <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    393e:	df 93       	push	r29
    3940:	cf 93       	push	r28
    3942:	cd b7       	in	r28, 0x3d	; 61
    3944:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWEN);
    3946:	e6 e5       	ldi	r30, 0x56	; 86
    3948:	f0 e0       	ldi	r31, 0x00	; 0
    394a:	84 e8       	ldi	r24, 0x84	; 132
    394c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    394e:	e6 e5       	ldi	r30, 0x56	; 86
    3950:	f0 e0       	ldi	r31, 0x00	; 0
    3952:	80 81       	ld	r24, Z
    3954:	88 23       	and	r24, r24
    3956:	dc f7       	brge	.-10     	; 0x394e <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    3958:	e3 e2       	ldi	r30, 0x23	; 35
    395a:	f0 e0       	ldi	r31, 0x00	; 0
    395c:	80 81       	ld	r24, Z

}
    395e:	cf 91       	pop	r28
    3960:	df 91       	pop	r29
    3962:	08 95       	ret

00003964 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    3964:	df 93       	push	r29
    3966:	cf 93       	push	r28
    3968:	0f 92       	push	r0
    396a:	cd b7       	in	r28, 0x3d	; 61
    396c:	de b7       	in	r29, 0x3e	; 62

    uint8 status;
    status = TWSR & 0xF8;/*getting last 5 bits*/
    396e:	e1 e2       	ldi	r30, 0x21	; 33
    3970:	f0 e0       	ldi	r31, 0x00	; 0
    3972:	80 81       	ld	r24, Z
    3974:	88 7f       	andi	r24, 0xF8	; 248
    3976:	89 83       	std	Y+1, r24	; 0x01
    return status;
    3978:	89 81       	ldd	r24, Y+1	; 0x01
}
    397a:	0f 90       	pop	r0
    397c:	cf 91       	pop	r28
    397e:	df 91       	pop	r29
    3980:	08 95       	ret

00003982 <UART_init>:


uint8 data_received;

void UART_init(UART_ConfigType* configurations)
{
    3982:	df 93       	push	r29
    3984:	cf 93       	push	r28
    3986:	00 d0       	rcall	.+0      	; 0x3988 <UART_init+0x6>
    3988:	00 d0       	rcall	.+0      	; 0x398a <UART_init+0x8>
    398a:	cd b7       	in	r28, 0x3d	; 61
    398c:	de b7       	in	r29, 0x3e	; 62
    398e:	9c 83       	std	Y+4, r25	; 0x04
    3990:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value=0;
    3992:	1a 82       	std	Y+2, r1	; 0x02
    3994:	19 82       	std	Y+1, r1	; 0x01
	SREG=(1<<7);
    3996:	ef e5       	ldi	r30, 0x5F	; 95
    3998:	f0 e0       	ldi	r31, 0x00	; 0
    399a:	80 e8       	ldi	r24, 0x80	; 128
    399c:	80 83       	st	Z, r24
	UCSRA=(1<<U2X);	/*double transmission speed*/
    399e:	eb e2       	ldi	r30, 0x2B	; 43
    39a0:	f0 e0       	ldi	r31, 0x00	; 0
    39a2:	82 e0       	ldi	r24, 0x02	; 2
    39a4:	80 83       	st	Z, r24
	/*RXCIE -->when receiving a byte is complete an interrupt happens that return the byte
	 * RXEN--->receiver enable
	 * TXEN---> transmitter enable
	 * */
	UCSRB|=(1<<receiver_enable)|(1<<transmitter_enable);
    39a6:	aa e2       	ldi	r26, 0x2A	; 42
    39a8:	b0 e0       	ldi	r27, 0x00	; 0
    39aa:	ea e2       	ldi	r30, 0x2A	; 42
    39ac:	f0 e0       	ldi	r31, 0x00	; 0
    39ae:	80 81       	ld	r24, Z
    39b0:	88 61       	ori	r24, 0x18	; 24
    39b2:	8c 93       	st	X, r24
	/*
	 * this sets the character size of the data
	 * */
	UCSRC=(1<<URSEL)|((configurations->ch_size)<<UCSZ0)|((configurations->parity_type)<<UPM0);
    39b4:	a0 e4       	ldi	r26, 0x40	; 64
    39b6:	b0 e0       	ldi	r27, 0x00	; 0
    39b8:	eb 81       	ldd	r30, Y+3	; 0x03
    39ba:	fc 81       	ldd	r31, Y+4	; 0x04
    39bc:	83 81       	ldd	r24, Z+3	; 0x03
    39be:	88 2f       	mov	r24, r24
    39c0:	90 e0       	ldi	r25, 0x00	; 0
    39c2:	88 0f       	add	r24, r24
    39c4:	99 1f       	adc	r25, r25
    39c6:	28 2f       	mov	r18, r24
    39c8:	20 68       	ori	r18, 0x80	; 128
    39ca:	eb 81       	ldd	r30, Y+3	; 0x03
    39cc:	fc 81       	ldd	r31, Y+4	; 0x04
    39ce:	82 81       	ldd	r24, Z+2	; 0x02
    39d0:	88 2f       	mov	r24, r24
    39d2:	90 e0       	ldi	r25, 0x00	; 0
    39d4:	82 95       	swap	r24
    39d6:	92 95       	swap	r25
    39d8:	90 7f       	andi	r25, 0xF0	; 240
    39da:	98 27       	eor	r25, r24
    39dc:	80 7f       	andi	r24, 0xF0	; 240
    39de:	98 27       	eor	r25, r24
    39e0:	82 2b       	or	r24, r18
    39e2:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((configurations->baud_rate) * 8UL))) - 1);
    39e4:	eb 81       	ldd	r30, Y+3	; 0x03
    39e6:	fc 81       	ldd	r31, Y+4	; 0x04
    39e8:	80 81       	ld	r24, Z
    39ea:	91 81       	ldd	r25, Z+1	; 0x01
    39ec:	cc 01       	movw	r24, r24
    39ee:	a0 e0       	ldi	r26, 0x00	; 0
    39f0:	b0 e0       	ldi	r27, 0x00	; 0
    39f2:	88 0f       	add	r24, r24
    39f4:	99 1f       	adc	r25, r25
    39f6:	aa 1f       	adc	r26, r26
    39f8:	bb 1f       	adc	r27, r27
    39fa:	88 0f       	add	r24, r24
    39fc:	99 1f       	adc	r25, r25
    39fe:	aa 1f       	adc	r26, r26
    3a00:	bb 1f       	adc	r27, r27
    3a02:	88 0f       	add	r24, r24
    3a04:	99 1f       	adc	r25, r25
    3a06:	aa 1f       	adc	r26, r26
    3a08:	bb 1f       	adc	r27, r27
    3a0a:	9c 01       	movw	r18, r24
    3a0c:	ad 01       	movw	r20, r26
    3a0e:	80 e0       	ldi	r24, 0x00	; 0
    3a10:	92 e1       	ldi	r25, 0x12	; 18
    3a12:	aa e7       	ldi	r26, 0x7A	; 122
    3a14:	b0 e0       	ldi	r27, 0x00	; 0
    3a16:	bc 01       	movw	r22, r24
    3a18:	cd 01       	movw	r24, r26
    3a1a:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    3a1e:	da 01       	movw	r26, r20
    3a20:	c9 01       	movw	r24, r18
    3a22:	01 97       	sbiw	r24, 0x01	; 1
    3a24:	9a 83       	std	Y+2, r25	; 0x02
    3a26:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3a28:	e0 e4       	ldi	r30, 0x40	; 64
    3a2a:	f0 e0       	ldi	r31, 0x00	; 0
    3a2c:	89 81       	ldd	r24, Y+1	; 0x01
    3a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a30:	89 2f       	mov	r24, r25
    3a32:	99 27       	eor	r25, r25
    3a34:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3a36:	e9 e2       	ldi	r30, 0x29	; 41
    3a38:	f0 e0       	ldi	r31, 0x00	; 0
    3a3a:	89 81       	ldd	r24, Y+1	; 0x01
    3a3c:	80 83       	st	Z, r24



}
    3a3e:	0f 90       	pop	r0
    3a40:	0f 90       	pop	r0
    3a42:	0f 90       	pop	r0
    3a44:	0f 90       	pop	r0
    3a46:	cf 91       	pop	r28
    3a48:	df 91       	pop	r29
    3a4a:	08 95       	ret

00003a4c <UART_sendByte>:

void UART_sendByte(uint8 data)
{
    3a4c:	df 93       	push	r29
    3a4e:	cf 93       	push	r28
    3a50:	0f 92       	push	r0
    3a52:	cd b7       	in	r28, 0x3d	; 61
    3a54:	de b7       	in	r29, 0x3e	; 62
    3a56:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3a58:	eb e2       	ldi	r30, 0x2B	; 43
    3a5a:	f0 e0       	ldi	r31, 0x00	; 0
    3a5c:	80 81       	ld	r24, Z
    3a5e:	88 2f       	mov	r24, r24
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	80 72       	andi	r24, 0x20	; 32
    3a64:	90 70       	andi	r25, 0x00	; 0
    3a66:	00 97       	sbiw	r24, 0x00	; 0
    3a68:	b9 f3       	breq	.-18     	; 0x3a58 <UART_sendByte+0xc>
	UDR=data;
    3a6a:	ec e2       	ldi	r30, 0x2C	; 44
    3a6c:	f0 e0       	ldi	r31, 0x00	; 0
    3a6e:	89 81       	ldd	r24, Y+1	; 0x01
    3a70:	80 83       	st	Z, r24

}
    3a72:	0f 90       	pop	r0
    3a74:	cf 91       	pop	r28
    3a76:	df 91       	pop	r29
    3a78:	08 95       	ret

00003a7a <UART_receiveByte>:
uint8 UART_receiveByte()
{
    3a7a:	df 93       	push	r29
    3a7c:	cf 93       	push	r28
    3a7e:	cd b7       	in	r28, 0x3d	; 61
    3a80:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3a82:	eb e2       	ldi	r30, 0x2B	; 43
    3a84:	f0 e0       	ldi	r31, 0x00	; 0
    3a86:	80 81       	ld	r24, Z
    3a88:	88 23       	and	r24, r24
    3a8a:	dc f7       	brge	.-10     	; 0x3a82 <UART_receiveByte+0x8>
	return UDR;
    3a8c:	ec e2       	ldi	r30, 0x2C	; 44
    3a8e:	f0 e0       	ldi	r31, 0x00	; 0
    3a90:	80 81       	ld	r24, Z
}
    3a92:	cf 91       	pop	r28
    3a94:	df 91       	pop	r29
    3a96:	08 95       	ret

00003a98 <UART_sendString>:
void UART_sendString(const char*str)
{
    3a98:	df 93       	push	r29
    3a9a:	cf 93       	push	r28
    3a9c:	00 d0       	rcall	.+0      	; 0x3a9e <UART_sendString+0x6>
    3a9e:	0f 92       	push	r0
    3aa0:	cd b7       	in	r28, 0x3d	; 61
    3aa2:	de b7       	in	r29, 0x3e	; 62
    3aa4:	9b 83       	std	Y+3, r25	; 0x03
    3aa6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3aa8:	19 82       	std	Y+1, r1	; 0x01
    3aaa:	0e c0       	rjmp	.+28     	; 0x3ac8 <UART_sendString+0x30>

		/* Send the whole string */
		while(str[i] != '\0')
		{
			UART_sendByte(str[i]);
    3aac:	89 81       	ldd	r24, Y+1	; 0x01
    3aae:	28 2f       	mov	r18, r24
    3ab0:	30 e0       	ldi	r19, 0x00	; 0
    3ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ab6:	fc 01       	movw	r30, r24
    3ab8:	e2 0f       	add	r30, r18
    3aba:	f3 1f       	adc	r31, r19
    3abc:	80 81       	ld	r24, Z
    3abe:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <UART_sendByte>
			i++;
    3ac2:	89 81       	ldd	r24, Y+1	; 0x01
    3ac4:	8f 5f       	subi	r24, 0xFF	; 255
    3ac6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const char*str)
{
	uint8 i = 0;

		/* Send the whole string */
		while(str[i] != '\0')
    3ac8:	89 81       	ldd	r24, Y+1	; 0x01
    3aca:	28 2f       	mov	r18, r24
    3acc:	30 e0       	ldi	r19, 0x00	; 0
    3ace:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ad2:	fc 01       	movw	r30, r24
    3ad4:	e2 0f       	add	r30, r18
    3ad6:	f3 1f       	adc	r31, r19
    3ad8:	80 81       	ld	r24, Z
    3ada:	88 23       	and	r24, r24
    3adc:	39 f7       	brne	.-50     	; 0x3aac <UART_sendString+0x14>
		{
			UART_sendByte(str[i]);
			i++;
		}

}
    3ade:	0f 90       	pop	r0
    3ae0:	0f 90       	pop	r0
    3ae2:	0f 90       	pop	r0
    3ae4:	cf 91       	pop	r28
    3ae6:	df 91       	pop	r29
    3ae8:	08 95       	ret

00003aea <UART_receiveString>:
void UART_receiveString(char *str)
{
    3aea:	0f 93       	push	r16
    3aec:	1f 93       	push	r17
    3aee:	df 93       	push	r29
    3af0:	cf 93       	push	r28
    3af2:	00 d0       	rcall	.+0      	; 0x3af4 <UART_receiveString+0xa>
    3af4:	0f 92       	push	r0
    3af6:	cd b7       	in	r28, 0x3d	; 61
    3af8:	de b7       	in	r29, 0x3e	; 62
    3afa:	9b 83       	std	Y+3, r25	; 0x03
    3afc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    3afe:	19 82       	std	Y+1, r1	; 0x01
	str[i]=UART_receiveByte();
    3b00:	89 81       	ldd	r24, Y+1	; 0x01
    3b02:	28 2f       	mov	r18, r24
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	8a 81       	ldd	r24, Y+2	; 0x02
    3b08:	9b 81       	ldd	r25, Y+3	; 0x03
    3b0a:	8c 01       	movw	r16, r24
    3b0c:	02 0f       	add	r16, r18
    3b0e:	13 1f       	adc	r17, r19
    3b10:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <UART_receiveByte>
    3b14:	f8 01       	movw	r30, r16
    3b16:	80 83       	st	Z, r24
    3b18:	0f c0       	rjmp	.+30     	; 0x3b38 <UART_receiveString+0x4e>
	while(str[i]!=string_stop)
	{
		i++;
    3b1a:	89 81       	ldd	r24, Y+1	; 0x01
    3b1c:	8f 5f       	subi	r24, 0xFF	; 255
    3b1e:	89 83       	std	Y+1, r24	; 0x01
		str[i]=UART_receiveByte();
    3b20:	89 81       	ldd	r24, Y+1	; 0x01
    3b22:	28 2f       	mov	r18, r24
    3b24:	30 e0       	ldi	r19, 0x00	; 0
    3b26:	8a 81       	ldd	r24, Y+2	; 0x02
    3b28:	9b 81       	ldd	r25, Y+3	; 0x03
    3b2a:	8c 01       	movw	r16, r24
    3b2c:	02 0f       	add	r16, r18
    3b2e:	13 1f       	adc	r17, r19
    3b30:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <UART_receiveByte>
    3b34:	f8 01       	movw	r30, r16
    3b36:	80 83       	st	Z, r24
}
void UART_receiveString(char *str)
{
	uint8 i=0;
	str[i]=UART_receiveByte();
	while(str[i]!=string_stop)
    3b38:	89 81       	ldd	r24, Y+1	; 0x01
    3b3a:	28 2f       	mov	r18, r24
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b40:	9b 81       	ldd	r25, Y+3	; 0x03
    3b42:	fc 01       	movw	r30, r24
    3b44:	e2 0f       	add	r30, r18
    3b46:	f3 1f       	adc	r31, r19
    3b48:	80 81       	ld	r24, Z
    3b4a:	83 32       	cpi	r24, 0x23	; 35
    3b4c:	31 f7       	brne	.-52     	; 0x3b1a <UART_receiveString+0x30>
	{
		i++;
		str[i]=UART_receiveByte();
	}
	str[i]='\0';
    3b4e:	89 81       	ldd	r24, Y+1	; 0x01
    3b50:	28 2f       	mov	r18, r24
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	8a 81       	ldd	r24, Y+2	; 0x02
    3b56:	9b 81       	ldd	r25, Y+3	; 0x03
    3b58:	fc 01       	movw	r30, r24
    3b5a:	e2 0f       	add	r30, r18
    3b5c:	f3 1f       	adc	r31, r19
    3b5e:	10 82       	st	Z, r1
}
    3b60:	0f 90       	pop	r0
    3b62:	0f 90       	pop	r0
    3b64:	0f 90       	pop	r0
    3b66:	cf 91       	pop	r28
    3b68:	df 91       	pop	r29
    3b6a:	1f 91       	pop	r17
    3b6c:	0f 91       	pop	r16
    3b6e:	08 95       	ret

00003b70 <__mulsi3>:
    3b70:	62 9f       	mul	r22, r18
    3b72:	d0 01       	movw	r26, r0
    3b74:	73 9f       	mul	r23, r19
    3b76:	f0 01       	movw	r30, r0
    3b78:	82 9f       	mul	r24, r18
    3b7a:	e0 0d       	add	r30, r0
    3b7c:	f1 1d       	adc	r31, r1
    3b7e:	64 9f       	mul	r22, r20
    3b80:	e0 0d       	add	r30, r0
    3b82:	f1 1d       	adc	r31, r1
    3b84:	92 9f       	mul	r25, r18
    3b86:	f0 0d       	add	r31, r0
    3b88:	83 9f       	mul	r24, r19
    3b8a:	f0 0d       	add	r31, r0
    3b8c:	74 9f       	mul	r23, r20
    3b8e:	f0 0d       	add	r31, r0
    3b90:	65 9f       	mul	r22, r21
    3b92:	f0 0d       	add	r31, r0
    3b94:	99 27       	eor	r25, r25
    3b96:	72 9f       	mul	r23, r18
    3b98:	b0 0d       	add	r27, r0
    3b9a:	e1 1d       	adc	r30, r1
    3b9c:	f9 1f       	adc	r31, r25
    3b9e:	63 9f       	mul	r22, r19
    3ba0:	b0 0d       	add	r27, r0
    3ba2:	e1 1d       	adc	r30, r1
    3ba4:	f9 1f       	adc	r31, r25
    3ba6:	bd 01       	movw	r22, r26
    3ba8:	cf 01       	movw	r24, r30
    3baa:	11 24       	eor	r1, r1
    3bac:	08 95       	ret

00003bae <__udivmodsi4>:
    3bae:	a1 e2       	ldi	r26, 0x21	; 33
    3bb0:	1a 2e       	mov	r1, r26
    3bb2:	aa 1b       	sub	r26, r26
    3bb4:	bb 1b       	sub	r27, r27
    3bb6:	fd 01       	movw	r30, r26
    3bb8:	0d c0       	rjmp	.+26     	; 0x3bd4 <__udivmodsi4_ep>

00003bba <__udivmodsi4_loop>:
    3bba:	aa 1f       	adc	r26, r26
    3bbc:	bb 1f       	adc	r27, r27
    3bbe:	ee 1f       	adc	r30, r30
    3bc0:	ff 1f       	adc	r31, r31
    3bc2:	a2 17       	cp	r26, r18
    3bc4:	b3 07       	cpc	r27, r19
    3bc6:	e4 07       	cpc	r30, r20
    3bc8:	f5 07       	cpc	r31, r21
    3bca:	20 f0       	brcs	.+8      	; 0x3bd4 <__udivmodsi4_ep>
    3bcc:	a2 1b       	sub	r26, r18
    3bce:	b3 0b       	sbc	r27, r19
    3bd0:	e4 0b       	sbc	r30, r20
    3bd2:	f5 0b       	sbc	r31, r21

00003bd4 <__udivmodsi4_ep>:
    3bd4:	66 1f       	adc	r22, r22
    3bd6:	77 1f       	adc	r23, r23
    3bd8:	88 1f       	adc	r24, r24
    3bda:	99 1f       	adc	r25, r25
    3bdc:	1a 94       	dec	r1
    3bde:	69 f7       	brne	.-38     	; 0x3bba <__udivmodsi4_loop>
    3be0:	60 95       	com	r22
    3be2:	70 95       	com	r23
    3be4:	80 95       	com	r24
    3be6:	90 95       	com	r25
    3be8:	9b 01       	movw	r18, r22
    3bea:	ac 01       	movw	r20, r24
    3bec:	bd 01       	movw	r22, r26
    3bee:	cf 01       	movw	r24, r30
    3bf0:	08 95       	ret

00003bf2 <__divmodsi4>:
    3bf2:	97 fb       	bst	r25, 7
    3bf4:	09 2e       	mov	r0, r25
    3bf6:	05 26       	eor	r0, r21
    3bf8:	0e d0       	rcall	.+28     	; 0x3c16 <__divmodsi4_neg1>
    3bfa:	57 fd       	sbrc	r21, 7
    3bfc:	04 d0       	rcall	.+8      	; 0x3c06 <__divmodsi4_neg2>
    3bfe:	d7 df       	rcall	.-82     	; 0x3bae <__udivmodsi4>
    3c00:	0a d0       	rcall	.+20     	; 0x3c16 <__divmodsi4_neg1>
    3c02:	00 1c       	adc	r0, r0
    3c04:	38 f4       	brcc	.+14     	; 0x3c14 <__divmodsi4_exit>

00003c06 <__divmodsi4_neg2>:
    3c06:	50 95       	com	r21
    3c08:	40 95       	com	r20
    3c0a:	30 95       	com	r19
    3c0c:	21 95       	neg	r18
    3c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c10:	4f 4f       	sbci	r20, 0xFF	; 255
    3c12:	5f 4f       	sbci	r21, 0xFF	; 255

00003c14 <__divmodsi4_exit>:
    3c14:	08 95       	ret

00003c16 <__divmodsi4_neg1>:
    3c16:	f6 f7       	brtc	.-4      	; 0x3c14 <__divmodsi4_exit>
    3c18:	90 95       	com	r25
    3c1a:	80 95       	com	r24
    3c1c:	70 95       	com	r23
    3c1e:	61 95       	neg	r22
    3c20:	7f 4f       	sbci	r23, 0xFF	; 255
    3c22:	8f 4f       	sbci	r24, 0xFF	; 255
    3c24:	9f 4f       	sbci	r25, 0xFF	; 255
    3c26:	08 95       	ret

00003c28 <__prologue_saves__>:
    3c28:	2f 92       	push	r2
    3c2a:	3f 92       	push	r3
    3c2c:	4f 92       	push	r4
    3c2e:	5f 92       	push	r5
    3c30:	6f 92       	push	r6
    3c32:	7f 92       	push	r7
    3c34:	8f 92       	push	r8
    3c36:	9f 92       	push	r9
    3c38:	af 92       	push	r10
    3c3a:	bf 92       	push	r11
    3c3c:	cf 92       	push	r12
    3c3e:	df 92       	push	r13
    3c40:	ef 92       	push	r14
    3c42:	ff 92       	push	r15
    3c44:	0f 93       	push	r16
    3c46:	1f 93       	push	r17
    3c48:	cf 93       	push	r28
    3c4a:	df 93       	push	r29
    3c4c:	cd b7       	in	r28, 0x3d	; 61
    3c4e:	de b7       	in	r29, 0x3e	; 62
    3c50:	ca 1b       	sub	r28, r26
    3c52:	db 0b       	sbc	r29, r27
    3c54:	0f b6       	in	r0, 0x3f	; 63
    3c56:	f8 94       	cli
    3c58:	de bf       	out	0x3e, r29	; 62
    3c5a:	0f be       	out	0x3f, r0	; 63
    3c5c:	cd bf       	out	0x3d, r28	; 61
    3c5e:	09 94       	ijmp

00003c60 <__epilogue_restores__>:
    3c60:	2a 88       	ldd	r2, Y+18	; 0x12
    3c62:	39 88       	ldd	r3, Y+17	; 0x11
    3c64:	48 88       	ldd	r4, Y+16	; 0x10
    3c66:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c68:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c6a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c6c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c6e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c70:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c72:	b9 84       	ldd	r11, Y+9	; 0x09
    3c74:	c8 84       	ldd	r12, Y+8	; 0x08
    3c76:	df 80       	ldd	r13, Y+7	; 0x07
    3c78:	ee 80       	ldd	r14, Y+6	; 0x06
    3c7a:	fd 80       	ldd	r15, Y+5	; 0x05
    3c7c:	0c 81       	ldd	r16, Y+4	; 0x04
    3c7e:	1b 81       	ldd	r17, Y+3	; 0x03
    3c80:	aa 81       	ldd	r26, Y+2	; 0x02
    3c82:	b9 81       	ldd	r27, Y+1	; 0x01
    3c84:	ce 0f       	add	r28, r30
    3c86:	d1 1d       	adc	r29, r1
    3c88:	0f b6       	in	r0, 0x3f	; 63
    3c8a:	f8 94       	cli
    3c8c:	de bf       	out	0x3e, r29	; 62
    3c8e:	0f be       	out	0x3f, r0	; 63
    3c90:	cd bf       	out	0x3d, r28	; 61
    3c92:	ed 01       	movw	r28, r26
    3c94:	08 95       	ret

00003c96 <_exit>:
    3c96:	f8 94       	cli

00003c98 <__stop_program>:
    3c98:	ff cf       	rjmp	.-2      	; 0x3c98 <__stop_program>
